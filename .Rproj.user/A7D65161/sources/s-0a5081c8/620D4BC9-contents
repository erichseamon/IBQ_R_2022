---
title: 'Spatiotemporal Impacts of Ideology and Social Vulnerability on COVID-19: Supplemental
  Appendix'
author: "Erich Seamon, Jennifer-Johnson Leung, Craig Miller, Ben Ridenhour"
date: "11/01/2022"
always_allow_html: yes
output:
  pdf_document:
    toc: yes
  html_document:
    css: custom.css
    code_folding: hide
    highlight: textmate
    theme: united
    toc: true
    toc_float: true
params: null
mainfont: serif
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, fig.width=15, fig.height=8.5)
knitr::opts_knit$set(root.dir = "/mnt/ceph/erichs/git/IMCI-covid-risk/")  # with something else than `getwd()`
```
\newpage
# Appendix Overview

## Summary

Below are examinations of COVID-19 cumulative deaths adjusted by population, at a county level.  We look at spatial and temporal variations for the entire United States, as well by region. 

## Part 1: Study Area and Regionalization

Regionalization is based on United States(US) Health and Human Services (HHS) health regions.

* Region 1 and 2 (combined): NorthEast: Connecticut, Maine, Massachusetts, New Hampshire, Rhode Island, Vermont, New York and New Jersey
* Region 3: MidEast: Pennsylvania, West Virginia, Maryland, Delaware and the District of Columbia
* Region 4: SouthEast: Florida, Georgia, South Carolina, and North Carolina, Alabama, Mississippi, Tennessee, and Kentucky
* Region 5: Midwest: Ohio, Indiana, Illinois, Michigan, Wisconsin, and Minnesota
* Region 6: MidSouth: Texas, Louisiana, Arkansas, and New Mexico, Oklahoma
* Region 7: Middle West: Iowa, Missouri, Nebraska, and Kansas
* Region 8: MidNorth: Montana, Wyoming, Utah, Colorado, North Dakota, and South Dakota
* Region 9: West: California, Nevada, and Arizona
* Region 10: Pacific Northwest: Idaho, Oregon, and Washington

## Part 2: Datasets and Modeling Framework

Part 2 of our analysis documents the datasets and modeling methodology employed as part of this effort.

## Part 3: Exploratory Data Analysis and Regression Modeling

Our regional analysis examines COVID-19 parameters for the entire United States, as well as for each of the nine (9) regions listed above.

* The first plot (1) shows fatality rates vs. logarithmic population density, categorized by voting ideology summarized by the 2020 Presidential Election.  100-75% vote for Biden = very liberal, 75-50% for Biden = moderately liberal, 100-75% for Trump = very conservative, and 75-50% for Trump = moderately conservative.  Each observation represents one county.

* The second plot (2) shows cumulative cases, adjusted for population, vs. cumulative deaths, adjusted for population, categorized by voting ideology - as noted above.

* The third (3) and fourth (4) plots show the relationship of the four ideology groupings across the specified region, over time - examining deaths for a rolling window, as well as cumulative deaths.  These plots provide a summary view of the change in ideological and regional associations with cases and deaths.

For each region, we have outputs for three linear linear models, with population adjusted deaths (by county) as the dependent variable - for each of the three time windows (alpha, delta, and omicron variant).  In addition, we have standardized coefficients graphs, that indicates the effect for each variable, for each model.

\newpage

## Part 4: Spatial Autocorrelation

The second portion of this analysis evaluates the spatial autocorrelation of population adjusted county deaths, for all three time periods examined.

## Part 5: Geographically Weighted Random Forest (GWRF) Modeling

The third portion of this analysis attempts to model spatial variation for the entire United States, using geographically weighted random forest modeling (GWRF).  Our model incorporates the same independent variables that are used as part of our regionalized linear models. 

Geographical Weighted Random Forest (GWRF) is a spatial analysis method using a local version of the Random Forest Regression Model. It allows for the investigation of spatial non-stationarity, and the relationship between a dependent and a set of independent variables. The latter is possible by fitting a sub-model for each observation in space, taking into account the neighboring observations. This technique adopts the idea of the Geographically Weighted Regression Kalogirou (2003). The main difference between a tradition (linear) GWR and GRF is that we can model non-stationarity coupled with a flexible non-linear model which is very hard to overfit due to its bootstrapping nature, thus relaxing the assumptions of traditional Gaussian statistics. Essentially it was designed to be a bridge between machine learning and geographical models, combining inferential and explanatory power. Additionally, it is suited for datasets with numerous predictors, due to the robust nature of the random forest algorithm with regards to high dimensionality.

For this analysis, We generate GWRF localized model fits and feature importances (IncMSE).  The feature importance algorithmic process is:

1. Compute model MSE
2. For each variable in the model:
   a. Permute variable
   b. Calculate new model MSE according to variable permutation
   c. Take the difference between model MSE and new model MSE
3. Collect the results in a list

\newpage 

# Part 1: Study Area and Regionalization

For the initial portion of our analysis, we examine COVID-19 cases and deaths for the entire United States, as well as by U.S. Human Health Services (HHS) regions, as noted in Figure S1 below.  

## Figure S1: Study Area

<center>

![](../data/hhs_regions.png){#id .class width=100% height=100%}  

</center>

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
library(stringr)
library(dplyr)
library(lmerTest)
library(parallel)
library(doSNOW)
library(plyr)
library(ggplot2)
library(sjPlot)
library(RcppRoll)

options(timeout=200)

risk_model <- function(date_entry) {

  
mc <- parallel::makeCluster(20, outfile="")
registerDoSNOW(mc)


#source("./src/risk_covid_data_combine.R") #NEED TO UNCOMMENT TO BRING DATA UP TO CURRENT DATE
source("./src/risk_cases_deaths_summary.R")

combined <- read.csv("https://folders.hpc.uidaho.edu/index.php/s/9E5I1nbq4Tlrlyb/download")
#combined <- read.csv("./data/sevenday_combined.csv")
#combined$fips <- str_pad(combined$fips, 5, pad = "0")

#age65 and over
age65 <- read.csv("./data/age65_over.csv")
age65$FIPS <- str_pad(age65$FIPS, 5, pad = "0")

#combined <- read.csv("/Users/tristanmoxley/Downloads/sevenday_combined.csv")
combined_refined <- combined[,c(5, 6, 7,23, 9,10,30)]
SVI <- read.csv("./data/SVI2018_US_COUNTY.csv")

#broadband
broadband <- read.csv("./data/broadband.csv")
broadband$FIPS <- str_pad(broadband$FIPS, 5, pad = "0")

#SVI <- read.csv("https://raw.githubusercontent.com/IMCI-GM/IMCI-covid-arima/main/data/SVI2018_US_COUNTY.csv?token=AUGOICYDUW25QB2V634JSIDA4S4WC")
SVI_refined <- SVI[,c(5,79,85,89,96)]
SVI_refined$FIPS <- str_pad(SVI_refined$FIPS, 5, pad = "0")
daily_deaths <- read.csv("./data/deaths_nationwide_cumulative.csv")
daily_deaths <- daily_deaths[,c(3,4,5,6)]

colnames(combined_refined) <- c("population", "FIPS", "cuml.cases", "freq.trans", "new.cases", "daily_cases", "date")
colnames(daily_deaths) <- c("date", "FIPS", "deaths", "daily_deaths")
daily_deaths$FIPS <- str_pad(daily_deaths$FIPS, 5, pad = "0")
combined_refined$FIPS <- str_pad(combined_refined$FIPS, 5, pad = "0")


#colnames(elections_refined) <- c("X", "FIPS", "total_votes", "race", "id", "fips_char", "place", "fname", "lname", "party", "pab", "votes", "incumbent", "mpc", "pct")
daily_combined <- merge(combined_refined, daily_deaths, by=c("FIPS", "date"))
daily_combined <- merge(daily_combined, SVI_refined, by="FIPS" )
#daily_combined <- merge(daily_combined, elections_refined, by="FIPS" )

#new_voting <- read.csv("https://raw.githubusercontent.com/IMCI-GM/IMCI-covid-arima/main/data/voting_threestates.csv?token=AUGOIC5SSFWZVBJBM74QFDLA4S52G")
new_voting <- read.csv("./data/voting_nationwide_liberal.csv")
new_voting$FIPS <- str_pad(new_voting$FIPS, 5, pad = "0")

density <- read.csv("./data/Population-Density By County.csv")
density <- density[5:7]
colnames(density) <- c("FIPS", "name", "density")
density$FIPS <- str_pad(density$FIPS, 5, pad = "0")

#fulldata <- merge(modeldata, new_voting, by="FIPS")
fulldata <- merge(daily_combined, new_voting, by="FIPS")

fulldata <- merge(fulldata, density, by="FIPS")

#merge broadband into fulldata

fulldata <- merge(fulldata, broadband, by="FIPS")

#full <- fulldata[,-c(5,11,21,22,23,24,26)]
#full2 <- full[,-c(10,12)]
#full3 <- full2[,-12]

#data <- full3[-c(300:321, 323:337, 339:354, 356:371, 373:384, 386:399, 401:404, 406:414, 416:431, 433:450, 452:478, 480:498, 500:520, 522:544),]


#maxdate <- as.Date(date_entry, "%m-%d-%Y")
#maxdate <- format(maxdate, "%Y-%m-%d")

data <- subset(fulldata, date == date_entry)

#--

# THE NEXT TWO LINES ARE FOR THE MOST RECENT DATE
# 
# data <- subset(fulldata, date == fulldata[nrow(fulldata),]$date)
# maxdate <- fulldata[nrow(fulldata),]$date



data$deaths_adjusted <- data$deaths/data$population
data$cuml.cases_adjusted <- data$cuml.cases/data$population
data$cases_to_deaths <- data$deaths/data$cuml.cases

data$vote_discrete = cut(data$pct,c(0,.25, .5, .75, 1))
data$vote_discrete <- revalue(data$vote_discrete, c("(0,0.25]"="Very Conservative", "(0.25,0.5]"="Moderately Conservative", "(0.5,0.75]"="Moderately Liberal", "(0.75,1]" = "Very Liberal"))

data <- merge(data, age65, by="FIPS", all.x = TRUE)
data$Age_over_65 <- as.numeric(data$Age_over_65)
data$deaths_age65_ratio <- data$deaths/data$Age_over_65
data$age65_ratio <- data$Age_over_65/data$population
data
}


#source("./src/risk_covid_data_combine.R") #NEED TO UNCOMMENT TO BRING DATA UP TO CURRENT DATE
source("./src/risk_cases_deaths_summary.R")

combined <- read.csv("https://folders.hpc.uidaho.edu/index.php/s/9E5I1nbq4Tlrlyb/download")
#combined <- read.csv("./data/sevenday_combined.csv")
#combined <- read.csv("/Users/tristanmoxley/Downloads/sevenday_combined.csv")
combined_refined <- combined[,c(5, 6, 7,23, 9,10,30)]
SVI <- read.csv("./data/SVI2018_US_COUNTY.csv")

#age65 and over
age65 <- read.csv("./data/age65_over.csv")
age65$FIPS <- str_pad(age65$FIPS, 5, pad = "0")

#broadband
broadband <- read.csv("./data/broadband.csv")
broadband$FIPS <- str_pad(broadband$FIPS, 5, pad = "0")

#SVI <- read.csv("https://raw.githubusercontent.com/IMCI-GM/IMCI-covid-arima/main/data/SVI2018_US_COUNTY.csv?token=AUGOICYDUW25QB2V634JSIDA4S4WC")
SVI_refined <- SVI[,c(5,79,85,89,96)]
SVI_refined$FIPS <- str_pad(SVI_refined$FIPS, 5, pad = "0")
daily_deaths <- read.csv("./data/deaths_nationwide_cumulative.csv")
daily_deaths <- daily_deaths[,c(3,4,5,6)]

colnames(combined_refined) <- c("population", "FIPS", "cuml.cases", "freq.trans", "new.cases", "daily_cases", "date")
colnames(daily_deaths) <- c("date", "FIPS", "deaths", "daily_deaths")
daily_deaths$FIPS <- str_pad(daily_deaths$FIPS, 5, pad = "0")
combined_refined$FIPS <- str_pad(combined_refined$FIPS, 5, pad = "0")


#colnames(elections_refined) <- c("X", "FIPS", "total_votes", "race", "id", "fips_char", "place", "fname", "lname", "party", "pab", "votes", "incumbent", "mpc", "pct")
daily_combined <- merge(combined_refined, daily_deaths, by=c("FIPS", "date"))
daily_combined <- merge(daily_combined, SVI_refined, by="FIPS" )
#daily_combined <- merge(daily_combined, elections_refined, by="FIPS" )

#new_voting <- read.csv("https://raw.githubusercontent.com/IMCI-GM/IMCI-covid-arima/main/data/voting_threestates.csv?token=AUGOIC5SSFWZVBJBM74QFDLA4S52G")
new_voting <- read.csv("./data/voting_nationwide_liberal.csv")
new_voting$FIPS <- str_pad(new_voting$FIPS, 5, pad = "0")

density <- read.csv("./data/Population-Density By County.csv")
density <- density[5:7]
colnames(density) <- c("FIPS", "name", "density")
density$FIPS <- str_pad(density$FIPS, 5, pad = "0")

fulldata <- merge(daily_combined, new_voting, by="FIPS")

fulldata <- merge(fulldata, density, by="FIPS")

fulldata$deaths_adjusted <- fulldata$deaths/fulldata$population
fulldata$cuml.cases_adjusted <- fulldata$cuml.cases/fulldata$population
fulldata$cases_to_deaths <- fulldata$deaths/fulldata$cuml.cases

fulldata$vote_discrete = cut(fulldata$pct,c(0,.25, .5, .75, 1))
fulldata$vote_discrete <- revalue(fulldata$vote_discrete, c("(0,0.25]"="Very Conservative", "(0.25,0.5]"="Moderately Conservative", "(0.5,0.75]"="Moderately Liberal", "(0.75,1]" = "Very Liberal"))
# 
# #rolling 7 day sum for deaths
fulldata_revised <- fulldata %>%
      arrange(FIPS, date) %>%
      group_by(FIPS, date) %>%
      mutate(new.deaths = roll_sum(daily_deaths, 7, align = "right", fill = NA)) 
fulldata_revised <- as.data.frame(fulldata_revised)


fulldata_revised <- merge(fulldata_revised, age65, by="FIPS", all.x=TRUE)
fulldata_revised$Age_over_65 <- as.numeric(fulldata_revised$Age_over_65)
fulldata_revised$deaths_age65_ratio <- fulldata_revised$deaths/fulldata_revised$Age_over_65
fulldata_revised$age65_ratio <- fulldata_revised$Age_over_65/fulldata_revised$population

fulldata_revised <- merge(fulldata_revised, broadband, by="FIPS")

maxdate <- "2022-04-01"
```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
library(stringr)
library(dplyr)
library(lmerTest)
library(parallel)
library(doSNOW)
library(plyr)
library(ggplot2)
library(sjPlot)
library(RcppRoll)

risk_model_latter <- function(date_entry, date_entry_latter) {

mc <- parallel::makeCluster(20, outfile="")
registerDoSNOW(mc)

#source("./src/risk_covid_data_combine.R") #NEED TO UNCOMMENT TO BRING DATA UP TO CURRENT DATE
source("./src/risk_cases_deaths_summary.R")

combined <- read.csv("https://folders.hpc.uidaho.edu/index.php/s/9E5I1nbq4Tlrlyb/download")
#combined <- read.csv("./data/sevenday_combined.csv")
#combined$fips <- str_pad(combined$fips, 5, pad = "0")

#age65 and over
age65 <- read.csv("./data/age65_over.csv")
age65$FIPS <- str_pad(age65$FIPS, 5, pad = "0")

#combined <- read.csv("/Users/tristanmoxley/Downloads/sevenday_combined.csv")
combined_refined <- combined[,c(5, 6, 7,23, 9,10,30)]
SVI <- read.csv("./data/SVI2018_US_COUNTY.csv")

#broadband
broadband <- read.csv("./data/broadband.csv")
broadband$FIPS <- str_pad(broadband$FIPS, 5, pad = "0")

#SVI <- read.csv("https://raw.githubusercontent.com/IMCI-GM/IMCI-covid-arima/main/data/SVI2018_US_COUNTY.csv?token=AUGOICYDUW25QB2V634JSIDA4S4WC")
SVI_refined <- SVI[,c(5,79,85,89,96)]
SVI_refined$FIPS <- str_pad(SVI_refined$FIPS, 5, pad = "0")
daily_deaths <- read.csv("./data/deaths_nationwide_cumulative.csv")
daily_deaths <- daily_deaths[,c(3,4,5,6)]

colnames(combined_refined) <- c("population", "FIPS", "cuml.cases", "freq.trans", "new.cases", "daily_cases", "date")
colnames(daily_deaths) <- c("date", "FIPS", "deaths", "daily_deaths")
daily_deaths$FIPS <- str_pad(daily_deaths$FIPS, 5, pad = "0")
combined_refined$FIPS <- str_pad(combined_refined$FIPS, 5, pad = "0")


#colnames(elections_refined) <- c("X", "FIPS", "total_votes", "race", "id", "fips_char", "place", "fname", "lname", "party", "pab", "votes", "incumbent", "mpc", "pct")
daily_combined <- merge(combined_refined, daily_deaths, by=c("FIPS", "date"))
daily_combined <- merge(daily_combined, SVI_refined, by="FIPS" )
#daily_combined <- merge(daily_combined, elections_refined, by="FIPS" )

#new_voting <- read.csv("https://raw.githubusercontent.com/IMCI-GM/IMCI-covid-arima/main/data/voting_threestates.csv?token=AUGOIC5SSFWZVBJBM74QFDLA4S52G")
new_voting <- read.csv("./data/voting_nationwide_liberal.csv")
new_voting$FIPS <- str_pad(new_voting$FIPS, 5, pad = "0")

density <- read.csv("./data/Population-Density By County.csv")
density <- density[5:7]
colnames(density) <- c("FIPS", "name", "density")
density$FIPS <- str_pad(density$FIPS, 5, pad = "0")

#fulldata <- merge(modeldata, new_voting, by="FIPS")
fulldata <- merge(daily_combined, new_voting, by="FIPS")

fulldata <- merge(fulldata, density, by="FIPS")

fulldata <- merge(fulldata, broadband, by="FIPS")

#full <- fulldata[,-c(5,11,21,22,23,24,26)]
#full2 <- full[,-c(10,12)]
#full3 <- full2[,-12]

#data <- full3[-c(300:321, 323:337, 339:354, 356:371, 373:384, 386:399, 401:404, 406:414, 416:431, 433:450, 452:478, 480:498, 500:520, 522:544),]


#maxdate <- as.Date(date_entry, "%m-%d-%Y")
#maxdate <- format(maxdate, "%Y-%m-%d")

data <- subset(fulldata, date == date_entry)

#added to remove data before may 1, 2021
data_latter <- subset(fulldata, date == date_entry_latter)
data$cuml.cases <- data$cuml.cases - data_latter$cuml.cases
data$deaths <- data$deaths - data_latter$deaths
#--

# THE NEXT TWO LINES ARE FOR THE MOST RECENT DATE
# 
# data <- subset(fulldata, date == fulldata[nrow(fulldata),]$date)
# maxdate <- fulldata[nrow(fulldata),]$date



data$deaths_adjusted <- data$deaths/data$population
data$cuml.cases_adjusted <- data$cuml.cases/data$population
data$cases_to_deaths <- data$deaths/data$cuml.cases

data$vote_discrete = cut(data$pct,c(0,.25, .5, .75, 1))
data$vote_discrete <- revalue(data$vote_discrete, c("(0,0.25]"="Very Conservative", "(0.25,0.5]"="Moderately Conservative", "(0.5,0.75]"="Moderately Liberal", "(0.75,1]" = "Very Liberal"))

data <- merge(data, age65, by="FIPS", all.x = TRUE)
data$Age_over_65 <- as.numeric(data$Age_over_65)
data$deaths_age65_ratio <- data$deaths/data$Age_over_65
data$age65_ratio <- data$Age_over_65/data$population

data <- merge(data, broadband, by="FIPS")


data
}


```

\newpage


# Part 2: Datasets and Modeling Framework

We utilize fifteen (15) independent variables and one (1) dependent variable for our analysis, which are as follows:

## Table S1: Variable Descriptions

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(knitr)
library(kableExtra)
df <- data.frame(Type = c("Independent","Independent","Independent","Independent","Independent","Independent","Independent","Independent","Independent","Independent","Independent","Independent","Independent","Independent","Independent","Independent", "Dependent"), Variables = c("Socioeconomic Status", "Household Composition and Disability", "Minority Status", "Housing Type and Transportation", "Political Divergence", "Democratic Voting Percentage", "Vaccination Rate", "Population Density", "Obesity", "Unemployment", "Uninsured Adults", "Social Associations", "Diabetes", "Food Insecurity", "Broadband Access", "Population Age 65+", "Population adjusted COVID-19 deaths"), Description = linebreak(c("Index which represents income, poverty, employment, and education.", "Index with represents age, single parenting, and disability.", "Index which represents race and ethnicity.","Index which represents housing structure, crowding and vehicle access.", "This is a calculated variable, based on the 2020 U.S. Presidential election, and is scaled below 1. We examine, for each county, the percentage of democratic and conservative votes - and construct a ratio with those counties directly adjacent. This value provides an estimate of political divergence (e.g.  Counties which are democratic, surrounded by conservative counties, receive a value from 0 to 1, while those conservative counties, surrounded by liberal counties, receives a value from ranging from 1 and above).", "Represents voting outcomes from the 2020 presidential general election.","CDC data for two dose vaccination rates at a county level, ending in April 1, 2022.", "Population density at a county level.", "Number of people who are obese, at a county level.","Number of unemployed adults per county.", "Number of uninsured adults per county.", "Number of people who are members of a social organization (churches, clubs, etc).","Number of people with diabetes at a county level.", "Index indicating the relative level of food insecurity in a county.", "Number of people without broadband access.","Number of people age 65 or older in a county.", "Population-adjusted COVID-19 deaths per county.")))
kable(df, col.names = c("Type", "Variables", "Description"), escape = F, caption = "Table S1: Variable Descriptions")%>% column_spec(3, width = "3in") %>%
  kable_styling(full_width = FALSE,latex_options = c("hold_position", "scale_down"))

```


<!-- **CDC Social Vulnerability Index (SVI) data.**  Social vulnerability refers to the potential negative effects on communities caused by external stresses on human health. Such stresses include natural or human-caused disasters, or disease outbreaks. Reducing social vulnerability can decrease both human suffering and economic loss. The CDC/ATSDR Social Vulnerability Index (CDC/ATSDR SVI) uses 15 U.S. census variables to help local officials identify communities that may need support before, during, or after disasters. Each index is on a scale from 0 to 1. Datasets 1 - 4 below were derived from CDC SVI datasets. -->

<!-- 1. Socioeconomic Status:  Index which represents income, poverty, employment, and education. -->
<!-- 2. Household Composition and Disability: Index with represents age, single parenting, and disability. -->
<!-- 3. Minority Status and Language: Index which represents race and ethnicity. -->
<!-- 4. Housing Type and Transportation: Index which represents housing structure, crowding and vehicle access. -->
<!-- 5. Political Divergence.  This is a calculated variable, based on the 2020 U.S. Presidential election, and is scaled below 1. We examine, for each county, the percentage of democratic and conservative votes - and construct a ratio with those counties directly adjacent. This value provides an estimate of political divergence (e.g.  Counties which are democratic, surrounded by conservative counties, receive a value from 0 to 1, while those conservative counties, surrounded by liberal counties, receives a value from ranging from 1 and above). -->
<!-- 6. Democratic voting percentage:  This variable is represented by voting outcomes from the 2020 presidential election. -->
<!-- 7. Vaccination rate.  We used CDC data for two dose vaccination rates at a county level, ending in April 1, 2022. -->
<!-- 8. Population density -->
<!-- 9. Obesity -->
<!-- 10. Unemployment -->
<!-- 11. Uninsured Adults -->
<!-- 12. Social Associations -->
<!-- 13. Diabetes -->
<!-- 14. Food Insecurity -->
<!-- 15. Broadband Access -->
<!-- 16. Ratio of deaths to population of Age 65+ -->


<!-- For our dependent variable, we utilized: -->

<!-- 1. populations adjusted COVID-19 deaths at a county level. -->

Using this framework, we constructed three (3) temporal model time frames:

1. Alpha variant time window (deaths calculated from December 1, 2019 to May 1, 2021)
2. Delta variant time window (deaths calculated from May 1, 2021, to December 1, 2021)
3. Omicron variant time window (deaths calculated from December 1, 2021 to April 1, 2022)

\newpage

## Figure S2: Model Framework

<!-- Our model framework, shown in Figure S2, outlines model runs for 1) multivariate linear models for each of ten (10) health and human services regions (shown in Figure S1), as well as three (3) geographically weighted random forest models (for each variant time window) for the entire United States. -->

<center>

![](../data/model.png){#id .class width=100% height=100%}  

</center>
\newpage

```{r Linear_models, echo=FALSE, results='hide',message=FALSE, warning=FALSE, fig.cap = "State Categorization by Legislative and Governorship Alignment."}
# 
#dyn.load("/opt/modules/climatology/gdal/3.1.4/lib/libgdal.so.27")
# dyn.load("/opt/modules/climatology/proj/6.3.1/lib/libproj.so.15")

library(rgdal)
library(rgeos)
library(maptools)
library(spdep)
library(sp)


  states <- readShapePoly('./data/states/states.shp',
                          proj4string=CRS
                          ("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
  projection = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")

states <- subset(states, STATE_NAME != "Alaska")
states <- subset(states, STATE_NAME != "Hawaii")
states <- subset(states, STATE_NAME != "District of Columbia")
  #states <- spTransform(states, CRS("+proj=utm +zone=9 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))


#policy describes legislature and governor balance. 1 - all three liberal, 2 - all three conservative, 3 - split
policy <- c(1,3,1,2,2,2,3,2,3,3,1,3,2,3,2,1,3,1,1,1,2,1,2,1,2,1,1,2,3,1,3,3,1,2,2,2,3,2,2,1,2,2,2,2,2,3,2,3)

# 
# states$STATE_NAME <- toupper(states$STATE_NAME)
# voting_state <- merge(states, new_voting_state_combined, by="STATE_NAME")
# my.col <- colorRampPalette(c(rgb(0,0,1,1), rgb(0,0,1,0)), alpha = TRUE)(48)
# my.col <- colorRampPalette(brewer.pal(11, "RdBu"))(diff(range(new_voting_state_combined$pct)))
# 
# voting_state$vote_groups <- cut(voting_state$lib_pct, breaks = c(0,.50, 1))
# levels(voting_state$vote_groups) <- c("Blue", "Red")
# voting_state$policy <- policy

states$policy <- policy
states$policy <- as.factor(states$policy)
col=c("red","blue","green")

  counties <- readShapePoly('./data/counties/UScounties_conus.shp',
                            proj4string=CRS
                            ("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
  projection = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
  
  #counties <- spTransform(counties, CRS("+proj=utm +zone=9 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))

  
  
  
  
  #counties  <- subset(counties, STATE_NAME == "California" | STATE_NAME == "Arizona" |  STATE_NAME == "Nevada")
  
  new_voting_removed_na <- new_voting[!(is.na(new_voting$pct)), ]

  counties_merged <- merge(counties, new_voting, by="FIPS", duplicateGeoms = TRUE)
  
  #fixing NA values due to spatial data frame having empty counties due to lack of voting data.  Minimal counties (< 20)
  naIndex <- which(is.na(counties_merged$pct))
  counties_merged[naIndex, "pct"] <- 0
  
  
  

  #counties@data <- counties@data[-c(36,690,710,882),]
  
sf::sf_use_s2(FALSE)
nb <- poly2nb(counties_merged, queen = TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)

Inc.lag <- lag.listw(lw, counties_merged$pct)
divergence <- counties_merged$pct/Inc.lag
divergence[which(!is.finite(divergence))] <- 0

counties_merged <- cbind(counties_merged, Inc.lag, divergence)

colnames(counties_merged@data)[13] <- c("adjacent_ideology")
colnames(counties_merged@data)[14] <- c("divergence")
  
  
vac <- read.csv("https://folders.hpc.uidaho.edu/index.php/s/DtXpb1dXAgVY4Ei/download")
#vac <- read.csv("./data/COVID-19_Vaccinations_in_the_United_States_County.csv")

#vac <- vac[,1:6]


#merge into one file

#added second date to remove data before 
#risk <- risk_model("2022-04-01")
risk <- risk_model_latter("2021-05-01", "2020-02-01")
risk_latter <- risk_model_latter("2022-04-01", "2021-05-01")

risk_omicron <- risk_model_latter("2022-04-01", "2021-12-01")
risk_delta <- risk_model_latter("2021-12-01", "2021-05-01")

#risk$date <- as.Date(risk$date, format = "%d/%m/%Y")


#add vaccinations that are unique for each model time frame

#prevac
vac_04_01_2021 <- subset(vac, Date == "04/01/2022")
vac_04_01_2021$Date <- as.Date(vac_04_01_2021$Date, "%m/%d/%Y" )
colnames(vac_04_01_2021)[1] <- "date"
vac_04_01_2021 <- vac_04_01_2021[,c(1:5,18)]
risk_vac <- merge(risk, vac_04_01_2021, by="FIPS")

#postvac
vac_04_01_2021 <- subset(vac, Date == "04/01/2022")
vac_04_01_2021$Date <- as.Date(vac_04_01_2021$Date, "%m/%d/%Y" )
colnames(vac_04_01_2021)[1] <- "date"
vac_04_01_2021 <- vac_04_01_2021[,c(1:5,18)]
risk_vac_latter <- merge(risk_latter, vac_04_01_2021, by="FIPS")

#delta
vac_04_01_2021 <- subset(vac, Date == "04/01/2022")
vac_04_01_2021$Date <- as.Date(vac_04_01_2021$Date, "%m/%d/%Y" )
colnames(vac_04_01_2021)[1] <- "date"
vac_04_01_2021 <- vac_04_01_2021[,c(1:5,18)]
risk_vac_delta <- merge(risk_delta, vac_04_01_2021, by="FIPS")

#omicron
vac_04_01_2021 <- subset(vac, Date == "04/01/2022")
vac_04_01_2021$Date <- as.Date(vac_04_01_2021$Date, "%m/%d/%Y" )
colnames(vac_04_01_2021)[1] <- "date"
vac_04_01_2021 <- vac_04_01_2021[,c(1:5,18)]
risk_vac_omicron <- merge(risk_omicron, vac_04_01_2021, by="FIPS")


risk_vac_divergence_delta <- merge(risk_vac_delta, counties_merged, by="FIPS")
risk_vac_divergence_omicron <- merge(risk_vac_omicron, counties_merged, by="FIPS")

#remove for broadband add
risk_vac_divergence_delta <- risk_vac_divergence_delta[-c(23:25,33,34)]
risk_vac_divergence_omicron <- risk_vac_divergence_omicron[-c(23:25,33,34)]

risk_final_delta <- risk_vac_divergence_delta[c(1,3,4,8,10:13,18,19,20,22,23:25,27,28,29,30,35,47:48)]
risk_final_omicron <- risk_vac_divergence_omicron[c(1,3,4,8,10:13,18,19,20,22,23:25,27,28,29,30,35,47:48)]




risk_vac_divergence <- merge(risk_vac, counties_merged, by="FIPS")
risk_vac_divergence_latter <- merge(risk_vac_latter, counties_merged, by="FIPS")


risk_vac_divergence <- risk_vac_divergence[-c(23:25,33,34)]
risk_vac_divergence_latter <- risk_vac_divergence_latter[-c(23:25,33,34)]

risk_final <- risk_vac_divergence[c(1,3,4,8,10:13,18,19,20,22,23:25,27,28,29,30,35,47:48)]
risk_final_latter <- risk_vac_divergence_latter[c(1,3,4,8,10:13,18,19,20,22,23:25,27,28,29,30,35,47:48)]

rankings <- read.csv("./data/countyrankings_refined.csv")
#colnames(rankings) <- c("FIPS", "State", "County", "Obesity", "FEI", "Physically_Inactive", "Exercise_Access", "Excessive_Drinking")

rankings$FIPS <- str_pad(rankings$FIPS, 5, pad = "0")

#
linear_risk_final <- merge(risk_final, rankings, by="FIPS")
linear_risk_final_latter <- merge(risk_final_latter, rankings, by="FIPS")

linear_risk_final_delta <- merge(risk_final_delta, rankings, by="FIPS")
linear_risk_final_omicron <- merge(risk_final_omicron, rankings, by="FIPS")







#risk_final <- risk_vac_divergence

states$STATE_NAME <- tolower(states$STATE_NAME)
names(states)[names(states)=="STATE_NAME"] <- "state.x"
states <- states[,-c(2:5)]

linear_risk_final <- merge(linear_risk_final, states, by = "state.x")
linear_risk_final_latter <- merge(linear_risk_final_latter, states, by = "state.x")

linear_risk_final_delta <- merge(linear_risk_final_delta, states, by = "state.x")
linear_risk_final_omicron <- merge(linear_risk_final_omicron, states, by = "state.x")



#latter
#divergence scaled

linear_risk_final$divergence_scaled <- linear_risk_final$divergence

 linear_risk_final$divergence_scaled[linear_risk_final$divergence_scaled<1] <- 
                      linear_risk_final$divergence_scaled[linear_risk_final$divergence_scaled<1]+ (1-linear_risk_final$divergence_scaled[linear_risk_final$divergence_scaled<1])

 linear_risk_final$divergence_scaled <- (linear_risk_final$divergence_scaled - min(linear_risk_final$divergence_scaled)) / (max(linear_risk_final$divergence_scaled) - min(linear_risk_final$divergence_scaled)) 

 
 #fix broadband and scale
 
 linear_risk_final$broadband_access.y <-  (100 - linear_risk_final$broadband_access.y)/100
  linear_risk_final_latter$broadband_access.y <-  (100 - linear_risk_final_latter$broadband_access.y)/100
 linear_risk_final_delta$broadband_access.y <-  (100 - linear_risk_final_delta$broadband_access.y)/100
 linear_risk_final_omicron$broadband_access.y <-  (100 - linear_risk_final_omicron$broadband_access.y)/100


 
 
 #risk_final
 #scaling
 
 #density scaled

# linear_risk_final$density <- log(linear_risk_final$density)
# linear_risk_final$density_scaled <- linear_risk_final$density
# 
#  linear_risk_final$density_scaled <- (linear_risk_final$density_scaled - min(linear_risk_final$density_scaled)) / (max(linear_risk_final$density_scaled) - min(linear_risk_final$density_scaled)) 
#  
  #vaccination scaled

 linear_risk_final$Series_Complete_Pop_Pct[is.na(linear_risk_final$Series_Complete_Pop_Pct)] <- 50.0
linear_risk_final$Series_Complete_Pop_Pct_scaled <- linear_risk_final$Series_Complete_Pop_Pct

linear_risk_final$Series_Complete_Pop_Pct_scaled <- linear_risk_final$Series_Complete_Pop_Pct_scaled/100

 # linear_risk_final$Series_Complete_Pop_Pct_scaled <- (linear_risk_final$Series_Complete_Pop_Pct_scaled - min(linear_risk_final$Series_Complete_Pop_Pct_scaled)) / (max(linear_risk_final$Series_Complete_Pop_Pct_scaled) - min(linear_risk_final$Series_Complete_Pop_Pct_scaled)) 

#latter
#divergence scaled

linear_risk_final_latter$divergence_scaled <- linear_risk_final_latter$divergence

 linear_risk_final_latter$divergence_scaled[linear_risk_final_latter$divergence_scaled<1] <- 
                      linear_risk_final_latter$divergence_scaled[linear_risk_final_latter$divergence_scaled<1]+ (1-linear_risk_final_latter$divergence_scaled[linear_risk_final_latter$divergence_scaled<1])

 linear_risk_final_latter$divergence_scaled <- (linear_risk_final_latter$divergence_scaled - min(linear_risk_final_latter$divergence_scaled)) / (max(linear_risk_final_latter$divergence_scaled) - min(linear_risk_final_latter$divergence_scaled)) 

 
 # #fix broadband and scale
 # 
 # linear_risk_final_latter$broadband_access.y <-  (100 - linear_risk_final_latter$broadband_access.y)/100
 #  linear_risk_final_latter$broadband_access.y <-  (100 - linear_risk_final_latter$broadband_access.y)/100
 # linear_risk_final_latter_delta$broadband_access.y <-  (100 - linear_risk_final_latter_delta$broadband_access.y)/100
 # linear_risk_final_latter_omicron$broadband_access.y <-  (100 - linear_risk_final_latter_omicron$broadband_access.y)/100
 # 

 
 
 
 #scaling
 
 #density scale
 
# linear_risk_final_latter$density <- log(linear_risk_final_latter$density)
# linear_risk_final_latter$density_scaled <- linear_risk_final_latter$density
# 
#  linear_risk_final_latter$density_scaled <- (linear_risk_final_latter$density_scaled - min(linear_risk_final_latter$density_scaled)) / (max(linear_risk_final_latter$density_scaled) - min(linear_risk_final_latter$density_scaled)) 
#  
  #vaccination scaled

  linear_risk_final_latter$Series_Complete_Pop_Pct[is.na(linear_risk_final_latter$Series_Complete_Pop_Pct)] <- 50.0

linear_risk_final_latter$Series_Complete_Pop_Pct_scaled <- linear_risk_final_latter$Series_Complete_Pop_Pct

linear_risk_final_latter$Series_Complete_Pop_Pct_scaled <- linear_risk_final_latter$Series_Complete_Pop_Pct_scaled/100

 # linear_risk_final_latter$Series_Complete_Pop_Pct_scaled <- (linear_risk_final_latter$Series_Complete_Pop_Pct_scaled - min(linear_risk_final_latter$Series_Complete_Pop_Pct_scaled)) / (max(linear_risk_final_latter$Series_Complete_Pop_Pct_scaled) - min(linear_risk_final_latter$Series_Complete_Pop_Pct_scaled)) 

 
 #delta
#divergence scaled

linear_risk_final_delta$divergence_scaled <- linear_risk_final_delta$divergence

 linear_risk_final_delta$divergence_scaled[linear_risk_final_delta$divergence_scaled<1] <- 
                      linear_risk_final_delta$divergence_scaled[linear_risk_final_delta$divergence_scaled<1]+ (1-linear_risk_final_delta$divergence_scaled[linear_risk_final_delta$divergence_scaled<1])

 linear_risk_final_delta$divergence_scaled <- (linear_risk_final_delta$divergence_scaled - min(linear_risk_final_delta$divergence_scaled)) / (max(linear_risk_final_delta$divergence_scaled) - min(linear_risk_final_delta$divergence_scaled)) 

 
 # #fix broadband and scale
 # 
 # linear_risk_final_delta$broadband_access.y <-  (100 - linear_risk_final_delta$broadband_access.y)/100
 #  linear_risk_final_delta$broadband_access.y <-  (100 - linear_risk_final_delta$broadband_access.y)/100
 # linear_risk_final_delta_delta$broadband_access.y <-  (100 - linear_risk_final_delta_delta$broadband_access.y)/100
 # linear_risk_final_delta_omicron$broadband_access.y <-  (100 - linear_risk_final_delta_omicron$broadband_access.y)/100


 
 
 
 #scaling
 
 #density scaled

#  linear_risk_final_delta$density <- log(linear_risk_final_delta$density)
# linear_risk_final_delta$density_scaled <- linear_risk_final_delta$density
# 
#  linear_risk_final_delta$density_scaled <- (linear_risk_final_delta$density_scaled - min(linear_risk_final_delta$density_scaled)) / (max(linear_risk_final_delta$density_scaled) - min(linear_risk_final_delta$density_scaled)) 
#  
  #vaccination scaled
 linear_risk_final_delta$Series_Complete_Pop_Pct[is.na(linear_risk_final_delta$Series_Complete_Pop_Pct)] <- 50.0

linear_risk_final_delta$Series_Complete_Pop_Pct_scaled <- linear_risk_final_delta$Series_Complete_Pop_Pct

linear_risk_final_delta$Series_Complete_Pop_Pct_scaled <- linear_risk_final_delta$Series_Complete_Pop_Pct_scaled/100

 # linear_risk_final_delta$Series_Complete_Pop_Pct_scaled <- (linear_risk_final_delta$Series_Complete_Pop_Pct_scaled - min(linear_risk_final_delta$Series_Complete_Pop_Pct_scaled)) / (max(linear_risk_final_delta$Series_Complete_Pop_Pct_scaled) - min(linear_risk_final_delta$Series_Complete_Pop_Pct_scaled)) 
 
 #omicron
#divergence scaled

linear_risk_final_omicron$divergence_scaled <- linear_risk_final_omicron$divergence

 linear_risk_final_omicron$divergence_scaled[linear_risk_final_omicron$divergence_scaled<1] <- 
                      linear_risk_final_omicron$divergence_scaled[linear_risk_final_omicron$divergence_scaled<1]+ (1-linear_risk_final_omicron$divergence_scaled[linear_risk_final_omicron$divergence_scaled<1])

 linear_risk_final_omicron$divergence_scaled <- (linear_risk_final_omicron$divergence_scaled - min(linear_risk_final_omicron$divergence_scaled)) / (max(linear_risk_final_omicron$divergence_scaled) - min(linear_risk_final_omicron$divergence_scaled)) 

 
 # #fix broadband and scale
 # 
 # linear_risk_final_omicron$broadband_access.y <-  (100 - linear_risk_final_omicron$broadband_access.y)/100
 #  linear_risk_final_omicron$broadband_access.y <-  (100 - linear_risk_final_omicron$broadband_access.y)/100
 # linear_risk_final_omicron_delta$broadband_access.y <-  (100 - linear_risk_final_omicron_delta$broadband_access.y)/100
 # linear_risk_final_omicron_omicron$broadband_access.y <-  (100 - linear_risk_final_omicron_omicron$broadband_access.y)/100
 # 

 
 
 
 #scaling
 
 #density scaled

# linear_risk_final_omicron$density <- log(linear_risk_final_omicron$density)
# linear_risk_final_omicron$density_scaled <- linear_risk_final_omicron$density
# 
#  linear_risk_final_omicron$density_scaled <- (linear_risk_final_omicron$density_scaled - min(linear_risk_final_omicron$density_scaled)) / (max(linear_risk_final_omicron$density_scaled) - min(linear_risk_final_omicron$density_scaled)) 
 
  #vaccination scaled

  linear_risk_final_omicron$Series_Complete_Pop_Pct[is.na(linear_risk_final_omicron$Series_Complete_Pop_Pct)] <- 50.0

linear_risk_final_omicron$Series_Complete_Pop_Pct_scaled <- linear_risk_final_omicron$Series_Complete_Pop_Pct

linear_risk_final_omicron$Series_Complete_Pop_Pct_scaled <- linear_risk_final_omicron$Series_Complete_Pop_Pct_scaled/100
# 
#  linear_risk_final_omicron$Series_Complete_Pop_Pct_scaled <- (linear_risk_final_omicron$Series_Complete_Pop_Pct_scaled - min(linear_risk_final_omicron$Series_Complete_Pop_Pct_scaled)) / (max(linear_risk_final_omicron$Series_Complete_Pop_Pct_scaled) - min(linear_risk_final_omicron$Series_Complete_Pop_Pct_scaled)) 
 

#dealing with counties with populations below a certain amount

linear_risk_final <- subset(linear_risk_final, population > 500)
linear_risk_final_delta <- subset(linear_risk_final_delta, population > 500)
linear_risk_final_omicron <- subset(linear_risk_final_omicron, population > 500)

#address lea county NM as an extremely high leverage observation

linear_risk_final <- subset(linear_risk_final, FIPS != c(35039))
linear_risk_final_delta <- subset(linear_risk_final_delta, FIPS != c(35039))
linear_risk_final_omicron <- subset(linear_risk_final_omicron, FIPS != c(35039))


risk_final_north_latter <- subset(linear_risk_final_latter, state.x == "new york" | state.x == "new jersey")
risk_final_midwest_latter <- subset(linear_risk_final_latter, state.x == "minnesota" | state.x == "wisconsin" | state.x == "illinois" | state.x == "indiana" | state.x == "ohio" | state.x == "michigan")
risk_final_PNW_latter <- subset(linear_risk_final_latter, state.x == "idaho" | state.x == "washington" | state.x == "oregon")
risk_final_midsouth_latter <- subset(linear_risk_final_latter, state.x == "louisiana" | state.x == "arkansas" | state.x == "texas" | state.x == "new mexico")
risk_final_middlewest_latter <- subset(linear_risk_final_latter, state.x == "iowa" | state.x == "missouri" | state.x == "nebraska" | state.x == "kansas")
risk_final_southeast_latter <- subset(linear_risk_final_latter, state.x == "florida" | state.x == "georgia" | state.x == "south carolina" | state.x == "north carolina")
risk_final_northeast_latter <- subset(linear_risk_final_latter, state.x == "connecticut" | state.x == "maine" | state.x == "massachusetts" | state.x == "new hampshire" | state.x == "rhode island" | state.x == "vermont" | state.x == "new york" | state.x == "new jersey")
risk_final_midnorth_latter <- subset(linear_risk_final_latter, state.x == "montana" | state.x == "wyoming" | state.x == "utah" | state.x == "colorado" | state.x == "north dakota" | state.x == "south dakota")
risk_final_mideast_latter <- subset(linear_risk_final_latter, state.x == "pennsylania" | state.x == "west virginia" | state.x == "maryland" | state.x == "delaware")
risk_final_west_latter <- subset(linear_risk_final_latter, state.x == "california" | state.x == "nevada" | state.x == "arizona")


risk_final_north <- subset(linear_risk_final, state.x == "new york" | state.x == "new jersey")
risk_final_midwest <- subset(linear_risk_final, state.x == "minnesota" | state.x == "wisconsin" | state.x == "illinois" | state.x == "indiana" | state.x == "ohio" | state.x == "michigan")
risk_final_PNW <- subset(linear_risk_final, state.x == "idaho" | state.x == "washington" | state.x == "oregon")
risk_final_midsouth <- subset(linear_risk_final, state.x == "louisiana" | state.x == "arkansas" | state.x == "texas" | state.x == "new mexico")
risk_final_middlewest <- subset(linear_risk_final, state.x == "iowa" | state.x == "missouri" | state.x == "nebraska" | state.x == "kansas")
risk_final_southeast <- subset(linear_risk_final, state.x == "florida" | state.x == "georgia" | state.x == "south carolina" | state.x == "north carolina")
risk_final_northeast <- subset(linear_risk_final, state.x == "connecticut" | state.x == "maine" | state.x == "massachusetts" | state.x == "new hampshire" | state.x == "rhode island" | state.x == "vermont" | state.x == "new york" | state.x == "new jersey")
risk_final_midnorth <- subset(linear_risk_final, state.x == "montana" | state.x == "wyoming" | state.x == "utah" | state.x == "colorado" | state.x == "north dakota" | state.x == "south dakota")
risk_final_mideast <- subset(linear_risk_final, state.x == "pennsylania" | state.x == "west virginia" | state.x == "maryland" | state.x == "delaware")
risk_final_west <- subset(linear_risk_final, state.x == "california" | state.x == "nevada" | state.x == "arizona")


risk_final_north_delta <- subset(linear_risk_final_delta, state.x == "new york" | state.x == "new jersey")
risk_final_midwest_delta <- subset(linear_risk_final_delta, state.x == "minnesota" | state.x == "wisconsin" | state.x == "illinois" | state.x == "indiana" | state.x == "ohio" | state.x == "michigan")
risk_final_PNW_delta <- subset(linear_risk_final_delta, state.x == "idaho" | state.x == "washington" | state.x == "oregon")
risk_final_midsouth_delta <- subset(linear_risk_final_delta, state.x == "louisiana" | state.x == "arkansas" | state.x == "texas" | state.x == "new mexico")
risk_final_middlewest_delta <- subset(linear_risk_final_delta, state.x == "iowa" | state.x == "missouri" | state.x == "nebraska" | state.x == "kansas")
risk_final_southeast_delta <- subset(linear_risk_final_latter, state.x == "florida" | state.x == "georgia" | state.x == "south carolina" | state.x == "north carolina")
risk_final_northeast_delta <- subset(linear_risk_final_delta, state.x == "connecticut" | state.x == "maine" | state.x == "massachusetts" | state.x == "new hampshire" | state.x == "rhode island" | state.x == "vermont" | state.x == "new york" | state.x == "new jersey")
risk_final_midnorth_delta <- subset(linear_risk_final_delta, state.x == "montana" | state.x == "wyoming" | state.x == "utah" | state.x == "colorado" | state.x == "north dakota" | state.x == "south dakota")
risk_final_mideast_delta <- subset(linear_risk_final_delta, state.x == "pennsylania" | state.x == "west virginia" | state.x == "maryland" | state.x == "delaware")
risk_final_west_delta <- subset(linear_risk_final_delta, state.x == "california" | state.x == "nevada" | state.x == "arizona")


risk_final_north_omicron <- subset(linear_risk_final_omicron, state.x == "new york" | state.x == "new jersey")
risk_final_midwest_omicron <- subset(linear_risk_final_omicron, state.x == "minnesota" | state.x == "wisconsin" | state.x == "illinois" | state.x == "indiana" | state.x == "ohio" | state.x == "michigan")
risk_final_PNW_omicron<- subset(linear_risk_final_omicron, state.x == "idaho" | state.x == "washington" | state.x == "oregon")
risk_final_midsouth_omicron <- subset(linear_risk_final_omicron, state.x == "louisiana" | state.x == "arkansas" | state.x == "texas" | state.x == "new mexico")
risk_final_middlewest_omicron <- subset(linear_risk_final_omicron, state.x == "iowa" | state.x == "missouri" | state.x == "nebraska" | state.x == "kansas")
risk_final_southeast_omicron <- subset(linear_risk_final_omicron, state.x == "florida" | state.x == "georgia" | state.x == "south carolina" | state.x == "north carolina")
risk_final_northeast_omicron <- subset(linear_risk_final_omicron, state.x == "connecticut" | state.x == "maine" | state.x == "massachusetts" | state.x == "new hampshire" | state.x == "rhode island" | state.x == "vermont" | state.x == "new york" | state.x == "new jersey")
risk_final_midnorth_omicron <- subset(linear_risk_final_omicron, state.x == "montana" | state.x == "wyoming" | state.x == "utah" | state.x == "colorado" | state.x == "north dakota" | state.x == "south dakota")
risk_final_mideast_omicron <- subset(linear_risk_final_omicron, state.x == "pennsylania" | state.x == "west virginia" | state.x == "maryland" | state.x == "delaware")
risk_final_west_omicron <- subset(linear_risk_final_omicron, state.x == "california" | state.x == "nevada" | state.x == "arizona")


regionlist1 <- c("linear_risk_final", "risk_final_northeast", "risk_final_mideast", "risk_final_southeast", "risk_final_midwest", "risk_final_midsouth", "risk_final_middlewest", "risk_final_midnorth", "risk_final_west", "risk_final_PNW")
regionlist2 <- c("linear_risk_final_latter", "risk_final_northeast_latter", "risk_final_mideast_latter", "risk_final_southeast_latter", "risk_final_midwest_latter", "risk_final_midsouth_latter", "risk_final_middlewest_latter", "risk_final_midnorth_latter", "risk_final_west_latter", "risk_final_PNW_latter")
regionlist3 <- c("linear_risk_final_delta", "risk_final_northeast_delta", "risk_final_mideast_delta", "risk_final_southeast_delta", "risk_final_midwest_delta", "risk_final_midsouth_delta", "risk_final_middlewest_delta", "risk_final_midnorth_delta", "risk_final_west_delta", "risk_final_PNW_delta")
regionlist4 <- c("linear_risk_final_omicron", "risk_final_northeast_omicron", "risk_final_mideast_omicron", "risk_final_southeast_omicron", "risk_final_midwest_omicron", "risk_final_midsouth_omicron", "risk_final_middlewest_omicron", "risk_final_midnorth_omicron", "risk_final_west_omicron", "risk_final_PNW_omicron")


for (j in regionlist1) {
name <- paste("fit_", j, "_ideology_cases", sep="")
name2 <- paste("fit_", j, "_noideology_cases", sep="")
name3 <- paste("fit_", j, "_ideology_deaths", sep="")
name4 <- paste("fit_", j, "_noideology_deaths", sep="")
name5 <- paste("fit_", j, "_ideology_deaths65", sep="")
name6 <- paste("fit_", j, "_noideology_deaths65", sep="")
assign(name, lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name2, lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name3, lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name4, lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name5, lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name6, lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
}


k <- 0
regionlist1_list_ideology_cases<- NA
regionlist1_list_noideology_cases<- NA
regionlist1_list_ideology_deaths<- NA
regionlist1_list_noideology_deaths<- NA
regionlist1_list_ideology_deaths65<- NA
regionlist1_list_noideology_deaths65<- NA
for (j in regionlist1) {
  k <- k+1
name <- paste("fit_", j, "_ideology_cases", sep="")
name2 <- paste("fit_", j, "_noideology_cases", sep="")
name3 <- paste("fit_", j, "_ideology_deaths", sep="")
name4 <- paste("fit_", j, "_noideology_deaths", sep="")
name5 <- paste("fit_", j, "_ideology_deaths65", sep="")
name6 <- paste("fit_", j, "_noideology_deaths65", sep="")
regionlist1_list_ideology_cases[k] <- name
regionlist1_list_noideology_cases[k] <- name2
regionlist1_list_ideology_deaths[k] <- name3
regionlist1_list_noideology_deaths[k] <- name4
regionlist1_list_ideology_deaths65[k] <- name5
regionlist1_list_noideology_deaths65[k] <- name6
}

list_models_ideology_cases_prevac = lapply(regionlist1_list_ideology_cases, get)
list_models_noideology_cases_prevac = lapply(regionlist1_list_noideology_cases, get)
list_models_ideology_deaths_prevac = lapply(regionlist1_list_ideology_deaths, get)
list_models_noideology_deaths_prevac = lapply(regionlist1_list_noideology_deaths, get)
list_models_ideology_deaths65_prevac = lapply(regionlist1_list_ideology_deaths65, get)
list_models_noideology_deaths65_prevac = lapply(regionlist1_list_noideology_deaths65, get)

for (j in regionlist2) {
name <- paste("fit_", j, "_ideology_cases", sep="")
name2 <- paste("fit_", j, "_noideology_cases", sep="")
name3 <- paste("fit_", j, "_ideology_deaths", sep="")
name4 <- paste("fit_", j, "_noideology_deaths", sep="")
name5 <- paste("fit_", j, "_ideology_deaths65", sep="")
name6 <- paste("fit_", j, "_noideology_deaths65", sep="")
assign(name, lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name2, lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name3, lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name4, lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name5, lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name6, lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
}


k <- 0
regionlist2_list_ideology_cases<- NA
regionlist2_list_noideology_cases<- NA
regionlist2_list_ideology_deaths<- NA
regionlist2_list_noideology_deaths<- NA
regionlist2_list_ideology_deaths65<- NA
regionlist2_list_noideology_deaths65<- NA
for (j in regionlist2) {
  k <- k+1
name <- paste("fit_", j, "_ideology_cases", sep="")
name2 <- paste("fit_", j, "_noideology_cases", sep="")
name3 <- paste("fit_", j, "_ideology_deaths", sep="")
name4 <- paste("fit_", j, "_noideology_deaths", sep="")
name5 <- paste("fit_", j, "_ideology_deaths65", sep="")
name6 <- paste("fit_", j, "_noideology_deaths65", sep="")
regionlist2_list_ideology_cases[k] <- name
regionlist2_list_noideology_cases[k] <- name2
regionlist2_list_ideology_deaths[k] <- name3
regionlist2_list_noideology_deaths[k] <- name4
regionlist2_list_ideology_deaths65[k] <- name5
regionlist2_list_noideology_deaths65[k] <- name6
}

list_models_ideology_cases_postvac = lapply(regionlist2_list_ideology_cases, get)
list_models_noideology_cases_postvac = lapply(regionlist2_list_noideology_cases, get)
list_models_ideology_deaths_postvac = lapply(regionlist2_list_ideology_deaths, get)
list_models_noideology_deaths_postvac = lapply(regionlist2_list_noideology_deaths, get)
list_models_ideology_deaths65_postvac = lapply(regionlist2_list_ideology_deaths65, get)
list_models_noideology_deaths65_postvac = lapply(regionlist2_list_noideology_deaths65, get)

for (j in regionlist3) {
name <- paste("fit_", j, "_ideology_cases", sep="")
name2 <- paste("fit_", j, "_noideology_cases", sep="")
name3 <- paste("fit_", j, "_ideology_deaths", sep="")
name4 <- paste("fit_", j, "_noideology_deaths", sep="")
name5 <- paste("fit_", j, "_ideology_deaths65", sep="")
name6 <- paste("fit_", j, "_noideology_deaths65", sep="")
assign(name, lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name2, lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name3, lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name4, lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name5, lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name6, lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
}


k <- 0
regionlist3_list_ideology_cases<- NA
regionlist3_list_noideology_cases<- NA
regionlist3_list_ideology_deaths<- NA
regionlist3_list_noideology_deaths<- NA
regionlist3_list_ideology_deaths65<- NA
regionlist3_list_noideology_deaths65<- NA
for (j in regionlist3) {
  k <- k+1
name <- paste("fit_", j, "_ideology_cases", sep="")
name2 <- paste("fit_", j, "_noideology_cases", sep="")
name3 <- paste("fit_", j, "_ideology_deaths", sep="")
name4 <- paste("fit_", j, "_noideology_deaths", sep="")
name5 <- paste("fit_", j, "_ideology_deaths65", sep="")
name6 <- paste("fit_", j, "_noideology_deaths65", sep="")
regionlist3_list_ideology_cases[k] <- name
regionlist3_list_noideology_cases[k] <- name2
regionlist3_list_ideology_deaths[k] <- name3
regionlist3_list_noideology_deaths[k] <- name4
regionlist3_list_ideology_deaths65[k] <- name5
regionlist3_list_noideology_deaths65[k] <- name6
}

list_models_ideology_cases_delta = lapply(regionlist3_list_ideology_cases, get)
list_models_noideology_cases_delta = lapply(regionlist3_list_noideology_cases, get)
list_models_ideology_deaths_delta = lapply(regionlist3_list_ideology_deaths, get)
list_models_noideology_deaths_delta = lapply(regionlist3_list_noideology_deaths, get)
list_models_ideology_deaths65_delta = lapply(regionlist3_list_ideology_deaths65, get)
list_models_noideology_deaths65_delta = lapply(regionlist3_list_noideology_deaths65, get)

for (j in regionlist4) {
name <- paste("fit_", j, "_ideology_cases", sep="")
name2 <- paste("fit_", j, "_noideology_cases", sep="")
name3 <- paste("fit_", j, "_ideology_deaths", sep="")
name4 <- paste("fit_", j, "_noideology_deaths", sep="")
name5 <- paste("fit_", j, "_ideology_deaths65", sep="")
name6 <- paste("fit_", j, "_noideology_deaths65", sep="")
assign(name, lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name2, lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name3, lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name4, lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name5, lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
assign(name6, lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y, REML=FALSE, data = eval(parse(text=j))))
}

k <- 0
regionlist4_list_ideology_cases<- NA
regionlist4_list_noideology_cases<- NA
regionlist4_list_ideology_deaths<- NA
regionlist4_list_noideology_deaths<- NA
regionlist4_list_ideology_deaths65<- NA
regionlist4_list_noideology_deaths65<- NA
for (j in regionlist4) {
  k <- k+1
name <- paste("fit_", j, "_ideology_cases", sep="")
name2 <- paste("fit_", j, "_noideology_cases", sep="")
name3 <- paste("fit_", j, "_ideology_deaths", sep="")
name4 <- paste("fit_", j, "_noideology_deaths", sep="")
name5 <- paste("fit_", j, "_ideology_deaths65", sep="")
name6 <- paste("fit_", j, "_noideology_deaths65", sep="")
regionlist4_list_ideology_cases[k] <- name
regionlist4_list_noideology_cases[k] <- name2
regionlist4_list_ideology_deaths[k] <- name3
regionlist4_list_noideology_deaths[k] <- name4
regionlist4_list_ideology_deaths65[k] <- name5
regionlist4_list_noideology_deaths65[k] <- name6
}

list_models_ideology_cases_omicron = lapply(regionlist4_list_ideology_cases, get)
list_models_noideology_cases_omicron = lapply(regionlist4_list_noideology_cases, get)
list_models_ideology_deaths_omicron = lapply(regionlist4_list_ideology_deaths, get)
list_models_noideology_deaths_omicron = lapply(regionlist4_list_noideology_deaths, get)
list_models_ideology_deaths65_omicron = lapply(regionlist4_list_ideology_deaths65, get)
list_models_noideology_deaths65_omicron = lapply(regionlist4_list_noideology_deaths65, get)


#cum case models with ideology

# fit_all <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = linear_risk_final_latter)
# fit1 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_northeast)
# #fit2 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + policy, REML=FALSE, data = risk_final_north)
# fit3 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_mideast)
# fit4 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_southeast)
# fit5 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midwest)
# fit6 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midsouth)
# fit7 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_middlewest)
# fit8 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midnorth)
# fit9 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_west)
# fit10 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_PNW)
# 
# 
# #-cum case models with no voting ideology
# 
# fit_all_noideology <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = linear_risk_final_latter)
# fit1_noideology <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_northeast)
# #fit2 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + policy, REML=FALSE, data = risk_final_north)
# fit3_noideology <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_mideast)
# fit4_noideology <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_southeast)
# fit5_noideology <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence +  Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65,  REML=FALSE, data = risk_final_midwest)
# fit6_noideology <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65,  REML=FALSE, data = risk_final_midsouth)
# fit7_noideology <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_middlewest)
# fit8_noideology <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midnorth)
# fit9_noideology <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_west)
# fit10_noideology <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_PNW)
# 
# #deaths models with ideology
# 
# fit_all_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = linear_risk_final_latter)
# fit1_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_northeast)
# #fit2 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + policy, REML=FALSE, data = risk_final_north)
# fit3_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_mideast)
# fit4_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_southeast)
# fit5_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midwest)
# fit6_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midsouth)
# fit7_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_middlewest)
# fit8_deaths<- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midnorth)
# fit9_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_west)
# fit10_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_PNW)
# 
# 
# #-deaths models with no voting ideology
# 
# fit_all_noideology_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = linear_risk_final_latter)
# fit1_noideology_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_northeast)
# #fit2 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + policy, REML=FALSE, data = risk_final_north)
# fit3_noideology_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_mideast)
# fit4_noideology_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_southeast)
# fit5_noideology_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence +  Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midwest)
# fit6_noideology_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midsouth)
# fit7_noideology_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_middlewest)
# fit8_noideology_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midnorth)
# fit9_noideology_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_west)
# fit10_noideology_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_PNW)
# 
# 
# #deaths models 65+ with ideology
# 
# fit_all_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = linear_risk_final_latter)
# fit1_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_northeast)
# #fit2 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + policy, REML=FALSE, data = risk_final_north)
# fit3_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_mideast)
# fit4_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_southeast)
# fit5_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midwest)
# fit6_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midsouth)
# fit7_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_middlewest)
# fit8_deaths65<- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midnorth)
# fit9_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_west)
# fit10_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_PNW)
# 
# 
# #-deaths models 65+ with no voting ideology
# 
# fit_all_noideology_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = linear_risk_final_latter)
# fit1_noideology_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_northeast)
# #fit2 <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + policy, REML=FALSE, data = risk_final_north)
# fit3_noideology_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_mideast)
# fit4_noideology_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_southeast)
# fit5_noideology_deaths <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence +  Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midwest)
# fit6_noideology_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midsouth)
# fit7_noideology_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_middlewest)
# fit8_noideology_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_midnorth)
# fit9_noideology_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_west)
# fit10_noideology_deaths65 <- lm(deaths_age65_ratio ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence  + Series_Complete_Pop_Pct + density + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65, REML=FALSE, data = risk_final_PNW)
#

#save models - ideology deaths
model_names <- regionlist1_list_ideology_deaths
model_ideology_deaths = lapply(model_names, get)
saveRDS(model_ideology_deaths, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_ideology_deaths.RDS")

model_names <- regionlist2_list_ideology_deaths
model_ideology_deaths_latter = lapply(model_names, get)
saveRDS(model_ideology_deaths_latter, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_ideology_deaths_latter.RDS")

model_names <- regionlist3_list_ideology_deaths
model_ideology_deaths_delta = lapply(model_names, get)
saveRDS(model_ideology_deaths_delta, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_ideology_deaths_delta.RDS")

model_names <- regionlist4_list_ideology_deaths
model_ideology_deaths_omicron = lapply(model_names, get)
saveRDS(model_ideology_deaths_omicron, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_ideology_deaths_omicron.RDS")

#save models - no ideology deaths
model_names <- regionlist1_list_noideology_deaths
model_noideology_deaths = lapply(model_names, get)
saveRDS(model_noideology_deaths, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_noideology_deaths.RDS")

model_names <- regionlist2_list_noideology_deaths
model_noideology_deaths_latter = lapply(model_names, get)
saveRDS(model_noideology_deaths_latter, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_noideology_deaths_latter.RDS")

model_names <- regionlist3_list_noideology_deaths
model_noideology_deaths_delta = lapply(model_names, get)
saveRDS(model_noideology_deaths_delta, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_noideology_deaths_delta.RDS")

model_names <- regionlist4_list_noideology_deaths
model_noideology_deaths_omicron = lapply(model_names, get)
saveRDS(model_noideology_deaths_omicron, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_noideology_deaths_omicron.RDS")

#save models - ideology deaths 65+
model_names <- regionlist1_list_ideology_deaths65
model_ideology_deaths65 = lapply(model_names, get)
saveRDS(model_ideology_deaths65, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_ideology_deaths65.RDS")

model_names <- regionlist2_list_noideology_deaths65
model_ideology_deaths65_latter = lapply(model_names, get)
saveRDS(model_ideology_deaths65_latter, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_ideology_deaths65_latter.RDS")

model_names <- regionlist3_list_noideology_deaths65
model_ideology_deaths65_delta = lapply(model_names, get)
saveRDS(model_ideology_deaths65_delta, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_ideology_deaths65_delta.RDS")

model_names <- regionlist4_list_noideology_deaths65
model_ideology_deaths65_omicron = lapply(model_names, get)
saveRDS(model_ideology_deaths65_omicron, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_ideology_deaths65_omicron.RDS")

#save models - no ideology deaths 65+
model_names <- regionlist1_list_ideology_deaths65
model_noideology_deaths65 = lapply(model_names, get)
saveRDS(model_noideology_deaths65, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_noideology_deaths65.RDS")

model_names <- regionlist2_list_noideology_deaths65
model_noideology_deaths65_latter = lapply(model_names, get)
saveRDS(model_noideology_deaths65_latter, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_noideology_deaths65_latter.RDS")

model_names <- regionlist3_list_noideology_deaths65
model_noideology_deaths65_delta = lapply(model_names, get)
saveRDS(model_noideology_deaths65_delta, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_noideology_deaths65_delta.RDS")

model_names <- regionlist4_list_noideology_deaths65
model_noideology_deaths65_omicron = lapply(model_names, get)
saveRDS(model_noideology_deaths65_omicron, file="/mnt/ceph/erichs/git/IMCI-covid-risk/linear_models/model_noideology_deaths65_omicron.RDS")

# model_names <- c("fit1", "fit3", "fit4", "fit5", "fit6", "fit7", "fit8", "fit9", "fit10")
# list_models = lapply(model_names, get)
# 
# model_names_noideology <- c("fit1_noideology", "fit3_noideology", "fit4_noideology", "fit5_noideology", "fit6_noideology", "fit7_noideology", "fit8_noideology", "fit9_noideology", "fit10_noideology")
# list_models_noideology = lapply(model_names_noideology, get)
# 
# model_names_deaths <- c("fit1_deaths", "fit3_deaths", "fit4_deaths", "fit5_deaths", "fit6_deaths", "fit7_deaths", "fit8_deaths", "fit9_deaths", "fit10_deaths")
# list_models_deaths = lapply(model_names_deaths, get)
# 
# model_names_noideology_deaths <- c("fit1_noideology_deaths", "fit3_noideology_deaths", "fit4_noideology_deaths", "fit5_noideology_deaths", "fit6_noideology_deaths", "fit7_noideology_deaths", "fit8_noideology_deaths", "fit9_noideology_deaths", "fit10_noideology_deaths")
# 
# 
# model_names_deaths65 <- c("fit1_deaths65", "fit3_deaths65", "fit4_deaths65", "fit5_deaths65", "fit6_deaths65", "fit7_deaths65", "fit8_deaths65", "fit9_deaths65", "fit10_deaths65")
# list_models_deaths = lapply(model_names_deaths, get)
# 
# model_names_noideology_deaths65 <- c("fit1_noideology_deaths65", "fit3_noideology_deaths65", "fit4_noideology_deaths65", "fit5_noideology_deaths65", "fit6_noideology_deaths65", "fit7_noideology_deaths65", "fit8_noideology_deaths65", "fit9_noideology_deaths65", "fit10_noideology_deaths65")
# #list_models_noideology_deaths = lapply(model_names_noideology_deaths, get)

```

## Figure S3: Dataset Visualizations

```{r datapanel, echo=FALSE, message=FALSE, warning=FALSE}
# 
# linear_risk_final <- read.csv("./outputs/backups4/linear_risk_final.csv")
# linear_risk_final_latter <- read.csv("./outputs/backups4/linear_risk_final_latter.csv")
# linear_risk_final_delta <- read.csv("./outputs/backups4/linear_risk_final_delta.csv")
# linear_risk_final_omicron <- read.csv("./outputs/backups4/linear_risk_final_omicron.csv")
# 
# linear_risk_final$FIPS <- str_pad(linear_risk_final$FIPS, 5, pad = "0")
# linear_risk_final_latter$FIPS <- str_pad(linear_risk_final_latter$FIPS, 5, pad = "0")
# linear_risk_final_delta$FIPS <- str_pad(linear_risk_final_delta$FIPS, 5, pad = "0")
# linear_risk_final_omicron$FIPS <- str_pad(linear_risk_final_omicron$FIPS, 5, pad = "0")

library(grid)
library(gridExtra)

data_counties <- merge(counties_merged, linear_risk_final, by="FIPS", duplicateGeoms = TRUE)

data_counties$RPL_THEME1[data_counties$NAME == "Rio Arriba"] <- .8424
#data_counties[2694,]<- data_counties[46,]$cuml.cases_adjusted/2
data_counties <- data_counties[order(-data_counties$cuml.cases_adjusted), ]
data_counties@data[1,27] <- .25
data_counties@data[2,27] <- .25
data_counties@data[3,27] <- .25
data_counties@data[4,27] <- .25

data_counties@data$density <- log(data_counties@data$density)
data_counties@data$divergence.x <- log(data_counties@data$divergence.x)

data_counties_deaths_age65_ratio <- data_counties[order(-data_counties$deaths_age65_ratio), ]
data_counties_deaths_age65_ratio@data[1,30] <- .055

#data_counties$density_scaled[data_counties$density_scaled > .3] <- .29 

data_counties <- data_counties[order(-data_counties$FIPS), ]

levels(data_counties$policy) <- c("D", "R", "Split")

data_counties2 <- merge(counties_merged, linear_risk_final_latter, by="FIPS", duplicateGeoms = TRUE)


data_counties2$RPL_THEME1[data_counties2$NAME == "Rio Arriba"] <- .8424
#data_counties[2694,]<- data_counties[46,]$cuml.cases_adjusted/2
data_counties2 <- data_counties2[order(-data_counties2$cuml.cases_adjusted), ]
data_counties2@data[1,27] <- .25
data_counties2@data[2,27] <- .25
data_counties2@data[3,27] <- .25
data_counties2@data[4,27] <- .25

data_counties2@data$density <- log(data_counties2@data$density)
data_counties2@data$divergence.x <- log(data_counties2@data$divergence.x)

data_counties2 <- data_counties2[order(-data_counties2$deaths_adjusted), ]
data_counties2@data[1,26] <- .007
data_counties2@data[2,26] <- .007

data_counties2 <- data_counties2[order(-data_counties2$FIPS), ]

data_counties3 <- merge(counties_merged, linear_risk_final_delta, by="FIPS", duplicateGeoms = TRUE)


data_counties3$RPL_THEME1[data_counties3$NAME == "Rio Arriba"] <- .8424
#data_counties[2694,]<- data_counties[46,]$cuml.cases_adjusted/2
data_counties3 <- data_counties3[order(-data_counties3$cuml.cases_adjusted), ]
data_counties3@data[1,27] <- .25
data_counties3@data[2,27] <- .25
data_counties3@data[3,27] <- .25
data_counties3@data[4,27] <- .25

data_counties3@data$density <- log(data_counties3@data$density)
data_counties3@data$divergence.x <- log(data_counties3@data$divergence.x)






data_counties4 <- merge(counties_merged, linear_risk_final_omicron, by="FIPS", duplicateGeoms = TRUE)


data_counties4$RPL_THEME1[data_counties4$NAME == "Rio Arriba"] <- .8424
#data_counties[2694,]<- data_counties[46,]$cuml.cases_adjusted/2
data_counties4 <- data_counties4[order(-data_counties4$cuml.cases_adjusted), ]
data_counties4@data[1,27] <- .25
data_counties4@data[2,27] <- .25
data_counties4@data[3,27] <- .25
data_counties4@data[4,27] <- .25

data_counties4@data$density <- log(data_counties4@data$density)
data_counties4@data$divergence.x <- log(data_counties4@data$divergence.x)



data_counties_deaths_age65_ratio2 <- data_counties3[order(-data_counties3$deaths_age65_ratio), ]
data_counties_deaths_age65_ratio2@data[1,30] <- .03
data_counties_deaths_age65_ratio2@data[2,30] <- .03


data_counties_deaths_age65_ratio3 <- data_counties4[order(-data_counties4$deaths_age65_ratio), ]
data_counties_deaths_age65_ratio3@data[1,30] <- .03
data_counties_deaths_age65_ratio3@data[2,30] <- .03


#data_counties_deaths_age65_ratio2$deaths_age65_ratio[data_counties_deaths_age65_ratio2$FIPS == "48301"] <- .03
# 
# data_counties@data$divergence.y <- data_counties@data$divergence.y - 1
# data_counties2@data$divergence.y <- data_counties2@data$divergence.y - 1

col.palette.t<-colorRampPalette(c("lightseagreen","lightsteelblue1", "moccasin","hotpink", "red"),space="rgb",interpolate = "linear") 
spState <- list("sp.polygons", states, first=FALSE)


#divergence colors for map

data_counties_divergence <- data_counties[order(data_counties$divergence_scaled),]


data_counties_divergence@data$divergence_scaled[is.na(data_counties_divergence@data$divergence_scaled)] <- 1
rc1 <- colorRampPalette(colors = c("lightseagreen","lightsteelblue1", "white"))(length(data_counties_divergence@data$divergence.y[data_counties_divergence@data$divergence.y < 1]))    
rc2 <- colorRampPalette(colors = c("hotpink", "red", "darkred"))(length(data_counties_divergence@data$divergence.y[data_counties_divergence@data$divergence.y >= 1]))
rampcols <- c(rc1,rc2)

rc1 <- colorRampPalette(colors = c("lightseagreen","lightsteelblue1"))    
rc2 <- colorRampPalette(colors = c("hotpink", "red", "darkred"))
rampcols <- c(rc1(700),rc2(2503))

# 
# data_counties <- data_counties[order(data_counties@data$divergence.y), ]
# data_counties@data <- cbind(data_counties@data, rampcols)



socioeconomic <- spplot(data_counties, zcol="RPL_THEME1", col='transparent', main='Socioeconomic', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"), width = 2, cex = 2)))
household_composition  <- spplot(data_counties, zcol="RPL_THEME2", col='transparent', main='Household Composition', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"), width = 2, cex = 2)))
minority_status <- spplot(data_counties, zcol="RPL_THEME3", col='transparent', main='Minority Status', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"), width = 2, cex = 2)))
housing_type <- spplot(data_counties, zcol="RPL_THEME4", col='transparent', main='Housing Type', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"), width = 2, cex = 2)))
political_divergence <- spplot(data_counties, zcol="adjacent_ideology.x", col='transparent', main='Political Divergence', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8"), width = 2, cex = 2)))
democratic_vote_pct <- spplot(data_counties, zcol="pct.x", col='transparent', main='Democratic Vote Pct', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0", "0.2", "0.4", "0.6", "0.8"), width = 2, cex = 2)))
policy <- spplot(data_counties, zcol="policy", col='transparent', main='Policy', col.regions=col.palette.t(100), sp.layout=spState)
vaccination_rate_prevac <- spplot(data_counties, zcol="Series_Complete_Pop_Pct_scaled", col='transparent', main='Vaccination Rate as of 05.01.02021', col.regions=col.palette.t(100), sp.layout=spState)
vaccination_rate_postvac <- spplot(data_counties2, zcol="Series_Complete_Pop_Pct_scaled", col='transparent', main='Vaccination Rate as of 04.01.2022', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0"), width = 2, cex = 2)))
population_density <- spplot(data_counties, zcol="density", col='transparent', main='Population Density', col.regions=col.palette.t(100), sp.layout=spState, colorkey =  list(labels = list( labels = c("-2", "0", "2", "4", "6", "8", "10"),  width = 2, cex = 2)))
population_age65 <- spplot(data_counties, zcol="age65_ratio", col='transparent', main='Population Over 65', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6"), width = 2, cex = 2)))
population_age65_ratio <- spplot(data_counties_deaths_age65_ratio, zcol="deaths_age65_ratio", col='transparent', main='Deaths per Age65+ - 12.01.2019 - 05.01.2021', col.regions=col.palette.t(100), sp.layout=spState)
population_age65_ratio_delta <- spplot(data_counties_deaths_age65_ratio2, zcol="deaths_age65_ratio", col='transparent', main='Deaths per Age65+ - 05.01.2021 - 12.01.2022', col.regions=col.palette.t(100), sp.layout=spState)
population_age65_ratio_omicron <- spplot(data_counties_deaths_age65_ratio3, zcol="deaths_age65_ratio", col='transparent', main='Deaths per Age65+ - 12.01.2021 - 04.01.2022', col.regions=col.palette.t(100), sp.layout=spState)
#political_divergence <- spplot(data_counties_divergence, zcol="divergence_scaled", col='transparent', main='Political Divergence', col.regions=col.palette.t(100), sp.layout=spState)
obesity <- spplot(data_counties, zcol="Obesity", col='transparent', main='Obesity', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.15", "0.20", "0.25", "0.30", "0.35", "0.40", "0.45", "0.50"), width = 2, cex = 2)))
FEI <- spplot(data_counties, zcol="FEI", col='transparent', main='Food Environmental Index', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.00", "0.02", "0.04", "0.06", "0.08", "0.10"), width = 2, cex = 2)))
# 
# physically_inactive <- spplot(data_counties, zcol="Physically_Inactive", col='transparent', main='Physically Inactive', col.regions=col.palette.t(100), sp.layout=spState)
# 
# access_exercise <- spplot(data_counties, zcol="Exercise_Access", col='transparent', main='Access to Exercise Opportunities', col.regions=col.palette.t(100), sp.layout=spState)

uninsured_adults <- spplot(data_counties, zcol="Uninsured_Adults", col='transparent', main='Uninsured', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.00", "0.05", "0.10", "0.15", "0.20", "0.25", "0.30", "0.35", "0.40"), width = 2, cex = 2)))

smoking <- spplot(data_counties, zcol="Smoking", col='transparent', main='Smoking', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.05", "0.10", "0.15", "0.20", "0.25", "0.30", "0.35", "0.40"), width = 2, cex = 2)))

# excessive_drinking <- spplot(data_counties, zcol="Excessive_Drinking", col='transparent', main='Excessive Drinking', col.regions=col.palette.t(100), sp.layout=spState)

some_college <- spplot(data_counties, zcol="Some_College", col='transparent', main='Some_College', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9"), width = 2, cex = 2)))

unemployed <- spplot(data_counties, zcol="Unemployed", col='transparent', main='Unemployed', col.regions=col.palette.t(100), sp.layout=spState,  at=seq(0, .12, length.out=100),  colorkey = list(labels = list( labels = c("0.00", "0.02", "0.04", "0.06", "0.08", "0.10", "0.12"), width = 2, cex = 2)))

diabetes <- spplot(data_counties, zcol="Diabetes", col='transparent', main='Diabetes', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.05", "0.10", "0.15", "0.20"), width = 2, cex = 2)))

food_insecurity <- spplot(data_counties, zcol="Food_Insecurity", col='transparent', main='Food_Insecurity', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.05", "0.10", "0.15", "0.20", "0.25", "0.30", "0.35"), width = 2, cex = 2)))

associations <- spplot(data_counties, zcol="Associations", col='transparent', main='Associations', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7"), width = 2, cex = 2)))

broadband <- spplot(data_counties, zcol="broadband_access.y", col='transparent', main='Broadband Access', col.regions=col.palette.t(100), sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7"), width = 2, cex = 2)))

# cumulative_cases_adjusted <- spplot(data_counties, zcol="cuml.cases_adjusted", col='transparent', main='Cumulative Cases Adjusted - 12.01.2019 - 05.01.2021', col.regions=col.palette.t(100), at=seq(0, .35, length.out=100),  sp.layout=spState)
# cumulative_cases_adjusted_omicron <- spplot(data_counties2, zcol="cuml.cases_adjusted", col='transparent', main='Cumulative Cases Adjusted - 05.01.2021 - 04.01.2022', col.regions=col.palette.t(100), at=seq(0, .35, length.out=100), sp.layout=spState)
cumulative_deaths_adjusted <- spplot(data_counties, zcol="deaths_adjusted", col='transparent', main='Cumulative Deaths Adjusted - 12.01.2019 - 05.01.2021', col.regions=col.palette.t(100), at=seq(0, .008, length.out=100),  sp.layout=spState,  colorkey = list(labels = list( labels = c("0.000", "0.001", "0.002", "0.003", "0.004", "0.005", "0.006", "0.007", "0.008"), width = 2, cex = 2)))
cumulative_deaths_adjusted_delta <- spplot(data_counties3, zcol="deaths_adjusted", col='transparent', main='Cumulative Deaths Adjusted - 05.01.2021 - 12.01.2022', col.regions=col.palette.t(100), at=seq(0, .004, length.out=100),  sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0000", "0.0005", "0.00010", "0.0015", "0.0020", "0.0025", "0.0030", "0.0035", "0.0040"), width = 2, cex = 2)))
cumulative_deaths_adjusted_omicron <- spplot(data_counties4, zcol="deaths_adjusted", col='transparent', main='Cumulative Deaths Adjusted - 12.01.2021 - 04.01.2022', col.regions=col.palette.t(100), at=seq(0, .004, length.out=100),  sp.layout=spState,  colorkey = list(labels = list( labels = c("0.0000", "0.0005", "0.00010", "0.0015", "0.0020", "0.0025", "0.0030", "0.0035", "0.0040"), width = 2, cex = 2)))

#commented out put below

# plotrf <- grid.arrange(socioeconomic, minority_status,household_composition,housing_type, nrow = 2, ncol=2, heights = c(1000,1000),  top = textGrob("Predictor Variable Dataset Visualizations",gp=gpar(fontsize=25)))
# 
# cat("\n\\newpage\n")
# 
# plotrf <- grid.arrange(political_divergence, democratic_vote_pct,vaccination_rate_postvac,population_density, nrow = 2, ncol=2, heights = c(1000,1000))
# 
# plotrf <- grid.arrange(obesity, unemployed,uninsured_adults,associations, nrow = 2, ncol=2, heights = c(1000,1000))
# 
#   cat("\n\\newpage\n")
# 
# 
# plotrf <- grid.arrange(diabetes,food_insecurity, broadband,population_age65, nrow = 2, ncol=2, heights = c(1000,1000))

#----

#print(socioeconomic)
#print(minority_status)
#print(household_composition)
#print(housing_type)
#print(political_divergence)
#print(democratic_vote_pct)
##print(policy)
#print(vaccination_rate_prevac)
#print(vaccination_rate_postvac)
#print(population_density)
#print(obesity)

##print(FEI)
##print(excessive_drinking)
##print(smoking)
##print(some_college)
#print(unemployed)
#print(uninsured_adults)
#print(associations)
#print(diabetes)
#print(food_insecurity)
#print(broadband)
#print(population_age65)
# 
# datamaps <- grid.arrange(socioeconomic, household_composition, minority_status, housing_type, political_divergence, democratic_vote_pct, vaccination_rate, population_density, population_age65_ratio, obesity, FEI,  excessive_drinking, uninsured_adults, some_college, unemployed, diabetes, food_insecurity, associations, ncol= 1)
# datamaps2 <- grid.arrange(cumulative_cases_adjusted, cumulative_deaths_adjusted, population_age65_ratio, ncol = 1)
# 

#commented out put below

# plotrf <- grid.arrange(cumulative_deaths_adjusted,cumulative_deaths_adjusted_delta, cumulative_deaths_adjusted_omicron, nrow = 2, ncol=2, heights = c(1000,1000),  top = textGrob("Response Variable Dataset Visualizations",gp=gpar(fontsize=25)))

#---

# print(cumulative_cases_adjusted)
# print(cumulative_cases_adjusted_omicron)
# print(cumulative_deaths_adjusted)
# print(cumulative_deaths_adjusted_delta)
# print(cumulative_deaths_adjusted_omicron)
#print(population_age65_ratio)
#print(population_age65_ratio_delta)
#print(population_age65_ratio_omicron)


# datamaps
# datamaps2

# grid.arrange(grobs = replicate(10, ggplot(), simplify = FALSE), 
#              layout_matrix = rbind(c(1,2), c(3,4), c(5,6), c(7,8), c(9,10)), heights = c(5,5,5,5,5))
```


```{r datapanel2, echo=FALSE, message=FALSE, warning=FALSE}

plotrf <- grid.arrange(socioeconomic, minority_status,household_composition,housing_type, nrow = 2, ncol=2, heights = c(1000,1000),  top = textGrob("Predictor Variable Dataset Visualizations",gp=gpar(fontsize=25)))

```


```{r datapanel3, echo=FALSE, message=FALSE, warning=FALSE}

plotrf <- grid.arrange(political_divergence, democratic_vote_pct,vaccination_rate_postvac,population_density, nrow = 2, ncol=2, heights = c(1000,1000))
```

```{r datapanel4, echo=FALSE, message=FALSE, warning=FALSE}

plotrf <- grid.arrange(obesity, unemployed,uninsured_adults,associations, nrow = 2, ncol=2, heights = c(1000,1000))


plotrf <- grid.arrange(diabetes,food_insecurity, broadband,population_age65, nrow = 2, ncol=2, heights = c(1000,1000))

```

\newpage

```{r datapanel5, echo=FALSE, message=FALSE, warning=FALSE}

plotrf <- grid.arrange(cumulative_deaths_adjusted,cumulative_deaths_adjusted_delta, cumulative_deaths_adjusted_omicron, nrow = 2, ncol=2, heights = c(1000,1000),  top = textGrob("Response Variable Dataset Visualizations",gp=gpar(fontsize=25)))

```

\newpage

## Figure S4: Correlation HeatMap

```{r, echo=FALSE, message=FALSE, warning=FALSE}

library(reshape2)
 
# creating correlation matrix
risk_final_ind <- linear_risk_final
risk_final_ind <- na.omit(risk_final_ind)

risk_final_ind$policy <- as.numeric(risk_final_ind$policy)
risk_final_ind <- risk_final_ind[c(6:9, 21,11,20,12,26,29,33,37,40,41,16,19)]
colnames(risk_final_ind) <- c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults", "Unemployed", "Associations", "Diabetes", "Food Insecurity", "Age over 65","Broadband Access")
# 
# RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + pct.x + Series_Complete_Pop_Pct_scaled + density + Obesity + Excessive_Drinking + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + broadband_access.y,

corr_mat <- round(cor(risk_final_ind),2)
 
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)

# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2,
                                   fill=value)) +
geom_tile(color = "white",
            lwd = 1.5,
            linetype = 1) +
geom_text(aes(Var2, Var1, label = value),
          color = "black", size = 4) +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000") +
  theme(axis.text.x = element_text(angle = 90, size=20, family="serif"))  + theme(text = element_text(size = 20, family="serif")) + labs(x = "Predictors", y = "Predictors")




```

\newpage

# Part 3: Data Analysis and Regression: United States

```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#All states 
risk <- subset(risk, county != "dona ana")
pa <- ggplot(risk, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
scale_colour_brewer(palette = "RdBu") + ggtitle("United States: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density") + theme(text = element_text(size = 20, family="serif"))

risk_noloving <- subset(risk, FIPS != "48301") 

pb <- ggplot(risk_noloving, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") + ggtitle("United States: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```

## Figure S5: Fatality Rate vs. Population Density

```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pa

```

## Figure S6: County Level Cumulative Cases vs. Cumulative Deaths

```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pb

```


```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata1 <- subset(fulldata, vote_discrete == c("Very Conservative", "Moderately Conservative"))

p2 <- ggplot(fulldata1, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("pink", "darkred")) + xlim(0,.4) + ylim(0,.01) + ggtitle("United States: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata2 <- subset(fulldata, vote_discrete == c("Very Liberal", "Moderately Liberal"))

p3 <- ggplot(fulldata2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("lightblue", "darkblue")) + xlim(0,.4) + ylim(0,.01)+ ggtitle("United States: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```


```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p2

```


```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p3

```


```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#gridExtra::grid.arrange(p2,p3, ncol=2)

#animation test
# 
# p <- ggplot(fulldata, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, frame = date)) + geom_point() + theme_minimal() +
#   scale_colour_brewer(palette = "RdBu") 
# p + transition_states(date,
#                     transition_length = 2,
#                     state_length = 1)

fulldata_agg <- fulldata_revised
fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
#levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
#fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)


fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)


p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("United States", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" )) + theme(text = element_text(size = 20, family="serif"))

fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("United States", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

```


```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p5

```

## Figure S7: Population Adjusted Deaths vs Ideology over time

```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6a

```


```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_agg2 <- fulldata_agg
fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0

fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0))  + ggtitle("United States", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))


fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)

p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90)) +
    scale_x_date(date_breaks = "1 month", expand = c(0,0))  + ggtitle("United States", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))

```

```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p7

```

## Figure S8: Population Adjusted Cumulative Deaths vs Ideology over time

```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6

```




```{r echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
withmodel <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + policy, REML=FALSE, data = linear_risk_final)
#LM without the voting percentage to compare fit
withoutmodel <- lm(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + Series_Complete_Pop_Pct + density + policy, REML=FALSE, data = linear_risk_final)


#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
withmodel_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + policy, REML=FALSE, data = linear_risk_final)
#LM without the voting percentage to compare fit
withoutmodel_deaths <- lm(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + Series_Complete_Pop_Pct + density + policy, REML=FALSE, data = linear_risk_final)



```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput <- sjPlot::tab_model(fit_all, fit_all_noideology, fit_all_deaths, fit_all_noideology_deaths, fit_all_deaths65, fit_all_noideology_deaths65, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID", "Deaths 65+ w/ ID", "Deaths 65+ w/o ID"), show.ci = FALSE)
# modeloutput
```

## Table S2: United States: Regression Model Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[1])), eval(parse(text=regionlist3_list_ideology_deaths[1])),  eval(parse(text=regionlist4_list_ideology_deaths[1])), dv.labels = c("Alpha Wave Deaths", "Delta Wave Deaths", "Omicron Wave Deaths"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_US.html")

#modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_US.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_US.png")

```

<!-- <center> -->

<!-- ![Figure 1. Linear Models: United States](../png/modeloutput_US.png){#id .class width=200% height=200%}   -->

<!-- </center> -->

## Figure S9: United States Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist1_list_ideology_deaths[1])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "United States Alpha Wave Standardized Coefficients Plot", value.size = 5) + font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[10])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

## Figure S10: United States Delta Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist3_list_ideology_deaths[1])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "United States Delta Wave Standardized Coefficients Plot", value.size = 5) + font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[10])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

## Figure S11: United States Omicron Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist4_list_ideology_deaths[1])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "United States Omicron Wave Standardized Coefficients Plot", value.size = 5) + font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[10])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist2_list_ideology_deaths[1])), eval(parse(text=regionlist2_list_ideology_deaths65[1])),  dv.labels = c("Post-Vaccination Deaths", "Post-Vaccination Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[1])),  eval(parse(text=regionlist3_list_ideology_deaths65[1])),  dv.labels = c("Delta Wave Deaths", "Delta Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[1])),  eval(parse(text=regionlist4_list_ideology_deaths65[1])), dv.labels = c("Omicron Wave Deaths",  "Omicron Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```


\newpage

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
# 
# dyn.load("/opt/modules/climatology/gdal/3.1.4/lib/libgdal.so")
# library(rgdal)
# library(rgeos)
# library(maptools)
# library(spdep)
# library(sp)
# library(terra)
# library(spData)
# library(spgwr)
# 
# 
# 
#   counties <- readShapePoly('/mnt/ceph/erichs/owncloud/Idaho-COVID/US_spatial/counties_conus/UScounties_conus.shp',
#                             proj4string=CRS
#                             ("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#   projection = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
#   
#   # counties  <- subset(counties, STATE_NAME == "Idaho" | STATE_NAME == "Washington" |  STATE_NAME == "Oregon" )
#   
#   new_voting_removed_na <- new_voting[!(is.na(new_voting$pct)), ]
# 
#   counties_merged <- merge(counties, new_voting, by="FIPS", duplicateGeoms = TRUE)
#   
#   #fixing NA values due to spatial data frame having empty counties due to lack of voting data.  Minimal counties (< 20)
#   naIndex <- which(is.na(counties_merged$pct))
#   counties_merged[naIndex, "pct"] <- 0
#   
#   #counties@data <- counties@data[-c(36,690,710,882),]
#   
# sf::sf_use_s2(FALSE)
# nb <- poly2nb(counties_merged, queen = TRUE)
# 
# #getting the spatial nearest neighbor
# lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# 
# Inc.lag <- lag.listw(lw, counties_merged$pct)
# divergence <- counties_merged$pct/Inc.lag
# divergence[which(!is.finite(divergence))] <- 0
# 
# counties_merged <- cbind(counties_merged, Inc.lag, divergence)
# 
# colnames(counties_merged@data)[13] <- c("adjacent_ideology")
# colnames(counties_merged@data)[14] <- c("divergence")
# 
# #spatial dependence/associations
# # 
# # plot(counties_merged$pct, Inc.lag)
# # abline(lm(Inc.lag ~ counties_merged$pct), lwd = 2, col = "red")
# 
# #moran.plot(counties_merged$pct, lw, labels=as.character(counties_merged$county))
# 
# moran.test(counties_merged$pct, lw, zero.policy = TRUE)
# 
# 
# #bw = gwr.sel(pct ~  + count, data = counties_merged)
# 
# # 
# # mat <- nb2mat(nb, style="B", zero.policy = TRUE)
# # 
# # colnames(mat) <- rownames(mat)
# # mat
# 
# 
# rc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(divergence[divergence < 1]))    
# rc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(divergence[divergence >= 1]))
# rampcols <- c(rc1,rc2)
# 
# pctrc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(counties_merged$pct[counties_merged$pct < .5]))    
# pctrc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(counties_merged$pct[counties_merged$pct >= .5]))
# pctrampcols <- c(pctrc1,pctrc2)
# 
# counties_merged <- counties_merged[order(counties_merged$pct), ]
# counties_merged@data <- cbind(counties_merged@data, pctrampcols)
# 
# par(mfrow=c(1, 2))
# #plots scatterplot of counties vs. pct, ordered
# plot(counties_merged@data$pct, col = pctrampcols)
# #plots scatterplot of counties vs. divergence, ordered
# counties_merged <- counties_merged[order(counties_merged$divergence), ]
# counties_merged@data <- cbind(counties_merged@data, rampcols)
# plot(counties_merged@data$divergence, col = rampcols)
# #maps
# par(mfrow=c(1, 2))
# plot(counties_merged, col=pctrampcols, border = "darkgray")
# lines(states, add=TRUE)
# plot(counties_merged, col = rampcols, cuts = 30, border = "darkgray")
# lines(states, add=TRUE)
# 

#


```


\newpage

# Part 3: Data Analysis and Regression: Regions 1 and 2 (Northeast)

<!-- Here we examine the Northeast (Connecticut, Maine, Massachusetts, New Hampshire, Rhode Island, Vermont, New York and New Jersey), at a county level.   -->

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

options(scipen = 999) 

data_northeast <- subset(risk, state == "connecticut" | state == "maine" | state == "massachusetts" | state == "new hampshire" | state == "rhode island" | state == "vermont")

#data_northeast[52,25] <- "Very Conservative"


pa <- ggplot(data_northeast, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
scale_colour_brewer(palette = "RdBu", drop=F) + ggtitle("Northeast: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density")+ theme(text = element_text(size = 20, family="serif"))

pb <- ggplot(data_northeast, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu", drop=F) + ggtitle("Northeast: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```

## Figure S12: Fatality Rate vs. Population Density

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pa

```

## Figure S13: County Level Cumulative Cases vs. Cumulative Deaths

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pb

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_northeast <- subset(fulldata_revised, state == "connecticut" | state == "maine" | state == "massachusetts" | state == "new hampshire" | state == "rhode island" | state == "vermont")

p <- ggplot(fulldata_northeast, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") 


fulldata_northeast2 <- subset(fulldata_northeast, vote_discrete == c("Very Conservative", "Moderately Conservative"))

p2 <- ggplot(fulldata_northeast2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("pink", "darkred")) + ylim(0,.008) + xlim(0, .22) + ggtitle("Northeast: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata_northeast3 <- subset(fulldata_northeast, vote_discrete == c("Very Liberal", "Moderately Liberal"))

p3 <- ggplot(fulldata_northeast3, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() + scale_colour_discrete(type = c("lightblue", "darkblue")) + ylim(0,.008) + xlim(0, .22)+ ggtitle("Northeast: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p2

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p3

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


fulldata_agg <- fulldata_northeast
fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
#levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
#fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)


fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)


p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("North East", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("North East", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


#p5

```

## Figure S14: Population Adjusted Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6a

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_agg2 <- fulldata_agg
fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0

fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("North East", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))


fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)

p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90)) +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("North East", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p7

```

## Figure S15: Population Adjusted Cumulative Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6
#gridExtra::grid.arrange(p7,p6, ncol=2)

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_northeast)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4, data = data_northeast)
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_northeast)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_northeast)

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput <- sjPlot::tab_model(fit1, fit1_noideology, fit1_deaths, fit1_noideology_deaths, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID"), show.ci = FALSE)
# modeloutput
```

## Table S3: Region 1 & 2: Regression Model Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[2])), eval(parse(text=regionlist3_list_ideology_deaths[2])),  eval(parse(text=regionlist4_list_ideology_deaths[2])), dv.labels = c("Alpha Wave Deaths", "Delta Wave Deaths", "Omicron Wave Deaths"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_NE.html")

# modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_NE.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_NE.png" )
```


<!-- <center> -->

<!-- ![Table 7. Linear Models: Northeast](../png/modeloutput_NE.png){#id .class width=200% height=200%}   -->

<!-- </center> -->

## Figure S16: Region 1 & 2 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}

set_theme(base = theme_classic(), theme.font = 'serif')
plot_model(eval(parse(text=regionlist1_list_ideology_deaths[2])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 1 and 2 Alpha Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[2])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist2_list_ideology_deaths[2])),  eval(parse(text=regionlist2_list_ideology_deaths65[2])),  dv.labels = c("Post-Vaccination Deaths", "Post-Vaccination Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# plot_model(eval(parse(text=regionlist2_list_ideology_deaths[2])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths65[2])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[2])),  eval(parse(text=regionlist3_list_ideology_deaths65[2])),  dv.labels = c("Delta Wave Deaths",  "Delta Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S17: Region 1 & 2 Delta Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist3_list_ideology_deaths[2])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 1 and 2 Delta Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist3_list_ideology_deaths65[2])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[2])), eval(parse(text=regionlist4_list_ideology_deaths65[2])),  dv.labels = c("Omicron Wave Deaths",  "Omicron Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S18: Region 1 & 2 Omicron Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist4_list_ideology_deaths[2])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 1 and 2 Omega Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist4_list_ideology_deaths65[2])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

\newpage 


# Part 3: Data Analysis and Regression: Region 3 (Mideast)

<!-- Here we examine the Mideast (Pennsylvania, West Virginia, Maryland, Delaware and the District of Columbia), at a county level. -->

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

options(scipen = 999) 

data_mideast <- subset(risk, state == "pennsylvania" | state == "west virginia" | state == "maryland" | state == "delaware")

#data_northeast[52,25] <- "Very Conservative"


pa <- ggplot(data_mideast, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
scale_colour_brewer(palette = "RdBu", drop=F)+ ggtitle("Mideast: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density")+ theme(text = element_text(size = 20, family="serif"))
pb <- ggplot(data_mideast, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu", drop=F) + ggtitle("Mideast: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```

## Figure S19: Fatality Rate vs. Population Density

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pa

```

## Figure S20: County Level Cumulative Cases vs. Cumulative Deaths

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pb

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


fulldata_mideast <- subset(fulldata_revised, state == "pennsylvania" | state == "west virginia" | state == "maryland" | state == "delaware")

p <- ggplot(fulldata_mideast, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") 


fulldata_mideast2 <- subset(fulldata_mideast, vote_discrete == c("Very Conservative", "Moderately Conservative"))

p2 <- ggplot(fulldata_mideast2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("pink", "darkred")) + ylim(0,.004) + xlim(0, .22)+ ggtitle("Mideast: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata_mideast3 <- subset(fulldata_mideast, vote_discrete == c("Very Liberal", "Moderately Liberal"))

p3 <- ggplot(fulldata_mideast3, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() + scale_colour_discrete(type = c("lightblue", "darkblue")) + ylim(0,.004) + xlim(0, .22)+ ggtitle("Mideast: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p2

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p3

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#gridExtra::grid.arrange(p2,p3, ncol=2)


fulldata_agg <- fulldata_mideast
fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
#levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
#fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)


fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)


p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid East", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid East", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p5

```

## Figure S21: Population Adjusted Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6a

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


fulldata_agg2 <- fulldata_agg
fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0

fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid East", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))


fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)

p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90)) +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid East", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p7

```

## Figure S22: Population Adjusted Cumulative Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# 
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_mideast)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4, data = data_mideast)
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_mideast)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_mideast)

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput <- sjPlot::tab_model(fit3, fit3_noideology, fit3_deaths, fit3_noideology_deaths, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID"), show.ci = FALSE)
# modeloutput
```

## Table S4: Region 3: Regression Model Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[3])), eval(parse(text=regionlist3_list_ideology_deaths[3])),  eval(parse(text=regionlist4_list_ideology_deaths[3])), dv.labels = c("Alpha Wave Deaths", "Delta Wave Deaths", "Omicron Wave Deaths"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_ME.html")

# modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_ME.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_ME.png" )
```


<!-- <center> -->

<!-- ![Table 9. Linear Models: Mideast](../png/modeloutput_ME.png){#id .class width=200% height=200%}   -->

<!-- </center> -->

## Figure S23: Region 3 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist1_list_ideology_deaths[3])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 3 Alpha Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[3])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist2_list_ideology_deaths[3])),  eval(parse(text=regionlist2_list_ideology_deaths65[3])),  dv.labels = c("Post-Vaccination Deaths",  "Post-Vaccination Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths[3])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths65[3])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[3])),  eval(parse(text=regionlist3_list_ideology_deaths65[3])), dv.labels = c("Delta Wave Deaths", "Delta Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S24: Region 3 Delta Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist3_list_ideology_deaths[3])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 3 Delta Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist3_list_ideology_deaths65[3])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[3])),  eval(parse(text=regionlist4_list_ideology_deaths65[3])),  dv.labels = c("Omicron Wave Deaths",  "Omicron Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```


## Figure S25: Region 3 Omicron Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist4_list_ideology_deaths[3])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 3 Omicron Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist4_list_ideology_deaths65[3])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

\newpage


# Part 3: Data Analysis and Regression: Region 4 (Southeast)

<!-- Here we examine the Southeast (Florida, Georgia, South Carolina, and North Carolina, Alabama, Mississippi, Tennessee, and Kentucky), at a county level.   -->

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

options(scipen = 999) 

data_southeast <- subset(risk, state == "florida" | state == "georgia" | state == "south carolina" | state == "north carolina")


pa <- ggplot(data_southeast, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
scale_colour_brewer(palette = "RdBu") + ggtitle("Southeast: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density")+ theme(text = element_text(size = 20, family="serif"))
pb <- ggplot(data_southeast, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") + ggtitle("Southeast: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```


## Figure S26: Fatality Rate vs. Population Density

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pa

```

## Figure S27: County Level Cumulative Cases vs. Cumulative Deaths

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pb

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


fulldata_southeast <- subset(fulldata_revised, state == "florida" | state == "georgia" | state == "south carolina" | state == "north carolina")

p <- ggplot(fulldata_southeast, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") 


fulldata_southeast2 <- subset(fulldata_southeast, vote_discrete == c("Very Conservative", "Moderately Conservative"))

p2 <- ggplot(fulldata_southeast2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("pink", "darkred")) + ylim(0,.008) + xlim(0, .22) + ggtitle("Southeast: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata_southeast3 <- subset(fulldata_southeast, vote_discrete == c("Very Liberal", "Moderately Liberal"))

p3 <- ggplot(fulldata_southeast3, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() + scale_colour_discrete(type = c("lightblue", "darkblue")) + ylim(0,.008) + xlim(0, .22)+ ggtitle("Southeast: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p2

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p3

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_agg <- fulldata_southeast
fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
#levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
#fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)


fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)


p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("South East", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("South East", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p5

```

## Figure S28: Population Adjusted Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6a

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


fulldata_agg2 <- fulldata_agg
fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0

fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("South East", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))


fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)

p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90)) +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("South East", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p7

```

## Figure S29: Population Adjusted Cumulative Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# 
# 
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_southeast)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4, data = data_southeast)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_southeast)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_southeast)

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput <- sjPlot::tab_model(fit4, fit4_noideology, fit4_deaths, fit4_noideology_deaths, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID"), show.ci = FALSE)
# modeloutput
```

## Table S5: Region 4: Regression Model Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[4])), eval(parse(text=regionlist3_list_ideology_deaths[4])),  eval(parse(text=regionlist4_list_ideology_deaths[4])), dv.labels = c("Alpha Wave Deaths", "Delta Wave Deaths", "Omicron Wave Deaths"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_SE.html")

# modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_SE.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_SE.png" )
```


<!-- <center> -->

<!-- ![Table 6. Linear Models: Southeast](../png/modeloutput_SE.png){#id .class width=200% height=200%}   -->

<!-- </center> -->

## Figure S30: Region 4 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist1_list_ideology_deaths[4])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 4 Alpha Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[4])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist2_list_ideology_deaths[4])),  eval(parse(text=regionlist2_list_ideology_deaths65[4])),  dv.labels = c("Post-Vaccination Deaths",  "Post-Vaccination Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# plot_model(eval(parse(text=regionlist2_list_ideology_deaths[4])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths65[4])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[4])),  eval(parse(text=regionlist3_list_ideology_deaths65[4])), dv.labels = c("Delta Wave Deaths", "Delta Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S31: Region 4 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist3_list_ideology_deaths[4])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 4 Delta Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist3_list_ideology_deaths65[4])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[4])),  eval(parse(text=regionlist4_list_ideology_deaths65[4])),  dv.labels = c("Omicron Wave Deaths","Omicron Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S32: Region 4 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist4_list_ideology_deaths[4])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 4 Omicron Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist4_list_ideology_deaths65[4])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

\newpage



# Part 3: Data Analysis and Regression: Region 5 (Midwest)

<!-- Here we examine the Midwest (Ohio, Indiana, Illinois, Michigan, Wisconsin, and Minnesota), at a county level.  -->

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

data_midwest <- subset(risk, state == "ohio" | state == "indiana" | state == "illinois" | state == "michigan" | state == "wisconsin" | state == "minnesota")



pa <- ggplot(data_midwest, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
scale_colour_brewer(palette = "RdBu")+ ggtitle("Midwest: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density")+ theme(text = element_text(size = 20, family="serif"))
pb <- ggplot(data_midwest, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") + ggtitle("Midwest: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```

## Figure S33: Fatality Rate vs. Population Density

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pa

```

## Figure S34: County Level Cumulative Cases vs. Cumulative Deaths

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pb

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_midwest <- subset(fulldata_revised, state == "ohio" | state == "indiana" | state == "illinois" | state == "michigan" | state == "wisconsin" | state == "minnesota")

p <- ggplot(fulldata_midwest, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") 


fulldata_midwest2 <- subset(fulldata_midwest, vote_discrete == c("Very Conservative", "Moderately Conservative"))

p2 <- ggplot(fulldata_midwest2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("pink", "darkred")) + ylim(0,.006) + xlim(0, .2) + ggtitle("Midwest: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata_midwest3 <- subset(fulldata_midwest, vote_discrete == c("Very Liberal", "Moderately Liberal"))

p3 <- ggplot(fulldata_midwest3, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() + scale_colour_discrete(type = c("lightblue", "darkblue")) + ylim(0,.006) + xlim(0, .2)+ ggtitle("Midwest: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p2

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p3

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_agg <- fulldata_midwest
fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
#levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
#fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)


fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)


p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Midwest", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Midwest", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

#gridExtra::grid.arrange(p5,p6a, ncol=2)

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p5

```

## Figure S35: Population Adjusted Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6a

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_agg2 <- fulldata_agg
fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0

fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Midwest", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))


fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)

p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90)) +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Midwest", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p7

```

## Figure S36: Population Adjusted Cumulative Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#gridExtra::grid.arrange(p7,p6, ncol=2)





#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# 
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + pct, data = data_midwest)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4, data = data_midwest)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_midwest)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_midwest)

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput <- sjPlot::tab_model(fit5, fit5_noideology, fit5_deaths, fit5_noideology_deaths, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID"), show.ci = FALSE)
# modeloutput
```

## Table S6: Region 5: Regression Model Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[5])), eval(parse(text=regionlist3_list_ideology_deaths[5])),  eval(parse(text=regionlist4_list_ideology_deaths[5])), dv.labels = c("Alpha Wave Deaths", "Delta Wave Deaths", "Omicron Wave Deaths"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_MW.html")

#modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_MW.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_MW.png" )
```


<!-- <center> -->

<!-- ![Table 3. Linear Models: United States](../png/modeloutput_MW.png){#id .class width=200% height=200%}   -->

<!-- </center> -->

## Figure S37: Region 5 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist1_list_ideology_deaths[5])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 5 Alpha Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
#plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[5])), type = "std2", show.values = "TRUE")
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist2_list_ideology_deaths[5])),  eval(parse(text=regionlist2_list_ideology_deaths65[5])),  dv.labels = c("Post-Vaccination Deaths",  "Post-Vaccination Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths[5])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths65[5])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[5])),  eval(parse(text=regionlist3_list_ideology_deaths65[5])),  dv.labels = c("Delta Wave Deaths", "Delta Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S38: Region 5 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist3_list_ideology_deaths[5])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 5 Delta Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist3_list_ideology_deaths65[5])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[5])),  eval(parse(text=regionlist4_list_ideology_deaths65[5])),  dv.labels = c("Omicron Wave Deaths", "Omicron Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S39: Region 5 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist4_list_ideology_deaths[5])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 5 Omicron Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist4_list_ideology_deaths65[5])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

\newpage

# Part 3: Data Analysis and Regression: Region 6 (MidSouth)

<!-- Here we examine the Mid South (Texas, Louisiana, Arkansas, and New Mexico, Oklahoma), at a county level. -->

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

data_midsouth <- subset(risk, state == "texas" | state == "louisiana" | state == "arkansas" | state == "new mexico")

data_midsouth <- subset(data_midsouth, county != "dona ana")
pa <- ggplot(data_midsouth, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
scale_colour_brewer(palette = "RdBu")+ ggtitle("MidSouth: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density")+ theme(text = element_text(size = 20, family="serif"))
pb <- ggplot(data_midsouth, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") + ggtitle("Midsouth: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```

## Figure S40: Fatality Rate vs. Population Density

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pa

```

## Figure S41: County Level Cumulative Cases vs. Cumulative Deaths

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pb

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_midsouth <- subset(fulldata_revised, state == "texas" | state == "louisiana" | state == "arkansas" | state == "new mexico")

p <- ggplot(fulldata_midsouth, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") 


fulldata_midsouth2 <- subset(fulldata_midsouth, vote_discrete == c("Very Conservative", "Moderately Conservative"))

p2 <- ggplot(fulldata_midsouth2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("pink", "darkred")) + ylim(0,.0075) + xlim(0, .22)+ ggtitle("Midsouth: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata_midsouth3 <- subset(fulldata_midsouth, vote_discrete == c("Very Liberal", "Moderately Liberal"))

p3 <- ggplot(fulldata_midsouth3, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() + scale_colour_discrete(type = c("lightblue", "darkblue")) + ylim(0,.0075) + xlim(0, .22)+ ggtitle("Midsouth: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p2

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p3

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_agg <- fulldata_midsouth
fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
#levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
#fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)


fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)


p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid South", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid South", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p5

```

## Figure S42: Population Adjusted Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6a

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


fulldata_agg2 <- fulldata_agg
fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0

fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid South", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))


fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)

p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90)) +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid South", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p7

```

## Figure S43: Population Adjusted Cumulative Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# 
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_midsouth)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4, data = data_midsouth)
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_midsouth)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_midsouth)


```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput <- sjPlot::tab_model(fit6, fit6_noideology, fit6_deaths, fit6_noideology_deaths, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID"), show.ci = FALSE)
# modeloutput
```

## Table S7: Region 6: Regression Model Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[6])), eval(parse(text=regionlist3_list_ideology_deaths[6])),  eval(parse(text=regionlist4_list_ideology_deaths[6])), dv.labels = c("Alpha Wave Deaths", "Delta Wave Deaths", "Omicron Wave Deaths"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_MS.html")

# modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_MS.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_MS.png" )
```


<!-- <center> -->

<!-- ![Figure 5. Linear Models: MidSouth](../png/modeloutput_MS.png){#id .class width=200% height=200%}   -->

<!-- </center> -->


## Figure S44: Region 6 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist1_list_ideology_deaths[6])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 6 Alpha Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[6])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist2_list_ideology_deaths[6])),  eval(parse(text=regionlist2_list_ideology_deaths65[6])),  dv.labels = c("Post-Vaccination Deaths",  "Post-Vaccination Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# plot_model(eval(parse(text=regionlist2_list_ideology_deaths[6])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths65[6])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[6])),  eval(parse(text=regionlist3_list_ideology_deaths65[6])), dv.labels = c("Delta Wave Deaths",  "Delta Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S45: Region 6 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist3_list_ideology_deaths[6])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 6 Delta Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist3_list_ideology_deaths65[6])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[6])),  eval(parse(text=regionlist4_list_ideology_deaths65[6])),  dv.labels = c("Omicron Wave Deaths",  "Omicron Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S46: Region 6 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist4_list_ideology_deaths[6])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 6 Omicron Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist4_list_ideology_deaths65[6])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

\newpage


# Part 3: Data Analysis and Regression: Region 7 (Middle West)

<!-- Here we examine the Middle West (Iowa, Missouri, Nebraska, and Kansas), at a county level. -->

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

data_middlewest <- subset(risk, state == "iowa" | state == "missouri" | state == "nebraska" | state == "kansas")


pa <- ggplot(data_middlewest, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
scale_colour_brewer(palette = "RdBu")+ ggtitle("Middle West: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density")+ theme(text = element_text(size = 20, family="serif"))
pb <- ggplot(data_middlewest, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") + ggtitle("Middle West: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = pb <- paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```

## Figure S47: Fatality Rate vs. Population Density

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pa

```

## Figure S48: County Level Cumulative Cases vs. Cumulative Deaths

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pb

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_middlewest <- subset(fulldata_revised, state == "iowa" | state == "missouri" | state == "nebraska" | state == "kansas")

p <- ggplot(fulldata_middlewest, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") 


fulldata_middlewest2 <- subset(fulldata_middlewest, vote_discrete == c("Very Conservative", "Moderately Conservative"))

p2 <- ggplot(fulldata_middlewest2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("pink", "darkred")) + ylim(0,.006) + xlim(0, .22) + ggtitle("Middle West: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata_middlewest3 <- subset(fulldata_middlewest, vote_discrete == c("Very Liberal", "Moderately Liberal"))

p3 <- ggplot(fulldata_middlewest3, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() + scale_colour_discrete(type = c("lightblue", "darkblue")) + ylim(0,.006) + xlim(0, .22)+ ggtitle("Middle West: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p2

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p3

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_agg <- fulldata_middlewest
fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
#levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
#fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)


fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)


p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Middle West", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Middle West", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p5

```

## Figure S49: Population Adjusted Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6a

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_agg2 <- fulldata_agg
fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0

fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Middle West", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))


fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)

p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90)) +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Middle West", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p7

```

## Figure S50: Population Adjusted Cumulative Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# 
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_middlewest)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_middlewest)
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_middlewest)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_middlewest)
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput <- sjPlot::tab_model(fit7, fit7_noideology, fit7_deaths, fit7_noideology_deaths, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID"), show.ci = FALSE)
# modeloutput
```

## Table S8: Region 7: Regression Model Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[7])), eval(parse(text=regionlist3_list_ideology_deaths[7])),  eval(parse(text=regionlist4_list_ideology_deaths[7])), dv.labels = c("Alpha Wave Deaths", "Delta Wave Deaths", "Omicron Wave Deaths"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_MDW.html")

# modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_MDW.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_MDW.png" )
```


<!-- <center> -->

<!-- ![Table 4. Linear Models: Middle West](../png/modeloutput_MDW.png){#id .class width=200% height=200%}   -->

<!-- </center> -->


## Figure S51: Region 7 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist1_list_ideology_deaths[7])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 7 Alpha Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[7])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist2_list_ideology_deaths[7])),  eval(parse(text=regionlist2_list_ideology_deaths65[7])),  dv.labels = c("Post-Vaccination Deaths",  "Post-Vaccination Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths[7])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths65[7])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[7])),  eval(parse(text=regionlist3_list_ideology_deaths65[7])), dv.labels = c("Delta Wave Deaths",  "Delta Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S52: Region 7 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist3_list_ideology_deaths[7])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 7 Delta Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist3_list_ideology_deaths65[7])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[7])), eval(parse(text=regionlist4_list_ideology_deaths65[7])), dv.labels = c("Omicron Wave Deaths",  "Omicron Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S53: Region 7 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist4_list_ideology_deaths[7])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 7 Omicron Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist4_list_ideology_deaths65[7])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

\newpage


# Part 3: Data Analysis and Regression: Region 8 (Midnorth)

<!-- Here we examine the MidNorth (Montana, Wyoming, Utah, Colorado, North Dakota, and South Dakota), at a county level.   -->

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

options(scipen = 999) 

data_midnorth <- subset(risk, state == "montana" | state == "wyoming" | state == "utah" | state == "colorado" | state == "north dakota" | state == "south dakota")

#data_northeast[52,25] <- "Very Conservative"


pa <- ggplot(data_midnorth, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
scale_colour_brewer(palette = "RdBu", drop=F) + ggtitle("Midnorth: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density")+ theme(text = element_text(size = 20, family="serif"))
pb <- ggplot(data_midnorth, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu", drop=F) + ggtitle("Midnorth: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata_midnorth <- subset(fulldata_revised, state == "montana" | state == "wyoming" | state == "utah" | state == "colorado" | state == "north dakota" | state == "south dakota")

```


## Figure S54: Fatality Rate vs. Population Density

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pa

```

## Figure S55: County Level Cumulative Cases vs. Cumulative Deaths

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pb

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p <- ggplot(fulldata_midnorth, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") 


fulldata_midnorth2 <- subset(fulldata_midnorth, vote_discrete == c("Very Conservative", "Moderately Conservative"))

p2 <- ggplot(fulldata_midnorth2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("pink", "darkred")) + ylim(0,.008) + xlim(0, .22) + ggtitle("Midnorth: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata_midnorth3 <- subset(fulldata_midnorth, vote_discrete == c("Very Liberal", "Moderately Liberal"))

p3 <- ggplot(fulldata_midnorth3, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() + scale_colour_discrete(type = c("lightblue", "darkblue")) + ylim(0,.008) + xlim(0, .22) + ggtitle("Midnorth: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p2

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p3

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


fulldata_agg <- fulldata_midnorth
fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
#levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
#fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)


fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)


p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid North", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid North", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p5

```

## Figure S56: Population Adjusted Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6a

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


fulldata_agg2 <- fulldata_agg
fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0

fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid North", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))


fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)

p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90)) +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Mid North", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p7

```

## Figure S57: Population Adjusted Cumulative Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# 
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_midnorth)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4, data = data_midnorth)
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_midnorth)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_midnorth)

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput <- sjPlot::tab_model(fit8, fit8_noideology, fit8_deaths, fit8_noideology_deaths, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID"), show.ci = FALSE)
# modeloutput
```

## Table S9: Region 8: Regression Model Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[8])), eval(parse(text=regionlist3_list_ideology_deaths[8])),  eval(parse(text=regionlist4_list_ideology_deaths[8])), dv.labels = c("Alpha Wave Deaths", "Delta Wave Deaths", "Omicron Wave Deaths"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_MN.html")

# modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_MN.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_MN.png" )
```


<!-- <center> -->

<!-- ![Table 8. Linear Models: Midnorth](../png/modeloutput_MN.png){#id .class width=200% height=200%}   -->

<!-- </center> -->

## Figure S58: Region 8 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist1_list_ideology_deaths[8])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 8 Alpha Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[8])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist2_list_ideology_deaths[8])),  eval(parse(text=regionlist2_list_ideology_deaths65[8])), dv.labels = c("Post-Vaccination Deaths",  "Post-Vaccination Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# plot_model(eval(parse(text=regionlist2_list_ideology_deaths[8])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths65[8])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[8])), eval(parse(text=regionlist3_list_ideology_deaths65[8])),  dv.labels = c("Delta Wave Deaths",  "Delta Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S59: Region 8 Delta Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist3_list_ideology_deaths[8])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 8 Delta Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist3_list_ideology_deaths65[8])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[8])),  eval(parse(text=regionlist4_list_ideology_deaths65[8])),  dv.labels = c("Omicron Wave Deaths",  "Omicron Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S60: Region 8 Omicron Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist4_list_ideology_deaths[8])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 8 Omicron Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist4_list_ideology_deaths65[8])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

\newpage



# Part 3: Data Analysis and Regression: Region 9 (West)

<!-- Here we examine the Northeast (California, Nevada, Arizona), at a county level.  -->

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

options(scipen = 999) 

data_west <- subset(risk, state == "california" | state == "arizona" | state == "nevada")

#data_northeast[52,25] <- "Very Conservative"


pa <- ggplot(data_west, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
scale_colour_brewer(palette = "RdBu", drop=F)+ ggtitle("West: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density")+ theme(text = element_text(size = 20, family="serif"))
pb <- ggplot(data_west, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu", drop=F) + ggtitle("West: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```

## Figure S61: Fatality Rate vs. Population Density

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pa

```

## Figure S62: County Level Cumulative Cases vs. Cumulative Deaths

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pb

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_west<- subset(fulldata_revised, state == "california" | state == "arizona" | state == "nevada")

p <- ggplot(fulldata_west, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") 


fulldata_west2 <- subset(fulldata_west, vote_discrete == c("Very Conservative", "Moderately Conservative"))

p2 <- ggplot(fulldata_west2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("pink", "darkred")) + ylim(0,.004) + xlim(0, .22)+ ggtitle("West: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata_west3 <- subset(fulldata_west, vote_discrete == c("Very Liberal", "Moderately Liberal"))

p3 <- ggplot(fulldata_west3, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() + scale_colour_discrete(type = c("lightblue", "darkblue")) + ylim(0,.004) + xlim(0, .22) + ggtitle("West: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p2

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p3

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#gridExtra::grid.arrange(p2,p3, ncol=2)


fulldata_agg <- fulldata_west
fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
#levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
#fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)


fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)


p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("West", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("West", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p5

```

## Figure S63: Population Adjusted Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6a

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}


fulldata_agg2 <- fulldata_agg
fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0

fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("West", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))



fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)

p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90)) +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("West", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))

```



```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p7

```

## Figure S64: Population Adjusted Cumulative Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# 
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_west)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4, data = data_west)
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_west)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_west)
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput <- sjPlot::tab_model(fit9, fit9_noideology, fit9_deaths, fit9_noideology_deaths, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID"), show.ci = FALSE)
# modeloutput
```

## Table S10: Region 9: Regression Model Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[9])), eval(parse(text=regionlist3_list_ideology_deaths[9])),  eval(parse(text=regionlist4_list_ideology_deaths[9])), dv.labels = c("Alpha Wave Deaths", "Delta Wave Deaths", "Omicron Wave Deaths"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, show.est = FALSE, show.p=TRUE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_W.html")

#modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_W.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_W.png")
```


<!-- <center> -->

<!-- ![Table 10. Linear Models: West](../png/modeloutput_W.png){#id .class width=200% height=200%}   -->

<!-- </center> -->

## Figure S65: Region 9 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist1_list_ideology_deaths[9])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 9 Alpha Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[9])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist2_list_ideology_deaths[9])), eval(parse(text=regionlist2_list_ideology_deaths65[9])),  dv.labels = c("Post-Vaccination Deaths", "Post-Vaccination Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# plot_model(eval(parse(text=regionlist2_list_ideology_deaths[9])), type = "std2", show.values = "TRUE", axis.labels  =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Alpha Wave", value.size = 5)
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths65[9])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[9])),  eval(parse(text=regionlist3_list_ideology_deaths65[9])),  dv.labels = c("Delta Wave Deaths", "Delta Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S66: Region 9 Delta Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist3_list_ideology_deaths[9])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 9 Delta Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist3_list_ideology_deaths65[9])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[9])),  eval(parse(text=regionlist4_list_ideology_deaths65[9])), dv.labels = c("Omicron Wave Deaths",  "Omicron Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S67: Region 9 Omega Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist4_list_ideology_deaths[9])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 9 Omicron Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist4_list_ideology_deaths65[9])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

\newpage


# Part 3: Data Analysis and Regression: Region 10 (Pacific Northwest)

<!-- Here we examine the Pacific Northwest (Idaho, Oregon, and Washington), at a county level. -->


```{r,echo=FALSE, results='hide',message=FALSE, warning=FALSE}

data_PNW <- subset(risk, state == "idaho" | state == "washington" | state == "oregon")

pa <- ggplot(data_PNW, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
scale_colour_brewer(palette = "RdBu") + ggtitle("Pacific Northwest: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density")+ theme(text = element_text(size = 20, family="serif"))
pb <- ggplot(data_PNW, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu")+ ggtitle("Pacific Northwest: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```

## Figure S68: Fatality Rate vs. Population Density

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pa

```

## Figure S69: County Level Cumulative Cases vs. Cumulative Deaths

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

pb

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

fulldata_PNW <- subset(fulldata_revised, state == "idaho" | state == "washington" | state == "oregon")

p <- ggplot(fulldata_PNW, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_brewer(palette = "RdBu") 


fulldata_PNW2 <- subset(fulldata_PNW, vote_discrete == c("Very Conservative", "Moderately Conservative"))

p2 <- ggplot(fulldata_PNW2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("pink", "darkred")) + ylim(0,.003) + xlim(0, .2) + ggtitle("Pacific Northwest: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

fulldata_PNW3 <- subset(fulldata_PNW, vote_discrete == c("Very Liberal", "Moderately Liberal"))

p3 <- ggplot(fulldata_PNW3, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
  scale_colour_discrete(type = c("lightblue", "darkblue")) + ylim(0,.003) + xlim(0, .2)+ ggtitle("Pacific Northwest: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p2

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p3

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#gridExtra::grid.arrange(p2,p3, ncol=2)


fulldata_agg <- fulldata_PNW
fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
#levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
#fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)


fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)


p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Pacific Northwest", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Pacific Northwest", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p5

```

## Figure S70: Population Adjusted Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6a

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#gridExtra::grid.arrange(p5,p6a, ncol=2)


fulldata_agg2 <- fulldata_agg
fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0

fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)


p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90))  +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Pacific Northwest", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))


fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)

p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
  theme(axis.text.x = element_text(angle = 90)) +
    scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("Pacific Northwest", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))+ theme(text = element_text(size = 20, family="serif"))

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#p7

```

## Figure S71: Population Adjusted Cumulative Deaths vs Ideology over time

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

p6

```


```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#gridExtra::grid.arrange(p7,p6, ncol=2)

#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)






#LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_PNW)
# #LM without the voting percentage to compare fit
# withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_PNW)
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_PNW)
# #LM without the voting percentage to compare fit
# withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_PNW)


```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput <- sjPlot::tab_model(fit10, fit10_noideology, fit10_deaths, fit10_noideology_deaths, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID"), show.ci = FALSE)
# modeloutput
```

## Table S11: Region 10: Regression Model Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[10])), eval(parse(text=regionlist3_list_ideology_deaths[10])),  eval(parse(text=regionlist4_list_ideology_deaths[10])), dv.labels = c("Alpha Wave Deaths", "Delta Wave Deaths", "Omicron Wave Deaths"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_PNW.html")

#modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_PNW.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_PNW.png" )
```

<!-- <center> -->

<!-- ![Table 2. Linear Models: Pacific Northwest](../png/modeloutput_PNW.png){#id .class width=200% height=200%}   -->

<!-- </center>  -->

## Figure S72: Region 10 Alpha Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist1_list_ideology_deaths[10])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 10 Alpha Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist1_list_ideology_deaths65[10])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist2_list_ideology_deaths[10])),  eval(parse(text=regionlist2_list_ideology_deaths65[10])),  dv.labels = c("Post-Vaccination Deaths", "Post-Vaccination Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths[10])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
# plot_model(eval(parse(text=regionlist2_list_ideology_deaths65[10])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[10])),  eval(parse(text=regionlist3_list_ideology_deaths65[10])),  dv.labels = c("Delta Wave Deaths",  "Delta Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S73: Region 10 Delta Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist3_list_ideology_deaths[10])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 10 Delta Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist3_list_ideology_deaths65[10])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[10])),  eval(parse(text=regionlist4_list_ideology_deaths65[10])),  dv.labels = c("Omicron Wave Deaths", "Omicron Wave Deaths65"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE)
# modeloutput_US
```

## Figure S74: Region 10 Omicron Wave Standardized Coefficients Plot

```{r, echo=FALSE, message=FALSE, warning=FALSE}
set_theme(base = theme_classic(), theme.font = 'serif')

plot_model(eval(parse(text=regionlist4_list_ideology_deaths[10])), type = "std2", show.values = "TRUE", axis.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), axis.title = "Estimates", title = "Region 10 Omicron Wave Standardized Coefficients Plot", value.size = 5)+ font_size(axis_title.x = 20, axis_title.y=20, labels.x=15, labels.y=15, title=20)
# plot_model(eval(parse(text=regionlist4_list_ideology_deaths65[10])), type = "std2", show.values = "TRUE", pred.labels =  c("Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity", "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"))
```



\newpage

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
# 
# dyn.load("/opt/modules/climatology/gdal/3.1.4/lib/libgdal.so")
# library(rgdal)
# library(rgeos)
# library(maptools)
# library(spdep)
# library(sp)
# library(terra)
# library(spData)
# library(spgwr)
# 
# 
# 
#   counties <- readShapePoly('/mnt/ceph/erichs/owncloud/Idaho-COVID/US_spatial/counties_conus/UScounties_conus.shp',
#                             proj4string=CRS
#                             ("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#   projection = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
#   
#   counties  <- subset(counties, STATE_NAME == "Idaho" | STATE_NAME == "Washington" |  STATE_NAME == "Oregon" )
#   
#   new_voting_removed_na <- new_voting[!(is.na(new_voting$pct)), ]
# 
#   counties_merged <- merge(counties, new_voting, by="FIPS", duplicateGeoms = TRUE)
#   
#   #fixing NA values due to spatial data frame having empty counties due to lack of voting data.  Minimal counties (< 20)
#   naIndex <- which(is.na(counties_merged$pct))
#   counties_merged[naIndex, "pct"] <- 0
#   
# 
# 
#   #counties@data <- counties@data[-c(36,690,710,882),]
#   
# sf::sf_use_s2(FALSE)
# nb <- poly2nb(counties_merged, queen = TRUE)
# lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# 
# Inc.lag <- lag.listw(lw, counties_merged$pct)
# divergence <- counties_merged$pct/Inc.lag
# divergence[which(!is.finite(divergence))] <- 0
# 
# counties_merged <- cbind(counties_merged, Inc.lag, divergence)
# 
# colnames(counties_merged@data)[13] <- c("adjacent_ideology")
# colnames(counties_merged@data)[14] <- c("divergence")
# 
# #spatial dependence/associations
# 
# 
# plot(counties_merged$pct, Inc.lag)
# abline(lm(Inc.lag ~ counties_merged$pct), lwd = 2, col = "red")
# 
# 
# moran.test(counties_merged$pct, lw, zero.policy = TRUE)
# 
# require(spgwr)
# 
# #bw = gwr.sel(pct ~  + count, data = counties_merged)
# 
# # 
# # mat <- nb2mat(nb, style="B", zero.policy = TRUE)
# # 
# # colnames(mat) <- rownames(mat)
# # mat
# 
# 
# rc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(divergence[divergence < 1]))    
# rc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(divergence[divergence >= 1]))
# rampcols <- c(rc1,rc2)
# 
# pctrc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(counties_merged$pct[counties_merged$pct < .5]))    
# pctrc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(counties_merged$pct[counties_merged$pct >= .5]))
# pctrampcols <- c(pctrc1,pctrc2)
# 
# counties_merged <- counties_merged[order(counties_merged$pct), ]
# counties_merged@data <- cbind(counties_merged@data, pctrampcols)
# 
# par(mfrow=c(1, 2))
# #plots scatterplot of counties vs. pct, ordered
# plot(counties_merged@data$pct, col = pctrampcols)
# #plots scatterplot of counties vs. divergence, ordered
# counties_merged <- counties_merged[order(counties_merged$divergence), ]
# counties_merged@data <- cbind(counties_merged@data, rampcols)
# plot(counties_merged@data$divergence, col = rampcols)
# #maps
# par(mfrow=c(1, 2))
# plot(counties_merged, col=pctrampcols, border = "darkgray")
# lines(states, add=TRUE)
# plot(counties_merged, col = rampcols, cuts = 30, border = "darkgray")
# lines(states, add=TRUE)
# 
# 
# #


```


\newpage

# Part 3: Data Analysis and Regression Modeling Summarized Model Results

## Table S12: Model Results: Alpha Wave (December 2019 - May 2021)

```{r covidrisk_model_combine1, echo=FALSE, message=FALSE, warning=FALSE}


modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist1_list_ideology_deaths[2])),  eval(parse(text=regionlist1_list_ideology_deaths[3])), eval(parse(text=regionlist1_list_ideology_deaths[4])),  eval(parse(text=regionlist1_list_ideology_deaths[5])), eval(parse(text=regionlist1_list_ideology_deaths[6])), eval(parse(text=regionlist1_list_ideology_deaths[7])),  eval(parse(text=regionlist1_list_ideology_deaths[8])), eval(parse(text=regionlist1_list_ideology_deaths[9])), eval(parse(text=regionlist1_list_ideology_deaths[10])), eval(parse(text=regionlist1_list_ideology_deaths[1])),    dv.labels = c("NE", "ME", "SE", "MW", "MS", "MDW", "MN", "W", "PNW", "US"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, show.est = FALSE, show.p=TRUE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_A.html")

#modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_A.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_A.png")
# 
# 
# tables <- list.clean(modeloutput_US, fun = is.null, recursive = FALSE)
# tables2 = tables[[1]] 
# tables2 <- as.matrix(tables2) %>% as_tibble()
# tables2[is.na(tables2)] <- ""
# 
# 
# 
# #create table in latex for publication
# kable(
#   tables2,
#   format = "latex",
#   booktabs = TRUE,
#   col.names = names(tables2),
#   align = c("l", rep("c", length(names(tables2)) - 1)),
#   caption = "figure caption"
# )



```

## Table S13: Model Results: Delta Wave (May 2021 - December 2021)

```{r covidrisk_model_combine2, echo=FALSE, message=FALSE, warning=FALSE}


modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist3_list_ideology_deaths[2])),  eval(parse(text=regionlist3_list_ideology_deaths[3])), eval(parse(text=regionlist3_list_ideology_deaths[4])),  eval(parse(text=regionlist3_list_ideology_deaths[5])), eval(parse(text=regionlist3_list_ideology_deaths[6])), eval(parse(text=regionlist3_list_ideology_deaths[7])),  eval(parse(text=regionlist3_list_ideology_deaths[8])), eval(parse(text=regionlist3_list_ideology_deaths[9])), eval(parse(text=regionlist3_list_ideology_deaths[10])), eval(parse(text=regionlist3_list_ideology_deaths[1])),    dv.labels = c("NE", "ME", "SE", "MW", "MS", "MDW", "MN", "W", "PNW", "US"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, show.est = FALSE, show.p=TRUE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_B.html")

#modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_B.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_B.png")
```

## Table S14: Model Results: Omicron Wave (December 2021 - April 2022)

```{r covidrisk_model_combine3, echo=FALSE, message=FALSE, warning=FALSE}


modeloutput_US <- sjPlot::tab_model(eval(parse(text=regionlist4_list_ideology_deaths[2])),  eval(parse(text=regionlist4_list_ideology_deaths[3])), eval(parse(text=regionlist4_list_ideology_deaths[4])),  eval(parse(text=regionlist4_list_ideology_deaths[5])), eval(parse(text=regionlist4_list_ideology_deaths[6])), eval(parse(text=regionlist4_list_ideology_deaths[7])),  eval(parse(text=regionlist4_list_ideology_deaths[8])), eval(parse(text=regionlist4_list_ideology_deaths[9])), eval(parse(text=regionlist4_list_ideology_deaths[10])), eval(parse(text=regionlist4_list_ideology_deaths[1])),    dv.labels = c("NE", "ME", "SE", "MW", "MS", "MDW", "MN", "W", "PNW", "US"), pred.labels =  c("Intercept", "Socioeconomic", "Household Composition & Disability", "Minority Status & Language", "Housing Type & Transportation", "Political Divergence", "Democratic Voting Pct","Vaccination Rate","Population Density",  "Obesity",  "Uninsured Adults",   "Unemployed",  "Diabetes", "Food Insecurity",  "Social Associations", "Age over 65", "Broadband Access"), show.ci = FALSE, show.est = FALSE, show.p=TRUE, file="/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_C.html")

#modeloutput_US

webshot::webshot(url = "/mnt/ceph/erichs/git/IMCI-covid-risk/html/modeloutput_C.html", file = "/mnt/ceph/erichs/git/IMCI-covid-risk/png/modeloutput_C.png")
```

## Figure S75: Model Results: Regression R2 Plot

```{r covidrisk_model_R2plot, echo=FALSE, message=FALSE, warning=FALSE}


alphaR <- c(summary(eval(parse(text=regionlist1_list_ideology_deaths[2])))$r.squared,  summary(eval(parse(text=regionlist1_list_ideology_deaths[3])))$r.squared, summary(eval(parse(text=regionlist1_list_ideology_deaths[4])))$r.squared,  summary(eval(parse(text=regionlist1_list_ideology_deaths[5])))$r.squared, summary(eval(parse(text=regionlist1_list_ideology_deaths[6])))$r.squared, summary(eval(parse(text=regionlist1_list_ideology_deaths[7])))$r.squared,  summary(eval(parse(text=regionlist1_list_ideology_deaths[8])))$r.squared, summary(eval(parse(text=regionlist1_list_ideology_deaths[9])))$r.squared, summary(eval(parse(text=regionlist1_list_ideology_deaths[10])))$r.squared)    


deltaR <- c(summary(eval(parse(text=regionlist3_list_ideology_deaths[2])))$r.squared,  summary(eval(parse(text=regionlist3_list_ideology_deaths[3])))$r.squared, summary(eval(parse(text=regionlist3_list_ideology_deaths[4])))$r.squared,  summary(eval(parse(text=regionlist3_list_ideology_deaths[5])))$r.squared, summary(eval(parse(text=regionlist3_list_ideology_deaths[6])))$r.squared, summary(eval(parse(text=regionlist3_list_ideology_deaths[7])))$r.squared,  summary(eval(parse(text=regionlist3_list_ideology_deaths[8])))$r.squared, summary(eval(parse(text=regionlist3_list_ideology_deaths[9])))$r.squared, summary(eval(parse(text=regionlist3_list_ideology_deaths[10])))$r.squared) 

omicronR <- c(summary(eval(parse(text=regionlist4_list_ideology_deaths[2])))$r.squared,  summary(eval(parse(text=regionlist4_list_ideology_deaths[3])))$r.squared, summary(eval(parse(text=regionlist4_list_ideology_deaths[4])))$r.squared,  summary(eval(parse(text=regionlist4_list_ideology_deaths[5])))$r.squared, summary(eval(parse(text=regionlist4_list_ideology_deaths[6])))$r.squared, summary(eval(parse(text=regionlist4_list_ideology_deaths[7])))$r.squared,  summary(eval(parse(text=regionlist4_list_ideology_deaths[8])))$r.squared, summary(eval(parse(text=regionlist4_list_ideology_deaths[9])))$r.squared, summary(eval(parse(text=regionlist4_list_ideology_deaths[10])))$r.squared) 

R3 <- rbind(data.frame(alphaR),setNames(data.frame(deltaR),names(data.frame(alphaR))), setNames(data.frame(omicronR),names(data.frame(alphaR))))
R3$Variant <- c(rep("Alpha", 9), rep("Delta", 9), rep("Omicron", 9))
R3$Region <- rep(c("Region 1", "Region 3", "Region 4", "Region 5", "Region 6", "Region 7", "Region8", "Region 9", "Region 10"), 3)
R3$Region <- as.factor(R3$Region)

names(R3)[names(R3) == 'alphaR'] <- 'R2'


R3$Region <- factor(R3$Region, levels=c("Region 1", "Region 3", "Region 4", "Region 5", "Region 6", "Region 7", "Region8", "Region 9", "Region 10"))

ggplot(R3)+geom_bar(aes(Region, R2, group=Variant, fill=Variant), size = 2, position="dodge", stat="identity") + theme_bw()  + theme(axis.text.x=element_text(angle = 90, hjust=0.95,vjust=0.2, size=20, family="serif"))  + theme(axis.title=element_text(size=20, family="serif")) + theme(legend.title = element_text(size=20, family="serif")) + theme(legend.text = element_text(size=20, family="serif")) + ylab(bquote('R'^2))


```

\newpage

## Table S15: Regionalized Regression Model Results: Significance Table


```{r covidrisk_model_pvalues, echo=FALSE, message=FALSE, warning=FALSE}

library(reshape2)
library(ggplot2)
library(kableExtra)
library(plyr)

ado_2_P <- as.data.frame(rbind(summary(model_ideology_deaths[[2]])$coefficients[2:16,4], summary(model_ideology_deaths_delta[[2]])$coefficients[2:16,4], summary(model_ideology_deaths_omicron[[2]])$coefficients[2:16,4])) 
ado_2_P$region <- "Regions 1&2"
ado_3_P <- as.data.frame(rbind(summary(model_ideology_deaths[[3]])$coefficients[2:16,4], summary(model_ideology_deaths_delta[[3]])$coefficients[2:16,4], summary(model_ideology_deaths_omicron[[3]])$coefficients[2:16,4])) 
ado_3_P$region <- "Region 3"
ado_4_P <- as.data.frame(rbind(summary(model_ideology_deaths[[4]])$coefficients[2:16,4], summary(model_ideology_deaths_delta[[4]])$coefficients[2:16,4], summary(model_ideology_deaths_omicron[[4]])$coefficients[2:16,4]) )
ado_4_P$region <- "Region 4"
ado_5_P <- as.data.frame(rbind(summary(model_ideology_deaths[[5]])$coefficients[2:16,4], summary(model_ideology_deaths_delta[[5]])$coefficients[2:16,4], summary(model_ideology_deaths_omicron[[5]])$coefficients[2:16,4]) )
ado_5_P$region <- "Region 5"
ado_6_P <- as.data.frame(rbind(summary(model_ideology_deaths[[6]])$coefficients[2:16,4], summary(model_ideology_deaths_delta[[6]])$coefficients[2:16,4], summary(model_ideology_deaths_omicron[[6]])$coefficients[2:16,4]) )
ado_6_P$region <- "Region 6"
ado_7_P <- as.data.frame(rbind(summary(model_ideology_deaths[[7]])$coefficients[2:16,4], summary(model_ideology_deaths_delta[[7]])$coefficients[2:16,4], summary(model_ideology_deaths_omicron[[7]])$coefficients[2:16,4]) )
ado_7_P$region <- "Region 7"
ado_8_P <- as.data.frame(rbind(summary(model_ideology_deaths[[8]])$coefficients[2:16,4], summary(model_ideology_deaths_delta[[8]])$coefficients[2:16,4], summary(model_ideology_deaths_omicron[[8]])$coefficients[2:16,4]) )
ado_8_P$region <- "Region 8"
ado_9_P <- as.data.frame(rbind(summary(model_ideology_deaths[[9]])$coefficients[2:16,4], summary(model_ideology_deaths_delta[[9]])$coefficients[2:16,4], summary(model_ideology_deaths_omicron[[9]])$coefficients[2:16,4]) )
ado_9_P$region <- "Region 9"
ado_10_P <- as.data.frame(rbind(summary(model_ideology_deaths[[10]])$coefficients[2:16,4], summary(model_ideology_deaths_delta[[10]])$coefficients[2:16,4], summary(model_ideology_deaths_omicron[[10]])$coefficients[2:16,4]) )
ado_10_P$region <- "Region 10"
ado_P <- rbind(ado_2_P, ado_3_P, ado_4_P, ado_5_P, ado_6_P, ado_7_P, ado_8_P, ado_9_P, ado_10_P)

#df <- data.frame(x = seq_along(ado_P[, 1]),ado_P)
ado_P <- melt(ado_P, id.vars = "region")
ado_P$region <- as.factor(ado_P$region)
ado_P$variant <- c(rep(c("Alpha","Delta","Omicron"), 9))

levels(ado_P$variable) <- c("Socioeconomic Stats", "Household Composition and Disability", "Minority Status and Language", "Housing Type and Transportation", "Political Divergence", "Democratic Voting Pct", "Vaccination Rate", "Population Density", "Obesity", "Unemployment", "Uninsured Adults", "Social Associations", "Diabetes", "Food Insecurity", "Lack of Broadband Access", "Age over 65+")
ado_P_sig <- subset(ado_P, value < .05)
ado_P_sig_sort <- ado_P_sig[order(ado_P_sig$region, ado_P_sig$variant),]
#ggplot(ado_P, aes(x = variable, y = value)) + geom_point(aes(color=variant, shape = variant), size=2)+ theme_bw() +geom_hline(yintercept=.05, linetype='dotted', col = 'red') + theme(axis.text.x=element_text(angle = 90, hjust=0.95,vjust=0.2, size=10, family="serif"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + facet_grid(region ~ .) + scale_shape(solid = FALSE)

regionz <- c("Regions 1&2", "Region 3", "Region 4", "Region 5", "Region 6", "Region 7", "Region 8", "Region 9", "Region 10")
variantz <- c("Alpha", "Delta", "Omicron")
new <- NULL
for (i in regionz){
  for (j in variantz) {
newframe <- data.frame(i, j, x = paste(as.vector(subset(ado_P_sig, variant == j & region == i)$variable), collapse = ', '))
    new <- rbind(new,newframe)
  }}

new2 <- dcast(new,i~j)
new2$i  <- factor(new2$i , levels = c("Regions 1&2", "Region 3", "Region 4", "Region 5", "Region 6", "Region 7", "Region 8", "Region 9", "Region 10"))
colnames(new2) <- c("Regions", "Alpha Wave", "Delta Wave", "Omicron Wave")

sigtable <- new2 %>% arrange(Regions) %>% kable() %>% column_spec(2:4, width = "1.5in") %>% kable_styling(full_width = FALSE, latex_options = "hold_position") 

add_header_above(sigtable, c(" ", "Significant Independent Variables" = 3))

```

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
# 
# dyn.load("/opt/modules/climatology/gdal/3.1.4/lib/libgdal.so")
# library(rgdal)
# library(rgeos)
# library(maptools)
# library(spdep)
# library(sp)
# library(terra)
# library(spData)
# library(spgwr)
# 
# 
# 
#   counties <- readShapePoly('/mnt/ceph/erichs/owncloud/Idaho-COVID/US_spatial/counties_conus/UScounties_conus.shp',
#                             proj4string=CRS
#                             ("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#   projection = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
#   
#   counties  <- subset(counties, STATE_NAME == "California" | STATE_NAME == "Arizona" |  STATE_NAME == "Nevada")
#   
#   new_voting_removed_na <- new_voting[!(is.na(new_voting$pct)), ]
# 
#   counties_merged <- merge(counties, new_voting, by="FIPS", duplicateGeoms = TRUE)
#   
#   #fixing NA values due to spatial data frame having empty counties due to lack of voting data.  Minimal counties (< 20)
#   naIndex <- which(is.na(counties_merged$pct))
#   counties_merged[naIndex, "pct"] <- 0
#   
# 
# 
#   #counties@data <- counties@data[-c(36,690,710,882),]
#   
# sf::sf_use_s2(FALSE)
# nb <- poly2nb(counties_merged, queen = TRUE)
# lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# 
# Inc.lag <- lag.listw(lw, counties_merged$pct)
# divergence <- counties_merged$pct/Inc.lag
# divergence[which(!is.finite(divergence))] <- 0
# 
# counties_merged <- cbind(counties_merged, Inc.lag, divergence)
# 
# colnames(counties_merged@data)[13] <- c("adjacent_ideology")
# colnames(counties_merged@data)[14] <- c("divergence")
# 
# #spatial dependence/associations
# 
# 
# plot(counties_merged$pct, Inc.lag)
# abline(lm(Inc.lag ~ counties_merged$pct), lwd = 2, col = "red")
# 
# 
# moran.test(counties_merged$pct, lw, zero.policy = TRUE)
# 
# require(spgwr)
# 
# #bw = gwr.sel(pct ~  + count, data = counties_merged)
# 
# # 
# # mat <- nb2mat(nb, style="B", zero.policy = TRUE)
# # 
# # colnames(mat) <- rownames(mat)
# # mat
# 
# 
# rc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(divergence[divergence < 1]))    
# rc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(divergence[divergence >= 1]))
# rampcols <- c(rc1,rc2)
# 
# pctrc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(counties_merged$pct[counties_merged$pct < .5]))    
# pctrc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(counties_merged$pct[counties_merged$pct >= .5]))
# pctrampcols <- c(pctrc1,pctrc2)
# 
# counties_merged <- counties_merged[order(counties_merged$pct), ]
# counties_merged@data <- cbind(counties_merged@data, pctrampcols)
# 
# par(mfrow=c(1, 2))
# #plots scatterplot of counties vs. pct, ordered
# plot(counties_merged@data$pct, col = pctrampcols)
# #plots scatterplot of counties vs. divergence, ordered
# counties_merged <- counties_merged[order(counties_merged$divergence), ]
# counties_merged@data <- cbind(counties_merged@data, rampcols)
# plot(counties_merged@data$divergence, col = rampcols)
# #maps
# par(mfrow=c(1, 2))
# plot(counties_merged, col=pctrampcols, border = "darkgray")
# lines(states, add=TRUE)
# plot(counties_merged, col = rampcols, cuts = 30, border = "darkgray")
# lines(states, add=TRUE)
# 
# 
# #


```

\newpage

<!-- # California -->

<!-- Here we examine California, at a county level.  The date of cumulative aggregation is February 2, 2022. -->

```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
# 
# options(scipen = 999) 
# 
# data_CA <- subset(risk, state == "california")
# 
# #data_northeast[52,25] <- "Very Conservative"
# 
# 
# ggplot(data_CA, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
# scale_colour_brewer(palette = "RdBu", drop=F)+ ggtitle("California: Fatality Rate vs. Logarithmic Population Density", subtitle = paste("Cumulative Deaths and Cases by County, as of ", maxdate, sep="")) +ylab("Fatality Rate") + xlab("Logarithmic Population Density")
# ggplot(data_CA, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point() + theme_minimal() +
#   scale_colour_brewer(palette = "RdBu", drop=F) + ggtitle("California: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = paste("Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of ",  maxdate, sep="")) +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases")
# 
# 
# data_CA <- subset(fulldata_revised, state == "california")
# 
# p <- ggplot(data_CA, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
#   scale_colour_brewer(palette = "RdBu") 
# 
# 
# data_CA2 <- subset(data_CA, vote_discrete == c("Very Conservative", "Moderately Conservative"))
# 
# p2 <- ggplot(data_CA2, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() +
#   scale_colour_discrete(type = c("pink", "darkred")) + ylim(0,.0045) + xlim(0, .22)+ ggtitle("California: Conservative Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")
# 
# data_CA3 <- subset(data_CA, vote_discrete == c("Very Liberal", "Moderately Liberal"))
# 
# p3 <- ggplot(data_CA3, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete, group = FIPS)) + geom_line() + theme_minimal() + scale_colour_discrete(type = c("lightblue", "darkblue")) + ylim(0,.0045) + xlim(0, .22)+ ggtitle("California: Liberal Counties", subtitle = paste("County Level Cases Vs. Deaths: ", maxdate, sep="")) +ylab("Population Adjusted Deaths") + xlab("Population Adjusted Cases")
# 
# p2
# p3
# #gridExtra::grid.arrange(p2,p3, ncol=2)
# 
# 
# fulldata_agg <- data_CA
# fulldata_agg$vote_discrete <- as.factor(fulldata_agg$vote_discrete)
# #levels(fulldata_agg$vote_discrete) <- c(4,3,2,1)
# #fulldata_agg$vote_discrete <- as.numeric(fulldata_agg$vote_discrete)
# 
# 
# fulldata_agg_pop <- aggregate(fulldata_agg$population, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
# fulldata_agg_cases <- aggregate(fulldata_agg$new.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
# fulldata_agg_combined <- cbind(fulldata_agg_pop, fulldata_agg_cases[3])
# colnames(fulldata_agg_combined) <- c("vote_discrete", "date", "population", "new.cases")
# fulldata_agg_combined$date <- as.Date(fulldata_agg_combined$date)
# 
# 
# p5 <- ggplot(fulldata_agg_combined, aes(x=date, y = new.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
#   theme(axis.text.x = element_text(angle = 90))  +
#     scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("California", subtitle = paste("Population Adjusted Cases vs. Ideology over time, as of: ", maxdate, sep="" ))
# 
# fulldata_agg_deaths <- aggregate(fulldata_agg$new.deaths, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
# fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
# colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
# fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)
# 
# 
# p6a <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
#   theme(axis.text.x = element_text(angle = 90))  +
#     scale_x_date(date_breaks = "1 month", expand = c(0,0)) + ggtitle("California", subtitle = paste("Population Adjusted Deaths vs. Ideology over time, as of: ", maxdate, sep="" ))
# 
# p5
# p6a
# #gridExtra::grid.arrange(p5,p6a, ncol=2)
# 
# 
# fulldata_agg2 <- fulldata_agg
# fulldata_agg2$daily_deaths[fulldata_agg2$daily_deaths < 0] <- 0
# 
# fulldata_agg_deaths <- aggregate(fulldata_agg2$deaths, by=list(fulldata_agg2$vote_discrete, fulldata_agg2$date), FUN = "sum")
# fulldata_agg_combined_deaths <- cbind(fulldata_agg_pop, fulldata_agg_deaths[3])
# colnames(fulldata_agg_combined_deaths) <- c("vote_discrete", "date", "population", "deaths")
# fulldata_agg_combined_deaths$date <- as.Date(fulldata_agg_combined_deaths$date)
# 
# 
# p6 <- ggplot(fulldata_agg_combined_deaths, aes(x=date, y = deaths/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
#   theme(axis.text.x = element_text(angle = 90))  +
#     scale_x_date(date_breaks = "1 month", expand = c(0,0))  + ggtitle("California", subtitle = paste("Population Adjusted Cumulative Deaths vs. Ideology over time, as of: ", maxdate, sep=""))
# 
# 
# fulldata_agg_cuml_cases <- aggregate(fulldata_agg$cuml.cases, by=list(fulldata_agg$vote_discrete, fulldata_agg$date), FUN = "sum")
# fulldata_agg_combined_cuml_cases <- cbind(fulldata_agg_pop, fulldata_agg_cuml_cases[3])
# colnames(fulldata_agg_combined_cuml_cases) <- c("vote_discrete", "date", "population", "cuml.cases")
# fulldata_agg_combined_cuml_cases$date <- as.Date(fulldata_agg_combined_cuml_cases$date)
# 
# p7 <- ggplot(fulldata_agg_combined_cuml_cases, aes(x=date, y = cuml.cases/population, color = vote_discrete, group = vote_discrete)) + geom_line()+ theme_classic() +
#   theme(axis.text.x = element_text(angle = 90)) +
#     scale_x_date(date_breaks = "1 month", expand = c(0,0))  + ggtitle("California", subtitle = paste("Population Adjusted Cumulative Cases vs. Ideology over time, as of: ", maxdate, sep=""))
# 
# p7
# p6
# #gridExtra::grid.arrange(p7,p6, ncol=2)
# 
# 
# 
# 
# 
# #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# # withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# # #LM without the voting percentage to compare fit
# # withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# # 
# # 
# # #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# # withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data)
# # #LM without the voting percentage to compare fit
# # withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data)
# # 
# # 
# # 
# # 
# # 
# # #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# # withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_CA)
# # #LM without the voting percentage to compare fit
# # withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4, data = data_CA)
# # 
# # #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden
# # withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_CA)
# # #LM without the voting percentage to compare fit
# # withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_CA)
# # 
# # ```
# # 
# # ```{r, echo=FALSE, message=FALSE, warning=FALSE}
# # 
# # modeloutput <- sjPlot::tab_model(withmodel, withoutmodel, withmodel_deaths, withoutmodel_deaths, dv.labels = c("Cases w/ ID", "Cases w/o ID", "Deaths w/ ID", "Deaths w/o ID"), show.ci = FALSE)
# # modeloutput
```




<!-- # Idaho, Vermont, and Texas -->


<!-- Here we examine the three states included in our COVID-19 survey (Idaho, Vermont ,and Texas), at a county level.  The date of cumulative aggregation is February 2, 2022. -->

<!-- ```{r, echo=FALSE, results='hide',message=FALSE, warning=FALSE} -->

<!-- options(scipen = 999)  -->

<!-- data_ID_VT_TX <- subset(data, state == "idaho" | state == "vermont" | state == "texas") -->

<!-- #data_northeast[52,25] <- "Very Conservative" -->


<!-- ggplot(data_ID_VT_TX, aes(x=log10(density), y = deaths_adjusted/cuml.cases_adjusted, color = vote_discrete)) +  geom_point(aes(shape=state, size = .7), stroke = 1, size = 1.5) + theme_minimal() + -->
<!-- scale_colour_brewer(palette = "RdBu", drop=F) + -->
<!--   scale_shape_manual(values=c(1, 17, 0)) + ggtitle("Idaho/Texas/Vermont: Fatality Rate vs. Logarithmic Population Density", subtitle = "Cumulative Deaths and Cases by County, as of February 2, 2022") +ylab("Fatality Rate") + xlab("Logarithmic Population Density") -->


<!-- ggplot(data_ID_VT_TX, aes(x=cuml.cases_adjusted, y = deaths_adjusted, color = vote_discrete)) + geom_point(aes(shape=state, size = .7), stroke = 1, size = 1.5) + theme_minimal() + -->
<!--   scale_colour_brewer(palette = "RdBu", drop=F) + -->
<!--   scale_shape_manual(values=c(1, 17, 0)) + ggtitle("Idaho/Texas/Vermont: County level Cumulative Cases vs. Cumulative Population Deaths", subtitle = "Cumulative Population Adjusted Cases Vs. Cumulative Population Adjusted Deaths, as of February 2, 2022") +ylab("Cumulative Population Adjusted Deaths") + xlab("Cumulative Population Adjusted Cases") -->




<!-- #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden -->
<!-- withmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_ID_VT_TX) -->
<!-- #LM without the voting percentage to compare fit -->
<!-- withoutmodel <- lm(cuml.cases_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4, data = data_ID_VT_TX) -->

<!-- #LM including cumulative cases (as of 4/11), SVI, and voting percentage for Biden -->
<!-- withmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density + pct, data = data_ID_VT_TX) -->
<!-- #LM without the voting percentage to compare fit -->
<!-- withoutmodel_deaths <- lm(deaths_adjusted ~  RPL_THEME1+ RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + density, data = data_ID_VT_TX) -->

<!-- ``` -->

<!-- ```{r, echo=FALSE, message=FALSE, warning=FALSE} -->

<!-- modeloutput <- sjPlot::tab_model(withmodel, withoutmodel, withmodel_deaths, withoutmodel_deaths, show.ci = FALSE) -->
<!-- modeloutput -->
<!-- ``` -->

<!-- # Divergence plots -->

```{r covidrisk_GWRF2, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#dyn.load("/opt/modules/climatology/gdal/3.1.4/lib/libgdal.so")

library(GWmodel)      ### GW models
library(sp)           ## Data management
library(spdep)        ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(raster)       ## spatial data
library(grid)         # plot
library(gridExtra)    # Multiple plot
library(ggplot2)      # Multiple plot
library(gtable)
library(SpatialML)    # Geographically weighted regression


rc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(divergence[divergence < 1]))
rc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(divergence[divergence >= 1]))
rampcols <- c(rc1,rc2)

pctrc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(counties_merged$pct[counties_merged$pct < .5]))
pctrc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(counties_merged$pct[counties_merged$pct >= .5]))
pctrampcols <- c(pctrc1,pctrc2)

counties_merged <- counties_merged[order(counties_merged$pct), ]
counties_merged@data <- cbind(counties_merged@data, pctrampcols)

par(mfrow=c(1, 2))
#plots scatterplot of counties vs. pct, ordered
##plot(counties_merged@data$pct, col = pctrampcols, main = "Voting")
#plots scatterplot of counties vs. divergence, ordered
counties_merged <- counties_merged[order(counties_merged$divergence), ]
counties_merged@data <- cbind(counties_merged@data, rampcols)
##plot(counties_merged@data$divergence, col = rampcols, main = "Political Divergence")


#maps
# par(mfrow=c(1, 2))
# plot(counties_merged, col=pctrampcols, border=pctrampcols)
# lines(states, add=TRUE)
# plot(counties_merged, col = rampcols, cuts = 30, border=pctrampcols)
# lines(states, add=TRUE)



#

```


```{r covidrisk_write, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}


#Write final datasets out
# 
# linear_risk_final2 <- linear_risk_final[-1]
# linear_risk_final_latter2 <- linear_risk_final_latter[-1]
# 
# linear_risk_final_delta2 <- linear_risk_final_delta[-1]
# linear_risk_final_omicron2 <- linear_risk_final_omicron[-1]
# 
# write.csv(risk_final, file ="./outputs/risk_final.csv", row.names=FALSE)
# write.csv(linear_risk_final, file ="./outputs/linear_risk_final.csv", row.names=FALSE)
# write.csv(linear_risk_final_latter2, file ="./outputs/linear_risk_final_latter.csv", row.names=FALSE)
# write.csv(linear_risk_final_delta2, file ="./outputs/linear_risk_final_delta.csv", row.names=FALSE)
# write.csv(linear_risk_final_omicron2, file ="./outputs/linear_risk_final_omicron.csv", row.names=FALSE)

```



<!-- # Part 2: Geographically Weighted Random Forest Modeling -->

<!-- Given a data frame (n x p), a tree stratifies or partitions the data based on if-else rules. These rules divide the data set into distinct, non-overlapping regions. These rules are determined by a variable's contribution to the homogeneity, or pureness, of the resultant child nodes. -->

<!-- In regression trees (where the output is predicted using the mean of observations in the terminal nodes), the splitting decision is based on minimizing RSS. The variable which leads to the greatest possible reduction in RSS is chosen as the root node. The tree splitting takes a top-down greedy approach, also known as recursive binary splitting. the term "greedy" is used because the algorithm cares to make the best split at the current step rather than saving a split for better results on future nodes. -->


<!-- Random forest is a tree-based algorithm which involves building several trees (decision trees), then combining their output to improve generalization ability of the model. The method of combining trees is known as an ensemble method. Ensembling is nothing but a combination of weak learners (individual trees) to produce a strong learner. -->

<!-- Building many decision trees results in a forest. The typical steps for a random forest model are as follows: -->
<!-- <br></br> -->
<!-- 1. First, a bagging (Bootstrap Aggregating) algorithm is used to create random samples. Given a data set D1 (n rows and p columns), it creates a new dataset (D2) by sampling n cases at random with replacement from the original data. Typically, about 1/3 of the rows from D1 are left out, known as Out of Bag(OOB) samples. -->
<!-- <br></br> -->
<!-- <br></br> -->
<!-- 2. The model then trains on D2. The OOB sample is used to determine an unbiased estimate of the error. -->
<!-- <br></br> -->
<!-- <br></br> -->
<!-- 3. Out of p columns, P << p columns are selected at each node in the data set. The P columns are selected at random. Usually, the default choice of P is p/3 for regression trees. -->
<!-- <br></br> -->
<!-- <br></br> -->
<!-- 4. Unlike a decision tree, no pruning takes place in random forest; i.e, each tree is grown fully. In decision trees, pruning is a method to avoid overfitting. Pruning means selecting a subtree that leads to the lowest test error rate. We can use cross validation to determine the test error rate of a subtree. -->
<!-- <br></br> -->
<!-- <br></br> -->
<!-- 5. Several trees are grown and the final prediction is obtained by averaging (for regression trees). Each tree is grown on a different sample of original data. Since random forest calculates OOB error internally, cross validation isn't required. -->


# Part 4: Spatial Autocorrelation

Morans I is a test of spatial autocorrelation.

\begin{displaymath}
I = \frac{n}{{{S_0}}}\frac{{\sum\limits_{i = 1}^n {\sum\limits_{j = 1}^n {{w_{ij}}\left( {{x_i} - \overline x } \right)\left( {{x_j} - \overline x } \right)} } }}{{\sum\limits_{i = 1}^n {{{\left( {{x_i} - \overline x } \right)}^2}} }}
\end{displaymath}

* N: The number of spatial units indexed by i and j
* W: The sum of all wij
* x: The variable of interest (in this instance, cumulative COVID cases, adjusted for population)
* x: The mean of x
* wij: A matrix of spatial weights

<!-- ## United States: Morans I: voting -->

```{r covidrisk_GWRF1, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
# 
# #dyn.load("/opt/modules/climatology/gdal/3.1.4/lib/libgdal.so")
# 
# #library(GWmodel)      ### GW models
# library(sp)           ## Data management
# library(spdep)        ## Spatial autocorrelation
# library(RColorBrewer) ## Visualization
# library(classInt)     ## Class intervals
# library(raster)       ## spatial data
# library(grid)         # plot
# library(gridExtra)    # Multiple plot
# library(ggplot2)      # Multiple plot
# library(gtable)
# library(SpatialML)    # Geographically weigted regression
# 
# sf::sf_use_s2(FALSE)
# nb <- poly2nb(counties_merged, queen = TRUE)
# 
# #getting the spatial nearest neighbor
# lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# 
# lw2 <- getSpPPolygonsLabptSlots(counties_merged)
# lw3 <- cbind(lw2, as.character(counties_merged$FIPS))
# colnames(lw3) <- c("long", "lat", "FIPS")
# lw3 <- data.frame(lw3)
# 
# 
# mt <- moran.test(counties_merged$pct, lw, zero.policy = TRUE)
# mt_mc <- moran.mc(counties_merged$pct, nsim=999, lw, zero.policy = TRUE)
# 
# moran.plot(counties_merged$pct, lw, zero.policy = TRUE, col=counties_merged$pctrampcols)
# 
# mt_mc
# plot(mt_mc)

#bw = gwr.sel(pct ~  + count, data = counties_merged)

# 
# mat <- nb2mat(nb, style="B", zero.policy = TRUE)
# 
# colnames(mat) <- rownames(mat)
# mat
# 
# 
# rc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(divergence[divergence < 1]))    
# rc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(divergence[divergence >= 1]))
# rampcols <- c(rc1,rc2)
# 
# pctrc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(counties_merged$pct[counties_merged$pct < .5]))    
# pctrc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(counties_merged$pct[counties_merged$pct >= .5]))
# pctrampcols <- c(pctrc1,pctrc2)
# 
# counties_merged <- counties_merged[order(counties_merged$pct), ]
# counties_merged@data <- cbind(counties_merged@data, pctrampcols)
# 
# par(mfrow=c(1, 2))
# #plots scatterplot of counties vs. pct, ordered
# plot(counties_merged@data$pct, col = pctrampcols)
# #plots scatterplot of counties vs. divergence, ordered
# counties_merged <- counties_merged[order(counties_merged$divergence), ]
# counties_merged@data <- cbind(counties_merged@data, rampcols)
# plot(counties_merged@data$divergence, col = rampcols)


#maps
# par(mfrow=c(1, 2))
# plot(counties_merged, col=pctrampcols, border=pctrampcols)
# lines(states, add=TRUE)
# plot(counties_merged, col = rampcols, cuts = 30, border=pctrampcols)
# lines(states, add=TRUE)



#

```

<!-- ## United States - Alpha Wave: Morans I: population adjusted cases -->

```{r covidrisk_GWRF2a, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
# 
# #dyn.load("/opt/modules/climatology/gdal/3.1.4/lib/libgdal.so")
# 
# #library(GWmodel)      ### GW models
# library(sp)           ## Data management
# library(spdep)        ## Spatial autocorrelation
# library(RColorBrewer) ## Visualization
# library(classInt)     ## Class intervals
# library(raster)       ## spatial data
# library(grid)         # plot
# library(gridExtra)    # Multiple plot
# library(ggplot2)      # Multiple plot
# library(gtable)
# library(SpatialML)    # Geographically weighted regression
# 
# risk_final[is.na(risk_final)] <- 0
# 
# counties_merged2 <- merge(counties_merged, risk_final, by="FIPS", duplicateGeoms = TRUE)
# counties_merged2@data[is.na(counties_merged2@data)] <- .19
# 
# sf::sf_use_s2(FALSE)
# nb <- poly2nb(counties_merged2, queen = TRUE)
# 
# #getting the spatial nearest neighbor
# lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# 
# lw2 <- getSpPPolygonsLabptSlots(counties_merged2)
# lw3 <- cbind(lw2, as.character(counties_merged2$FIPS))
# colnames(lw3) <- c("long", "lat", "FIPS")
# lw3 <- data.frame(lw3)
# 
# 
# mt <- moran.test(counties_merged2$cuml.cases_adjusted, lw, zero.policy = TRUE)
# mt_mc <- moran.mc(counties_merged2$cuml.cases_adjusted, nsim=999, lw, zero.policy = TRUE)
# 
# moran.plot(counties_merged2$cuml.cases_adjusted, lw,  zero.policy = TRUE, col=counties_merged2$pctrampcols)
# 
# #labels=as.character(counties_merged2$STATE_NAME)
# 
# 
# mt_mc
# plot(mt_mc)

#bw = gwr.sel(pct ~  + count, data = counties_merged)

# 
# mat <- nb2mat(nb, style="B", zero.policy = TRUE)
# 
# colnames(mat) <- rownames(mat)
# mat

# 
# rc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(divergence[divergence < 1]))    
# rc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(divergence[divergence >= 1]))
# rampcols <- c(rc1,rc2)
# 
# pctrc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(counties_merged$pct[counties_merged$pct < .5]))    
# pctrc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(counties_merged$pct[counties_merged$pct >= .5]))
# pctrampcols <- c(pctrc1,pctrc2)
# 
# counties_merged <- counties_merged[order(counties_merged$pct), ]
# counties_merged@data <- cbind(counties_merged@data, pctrampcols)
# 
# par(mfrow=c(1, 2))
# #plots scatterplot of counties vs. pct, ordered
# plot(counties_merged@data$pct, col = pctrampcols)
# #plots scatterplot of counties vs. divergence, ordered
# counties_merged <- counties_merged[order(counties_merged$divergence), ]
# counties_merged@data <- cbind(counties_merged@data, rampcols)
# plot(counties_merged@data$divergence, col = rampcols)


#maps
# par(mfrow=c(1, 2))
# plot(counties_merged, col=pctrampcols, border=pctrampcols)
# lines(states, add=TRUE)
# plot(counties_merged, col = rampcols, cuts = 30, border=pctrampcols)
# lines(states, add=TRUE)



#

```



## Figure S76: Morans I results: United States - Alpha Wave

```{r covidrisk_GWRF3, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#dyn.load("/opt/modules/climatology/gdal/3.1.4/lib/libgdal.so")

#library(GWmodel)      ### GW models
library(sp)           ## Data management
library(spdep)        ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(raster)       ## spatial data
library(grid)         # plot
library(gridExtra)    # Multiple plot
library(ggplot2)      # Multiple plot
library(gtable)
library(SpatialML)    # Geographically weigted regression

linear_risk_final[is.na(linear_risk_final)] <- 0

counties_merged2 <- merge(counties_merged, linear_risk_final, by="FIPS", duplicateGeoms = TRUE)
counties_merged2@data[is.na(counties_merged2@data)] <- 0

sf::sf_use_s2(FALSE)
nb <- poly2nb(counties_merged2, queen = TRUE)

#getting the spatial nearest neighbor
lw <- nb2listw(nb, style="W", zero.policy=TRUE)

lw2 <- getSpPPolygonsLabptSlots(counties_merged2)
lw3 <- cbind(lw2, as.character(counties_merged2$FIPS))
colnames(lw3) <- c("long", "lat", "FIPS")
lw3 <- data.frame(lw3)


mt <- moran.test(counties_merged2$deaths_adjusted, lw, zero.policy = TRUE)
mt_mc <- moran.mc(counties_merged2$deaths_adjusted, nsim=999, lw, zero.policy = TRUE)

moran.plot(counties_merged2$deaths_adjusted, lw, zero.policy = TRUE, col=counties_merged2$pctrampcols, pch = 19, labels = FALSE, cex = .6, xlab = "Cumulative Deaths adjusted for population", ylab = "Spatially Lagged Values")
#labels=as.character(counties_merged2$STATE_NAME)

mt_mc
plot(mt_mc)

#bw = gwr.sel(pct ~  + count, data = counties_merged)

# 
# mat <- nb2mat(nb, style="B", zero.policy = TRUE)
# 
# colnames(mat) <- rownames(mat)
# mat
# 
# 
# rc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(divergence[divergence < 1]))    
# rc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(divergence[divergence >= 1]))
# rampcols <- c(rc1,rc2)
# 
# pctrc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(counties_merged$pct[counties_merged$pct < .5]))    
# pctrc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(counties_merged$pct[counties_merged$pct >= .5]))
# pctrampcols <- c(pctrc1,pctrc2)
# 
# counties_merged <- counties_merged[order(counties_merged$pct), ]
# counties_merged@data <- cbind(counties_merged@data, pctrampcols)
# 
# par(mfrow=c(1, 2))
# #plots scatterplot of counties vs. pct, ordered
# plot(counties_merged@data$pct, col = pctrampcols)
# #plots scatterplot of counties vs. divergence, ordered
# counties_merged <- counties_merged[order(counties_merged$divergence), ]
# counties_merged@data <- cbind(counties_merged@data, rampcols)
# plot(counties_merged@data$divergence, col = rampcols)


#maps
# par(mfrow=c(1, 2))
# plot(counties_merged, col=pctrampcols, border=pctrampcols)
# lines(states, add=TRUE)
# plot(counties_merged, col = rampcols, cuts = 30, border=pctrampcols)
# lines(states, add=TRUE)
# 
# mp$pct <- counties_merged2$pct
# 
# if (require(ggplot2, quietly=TRUE)) {
#   xname <- attr(mp, "xname")
#   ggplot(mp, aes(x=x, y=wx)) + geom_point(aes(colour = pct), shape = 19) + 
#     scale_colour_gradient2(pctrampcols) +
#     geom_smooth(formula=y ~ x, method="lm") + 
#     geom_hline(yintercept=mean(mp$wx), lty=2) + 
#     geom_vline(xintercept=mean(mp$x), lty=2) + theme_minimal() + 
#     geom_point(data=mp[mp$is_inf,], aes(x=x, y=wx, colour = pct), shape=19, cex = 1.5) +
#     ylab("Spatially lagged values") +
#     xlab("County deaths adjusted for population")
# }


#

```

## Figure S77: Morans I results: United States - Delta Wave

```{r covidrisk_GWRF4, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#dyn.load("/opt/modules/climatology/gdal/3.1.4/lib/libgdal.so")

#library(GWmodel)      ### GW models
library(sp)           ## Data management
library(spdep)        ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(raster)       ## spatial data
library(grid)         # plot
library(gridExtra)    # Multiple plot
library(ggplot2)      # Multiple plot
library(gtable)
library(SpatialML)    # Geographically weigted regression

linear_risk_final_delta[is.na(linear_risk_final_delta)] <- 0

counties_merged2 <- merge(counties_merged, linear_risk_final_delta, by="FIPS", duplicateGeoms = TRUE)
counties_merged2@data[is.na(counties_merged2@data)] <- 0

sf::sf_use_s2(FALSE)
nb <- poly2nb(counties_merged2, queen = TRUE)

#getting the spatial nearest neighbor
lw <- nb2listw(nb, style="W", zero.policy=TRUE)

lw2 <- getSpPPolygonsLabptSlots(counties_merged2)
lw3 <- cbind(lw2, as.character(counties_merged2$FIPS))
colnames(lw3) <- c("long", "lat", "FIPS")
lw3 <- data.frame(lw3)


mt <- moran.test(counties_merged2$deaths_adjusted, lw, zero.policy = TRUE)
mt_mc <- moran.mc(counties_merged2$deaths_adjusted, nsim=999, lw, zero.policy = TRUE)

moran.plot(counties_merged2$deaths_adjusted, lw, zero.policy = TRUE, col=counties_merged2$pctrampcols, pch = 19, labels = FALSE, cex = .6, xlab = "Cumulative Deaths adjusted for population", ylab = "Spatially Lagged Values")

#labels=as.character(counties_merged2$STATE_NAME)

mt_mc
plot(mt_mc)

#bw = gwr.sel(pct ~  + count, data = counties_merged)

# 
# mat <- nb2mat(nb, style="B", zero.policy = TRUE)
# 
# colnames(mat) <- rownames(mat)
# mat
# 
# 
# rc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(divergence[divergence < 1]))    
# rc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(divergence[divergence >= 1]))
# rampcols <- c(rc1,rc2)
# 
# pctrc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(counties_merged$pct[counties_merged$pct < .5]))    
# pctrc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(counties_merged$pct[counties_merged$pct >= .5]))
# pctrampcols <- c(pctrc1,pctrc2)
# 
# counties_merged <- counties_merged[order(counties_merged$pct), ]
# counties_merged@data <- cbind(counties_merged@data, pctrampcols)
# 
# par(mfrow=c(1, 2))
# #plots scatterplot of counties vs. pct, ordered
# plot(counties_merged@data$pct, col = pctrampcols)
# #plots scatterplot of counties vs. divergence, ordered
# counties_merged <- counties_merged[order(counties_merged$divergence), ]
# counties_merged@data <- cbind(counties_merged@data, rampcols)
# plot(counties_merged@data$divergence, col = rampcols)


#maps
# par(mfrow=c(1, 2))
# plot(counties_merged, col=pctrampcols, border=pctrampcols)
# lines(states, add=TRUE)
# plot(counties_merged, col = rampcols, cuts = 30, border=pctrampcols)
# lines(states, add=TRUE)



#

```


## Figure S78: Morans I results: United States - Omicron Wave

```{r covidrisk_GWRF, echo=FALSE, results='hide',message=FALSE, warning=FALSE}

#dyn.load("/opt/modules/climatology/gdal/3.1.4/lib/libgdal.so")

#library(GWmodel)      ### GW models
library(sp)           ## Data management
library(spdep)        ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(raster)       ## spatial data
library(grid)         # plot
library(gridExtra)    # Multiple plot
library(ggplot2)      # Multiple plot
library(gtable)
library(SpatialML)    # Geographically weigted regression

linear_risk_final_omicron[is.na(linear_risk_final_omicron)] <- 0

counties_merged2 <- merge(counties_merged, linear_risk_final_omicron, by="FIPS", duplicateGeoms = TRUE)
counties_merged2@data[is.na(counties_merged2@data)] <- 0

sf::sf_use_s2(FALSE)
nb <- poly2nb(counties_merged2, queen = TRUE)

#getting the spatial nearest neighbor
lw <- nb2listw(nb, style="W", zero.policy=TRUE)

lw2 <- getSpPPolygonsLabptSlots(counties_merged2)
lw3 <- cbind(lw2, as.character(counties_merged2$FIPS))
colnames(lw3) <- c("long", "lat", "FIPS")
lw3 <- data.frame(lw3)


mt <- moran.test(counties_merged2$deaths_adjusted, lw, zero.policy = TRUE)
mt_mc <- moran.mc(counties_merged2$deaths_adjusted, nsim=999, lw, zero.policy = TRUE)

moran.plot(counties_merged2$deaths_adjusted, lw, zero.policy = TRUE, col=counties_merged2$pctrampcols, pch = 19, labels = FALSE, cex = .6, xlab = "Cumulative Deaths adjusted for population", ylab = "Spatially Lagged Values")
#labels=as.character(counties_merged2$STATE_NAME)

mt_mc
plot(mt_mc)

#bw = gwr.sel(pct ~  + count, data = counties_merged)

# 
# mat <- nb2mat(nb, style="B", zero.policy = TRUE)
# 
# colnames(mat) <- rownames(mat)
# mat
# 
# 
# rc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(divergence[divergence < 1]))    
# rc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(divergence[divergence >= 1]))
# rampcols <- c(rc1,rc2)
# 
# pctrc1 <- colorRampPalette(colors = c("darkred", "red", "pink", "white"))(length(counties_merged$pct[counties_merged$pct < .5]))    
# pctrc2 <- colorRampPalette(colors = c("white", "lightblue", "blue", "darkblue"))(length(counties_merged$pct[counties_merged$pct >= .5]))
# pctrampcols <- c(pctrc1,pctrc2)
# 
# counties_merged <- counties_merged[order(counties_merged$pct), ]
# counties_merged@data <- cbind(counties_merged@data, pctrampcols)
# 
# par(mfrow=c(1, 2))
# #plots scatterplot of counties vs. pct, ordered
# plot(counties_merged@data$pct, col = pctrampcols)
# #plots scatterplot of counties vs. divergence, ordered
# counties_merged <- counties_merged[order(counties_merged$divergence), ]
# counties_merged@data <- cbind(counties_merged@data, rampcols)
# plot(counties_merged@data$divergence, col = rampcols)


#maps
# par(mfrow=c(1, 2))
# plot(counties_merged, col=pctrampcols, border=pctrampcols)
# lines(states, add=TRUE)
# plot(counties_merged, col = rampcols, cuts = 30, border=pctrampcols)
# lines(states, add=TRUE)



#

```


<!-- # Part 3: Geographically Weighted Random Forest (GWRF) -->

<!-- Geographical Weighted Random Forest (GWRF) is a spatial analysis method using a local version of the Random Forest Regression Model. It allows for the investigation of spatial non-stationarity, and the relationship between a dependent and  -->
<!-- a set of independent variables. The latter is possible by fitting a sub-model for each observation in space, taking into account the neighboring observations. This technique adopts the idea of the Geographically Weighted Regression Kalogirou (2003). The main difference between a tradition (linear) GWR and GRF is that we can model non-stationarity  -->
<!-- coupled with a flexible non-linear model which is very hard to overfit due to its bootstrapping nature, thus relaxing the assumptions of traditional Gaussian statistics. Essentially it was designed to be a bridge between machine learning and geographical models, combining inferential and explanatory power. Additionally, it is suited for datasets with  -->
<!-- numerous predictors, due to the robust nature of the random forest algorithm with regards to high dimensionality. -->

<!-- Here we run our GWRF, and generate localized model fit and feature importance (IncMSE).  The feature importance algorithmic process is: -->

<!-- 1. Compute model MSE -->
<!-- <br></br> -->
<!-- <br></br> -->
<!-- 2. For each variable in the model: -->
<!-- <br></br> -->
<!-- <br></br> -->
<!-- a. Permute variable -->
<!-- b. Calculate new model MSE according to variable permutation -->
<!-- c. Take the difference between model MSE and new model MSE -->
<!-- <br></br> -->
<!-- <br></br> -->
<!-- 3. Collect the results in a list -->

```{r covidrisk_read, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}

#read datasets from initial EDA R

library(maptools)
library(stringr)
library(dplyr)
library(lmerTest)
library(parallel)
library(doSNOW)
library(plyr)
library(ggplot2)
library(sjPlot)
library(RcppRoll)
library(spdep)

linear_risk_final2 <- read.csv("./outputs/linear_risk_final.csv")
linear_risk_final_latter2 <- read.csv("./outputs/linear_risk_final_latter.csv")
linear_risk_final_delta2 <- read.csv("./outputs/linear_risk_final_delta.csv")
linear_risk_final_omicron2 <- read.csv("./outputs/linear_risk_final_omicron.csv")
risk_final <- read.csv("./outputs/risk_final.csv")

linear_risk_final2 <- linear_risk_final2[!duplicated(linear_risk_final2), ]
linear_risk_final_latter2 <- linear_risk_final_latter2[!duplicated(linear_risk_final_latter2), ]
linear_risk_final_delta2 <- linear_risk_final_delta2[!duplicated(linear_risk_final_delta2), ]
linear_risk_final_omicron2 <- linear_risk_final_omicron2[!duplicated(linear_risk_final_omicron2), ]


linear_risk_final <- linear_risk_final2
linear_risk_final_latter <- linear_risk_final2
linear_risk_final_delta <- linear_risk_final_delta2
linear_risk_final_omicron <- linear_risk_final_omicron2


  states <- readShapePoly('./data/states/states.shp',
                          proj4string=CRS
                          ("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
  projection = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")

states <- subset(states, STATE_NAME != "Alaska")
states <- subset(states, STATE_NAME != "Hawaii")
states <- subset(states, STATE_NAME != "District of Columbia")
  #states <- spTransform(states, CRS("+proj=utm +zone=9 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))



#policy describes legislature and governor balance. 1 - all three liberal, 2 - all three conservative, 3 - split
policy <- c(1,3,1,2,2,2,3,2,3,3,1,3,2,3,2,1,3,1,1,1,2,1,2,1,2,1,1,2,3,1,3,3,1,2,2,2,3,2,2,1,2,2,2,2,2,3,2,3)

# 
# states$STATE_NAME <- toupper(states$STATE_NAME)
# voting_state <- merge(states, new_voting_state_combined, by="STATE_NAME")
# my.col <- colorRampPalette(c(rgb(0,0,1,1), rgb(0,0,1,0)), alpha = TRUE)(48)
# my.col <- colorRampPalette(brewer.pal(11, "RdBu"))(diff(range(new_voting_state_combined$pct)))
# 
# voting_state$vote_groups <- cut(voting_state$lib_pct, breaks = c(0,.50, 1))
# levels(voting_state$vote_groups) <- c("Blue", "Red")
# voting_state$policy <- policy

states$policy <- policy
states$policy <- as.factor(states$policy)


  counties <- readShapePoly('./data/counties/UScounties_conus.shp',
                            proj4string=CRS
                            ("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
  projection = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
  
  #counties <- spTransform(counties, CRS("+proj=utm +zone=9 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))

  
  
  
new_voting <- read.csv("./data/voting_nationwide_liberal.csv")
new_voting$FIPS <- str_pad(new_voting$FIPS, 5, pad = "0")

  
  #counties  <- subset(counties, STATE_NAME == "California" | STATE_NAME == "Arizona" |  STATE_NAME == "Nevada")
  
  new_voting_removed_na <- new_voting[!(is.na(new_voting$pct)), ]

  counties_merged <- merge(counties, new_voting, by="FIPS", duplicateGeoms = TRUE)
  
  #fixing NA values due to spatial data frame having empty counties due to lack of voting data.  Minimal counties (< 20)
  naIndex <- which(is.na(counties_merged$pct))
  counties_merged[naIndex, "pct"] <- 0
  
  
  #counties@data <- counties@data[-c(36,690,710,882),]
  
sf::sf_use_s2(FALSE)
nb <- poly2nb(counties_merged, queen = TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)

Inc.lag <- lag.listw(lw, counties_merged$pct)
divergence <- counties_merged$pct/Inc.lag
divergence[which(!is.finite(divergence))] <- 0

counties_merged <- cbind(counties_merged, Inc.lag, divergence)

colnames(counties_merged@data)[13] <- c("adjacent_ideology")
colnames(counties_merged@data)[14] <- c("divergence")

#library(GWmodel)      ### GW models
library(sp)           ## Data management
library(spdep)        ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(raster)       ## spatial data
library(grid)         # plot
library(gridExtra)    # Multiple plot
library(ggplot2)      # Multiple plot
library(gtable)
library(SpatialML)    # Geographically weigted regression

risk_final[is.na(risk_final)] <- 0

risk_final$FIPS <- str_pad(risk_final$FIPS, 5, pad = "0")

counties_merged2 <- merge(counties_merged, risk_final, by="FIPS", duplicateGeoms = TRUE)
counties_merged2@data[is.na(counties_merged2@data)] <- 0

sf::sf_use_s2(FALSE)
nb <- poly2nb(counties_merged2, queen = TRUE)

#getting the spatial nearest neighbor
lw <- nb2listw(nb, style="W", zero.policy=TRUE)

lw2 <- getSpPPolygonsLabptSlots(counties_merged2)
lw3 <- cbind(lw2, as.character(counties_merged2$FIPS))
colnames(lw3) <- c("long", "lat", "FIPS")
lw3 <- data.frame(lw3)






library(gridExtra)

linear_risk_final$FIPS <- str_pad(linear_risk_final$FIPS, 5, pad = "0")


data_counties <- merge(counties_merged, linear_risk_final, by="FIPS", duplicateGeoms = TRUE)

data_counties$RPL_THEME1[data_counties$NAME == "Rio Arriba"] <- .8424
#data_counties[2694,]<- data_counties[46,]$cuml.cases_adjusted/2
data_counties <- data_counties[order(-data_counties$cuml.cases_adjusted), ]
data_counties@data[1,27] <- .25
data_counties@data[2,27] <- .25
data_counties@data[3,27] <- .25
data_counties@data[4,27] <- .25

data_counties@data$density <- log(data_counties@data$density)
data_counties@data$divergence.x <- log(data_counties@data$divergence.x)

data_counties_deaths_age65_ratio <- data_counties[order(-data_counties$deaths_age65_ratio), ]
data_counties_deaths_age65_ratio@data[1,30] <- .055


levels(data_counties$policy) <- c("D", "R", "Split")

linear_risk_final_latter$FIPS <- str_pad(linear_risk_final_latter$FIPS, 5, pad = "0")

data_counties2 <- merge(counties_merged, linear_risk_final_latter, by="FIPS", duplicateGeoms = TRUE)


data_counties2$RPL_THEME1[data_counties2$NAME == "Rio Arriba"] <- .8424
#data_counties[2694,]<- data_counties[46,]$cuml.cases_adjusted/2
data_counties2 <- data_counties2[order(-data_counties2$cuml.cases_adjusted), ]
data_counties2@data[1,27] <- .25
data_counties2@data[2,27] <- .25
data_counties2@data[3,27] <- .25
data_counties2@data[4,27] <- .25

data_counties2@data$density <- log(data_counties2@data$density)
data_counties2@data$divergence.x <- log(data_counties2@data$divergence.x)

data_counties2 <- data_counties2[order(-data_counties2$deaths_adjusted), ]
data_counties2@data[1,26] <- .007
data_counties2@data[2,26] <- .007

linear_risk_final_delta$FIPS <- str_pad(linear_risk_final_delta$FIPS, 5, pad = "0")

data_counties3 <- merge(counties_merged, linear_risk_final_delta, by="FIPS", duplicateGeoms = TRUE)


data_counties3$RPL_THEME1[data_counties3$NAME == "Rio Arriba"] <- .8424
#data_counties[2694,]<- data_counties[46,]$cuml.cases_adjusted/2
data_counties3 <- data_counties3[order(-data_counties3$cuml.cases_adjusted), ]
data_counties3@data[1,27] <- .25
data_counties3@data[2,27] <- .25
data_counties3@data[3,27] <- .25
data_counties3@data[4,27] <- .25

data_counties3@data$density <- log(data_counties3@data$density)
data_counties3@data$divergence.x <- log(data_counties3@data$divergence.x)

linear_risk_final_omicron$FIPS <- str_pad(linear_risk_final_omicron$FIPS, 5, pad = "0")


data_counties4 <- merge(counties_merged, linear_risk_final_omicron, by="FIPS", duplicateGeoms = TRUE)

data_counties4$RPL_THEME1[data_counties4$NAME == "Rio Arriba"] <- .8424
#data_counties[2694,]<- data_counties[46,]$cuml.cases_adjusted/2
data_counties4 <- data_counties4[order(-data_counties4$cuml.cases_adjusted), ]
data_counties4@data[1,27] <- .25
data_counties4@data[2,27] <- .25
data_counties4@data[3,27] <- .25
data_counties4@data[4,27] <- .25

data_counties4@data$density <- log(data_counties4@data$density)
data_counties4@data$divergence.x <- log(data_counties4@data$divergence.x)



data_counties_deaths_age65_ratio2 <- data_counties2[order(-data_counties2$deaths_age65_ratio), ]
data_counties_deaths_age65_ratio2@data[1,30] <- .03
data_counties_deaths_age65_ratio2@data[2,30] <- .03

#data_counties_deaths_age65_ratio2$deaths_age65_ratio[data_counties_deaths_age65_ratio2$FIPS == "48301"] <- .03
# 
# data_counties@data$divergence.y <- data_counties@data$divergence.y - 1
# data_counties2@data$divergence.y <- data_counties2@data$divergence.y - 1



```

<!-- ## GWR - Population Adjusted Cumulative Cases -->

```{r covidrisk_GWRF_cases, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}
# library(caret)
# library(Metrics)
# 
# 
# linear_risk_final2 <- linear_risk_final[-1]
# linear_risk_final_latter2 <- linear_risk_final_latter[-1]
# 
# #fix Hardin county voting percentage
# rankings <- read.csv("./data/countyrankings.csv")
# colnames(rankings) <- c("FIPS", "State", "County", "Obesity", "FEI", "Physically_Inactive", "Exercise_Access", "Excessive_Drinking")
# rankings$FIPS <- str_pad(rankings$FIPS, 5, pad = "0")
# 
# # # 
# #risk_final_test <- merge(risk_final_latter, rankings, by="FIPS")
# risk_final_test <- linear_risk_final2
# 
# 
# 
# 
# 
# risk_final_test[598,11] <- .50
# lw3 <- lw3[!duplicated(lw3[c('FIPS')]), ]
# #risk_final3 <- merge(risk_final, lw3[lw3$FIPS == unique(lw3$FIPS),], by="FIPS", all=TRUE)
# 
# risk_final_test[is.na(risk_final_test)] <- 0
# 
# risk_final_test <- risk_final_test[risk_final_test$FIPS != 48301, ]
# 
# 
# set.seed(1234)
# split_rows = createDataPartition(risk_final_test$cuml.cases_adjusted, p = 0.8, list = FALSE, times = 1)
# dt_train = risk_final_test[split_rows,] 
# dt_test = risk_final_test[-split_rows,] 
# # dt_test <- rbind(dt_test[1, ] , dt_test)
# #     dt_test <- dt_test[-1,]
# 
# risk_final_original <- merge(risk_final_test, lw3, by="FIPS")
# risk_final3 <- merge(dt_train, lw3,  by="FIPS")
# risk_final3_test <- merge(dt_test, lw3,  by="FIPS")
# 
# lw4_original <- data.frame(risk_final_original)
# lw4 <- data.frame(risk_final3)
# 
# lw4[,29] <- as.numeric(lw4[,29])
# lw4[,30] <- as.numeric(lw4[,30])
# 
# lw4_test <- data.frame(risk_final3_test)
# lw4_test[,29] <- as.numeric(lw4_test[,29])
# lw4_test[,30] <- as.numeric(lw4_test[,30])
# # lw4_test[is.na(lw4_test)] <- 0
# 
# ### Cross validation of bandwidth for Geographically weighted RF regression
# 
# #The local model of random forest uses same syntax used in the randomForest function of the R package randomForest. This is a string that is passed to the sub-models randomForest function. For more details look at the class formula.
# 
# #fix Hardin county voting percentage
# 
# #risk_final2 <- na.omit(risk_final)
# #which(is.na(risk_final), arr.ind=TRUE)
# dt_train[is.na(dt_train)] <- 0
# 
# #risk_final_test <- risk_final_test[risk_final_test$cuml.cases_adjusted != 0, ]
# risk_final2 <- risk_final
# 
# Coord_original <- lw4_original[ ,c(30,29)]
# Coords<-lw4[ ,c(30,29)]
# colnames(Coords) <- c("X","Y")
# 
# Coords_test <- lw4_test[ ,c(30,29)]
# colnames(Coords_test) <- c("X","Y")
# 
# # risk_final_latter <- merge(risk_final_latter, rankings, by="FIPS")
# 
# lw4 <- cbind(lw4$lat, lw4$long, lw4$cuml.cases_adjusted, lw4$RPL_THEME1,lw4$RPL_THEME2, lw4$RPL_THEME3,lw4$RPL_THEME4, lw4$divergence, lw4$adjacent_ideology,   lw4$pct.x, lw4$Series_Complete_Pop_Pct, lw4$density, lw4$policy, lw4$Obesity, lw4$FEI, lw4$Physically_Inactive, lw4$Exercise_Access, lw4$Excessive_Drinking, lw4$Age_over_65 )
# 
# lw4 <- as.data.frame(lw4)
# 
# # colnames(lw4) <- c("lat", "long", "cuml.cases_adjusted", "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "policy" , "Obesity" , "FEI" , "Physically_Inactive" , "Exercise_Access" , "Excessive_Drinking")
# 
# colnames(lw4) <- c("X", "Y", "cuml.cases_adjusted", "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "adjacent_ideology", "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "policy" , "Obesity" , "FEI" , "Physically_Inactive" , "Exercise_Access" , "Excessive_Drinking", "Age_over_65")
# 
# output_MAE <- data.frame(matrix(ncol = 5, nrow = 27))
# output_RMSE <- data.frame(matrix(ncol = 5, nrow = 27))
# #bandwidth hypertuning
# risk_final_test$policy <- as.numeric(risk_final_test$policy)
# lw4 <- lw4 %>% mutate_if(is.character,as.numeric)
# for (i in 1:30) {
# grf.model <- grf(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + divergence + pct.x + Series_Complete_Pop_Pct + density + policy + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65,
#                  dframe=lw4,
#                  bw=i,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coords)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations
# 
# lw4_test2 <- cbind(lw4_test$lat, lw4_test$long, lw4_test$RPL_THEME1,lw4_test$RPL_THEME2, lw4_test$RPL_THEME3,lw4_test$RPL_THEME4, lw4_test$adjacent_ideology, lw4_test$divergence, lw4_test$pct.x, lw4_test$Series_Complete_Pop_Pct, lw4_test$density, lw4_test$policy, lw4_test$Obesity, lw4_test$FEI, lw4_test$Physically_Inactive, lw4_test$Exercise_Access, lw4_test$Excessive_Drinking, lw4_test$Age_over_65 )
# colnames(lw4_test2) <- c("X", "Y", "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "adjacent_ideology", "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "policy" , "Obesity" , "FEI" , "Physically_Inactive" , "Exercise_Access" , "Excessive_Drinking", "Age_over_65")
# 
# lw4_test2 <- as.data.frame(lw4_test2)
# lw4_test2 <- lw4_test2 %>% mutate_if(is.character,as.numeric)
# 
# predict_grf1 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=0, global.w=1)
# model_predict_grf1 <- lm(predict_grf1 ~ lw4_test$cuml.cases_adjusted)
# model_predict_grf1_RMSE <- sqrt(mean(model_predict_grf1$residuals^2))
# model_predict_grf1_MAE <- mae(predict_grf1, lw4_test$cuml.cases_adjusted)
# 
# predict_grf2 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.25, global.w=.75)
# model_predict_grf2 <- lm(predict_grf2 ~ lw4_test$cuml.cases_adjusted)
# model_predict_grf2_RMSE <- sqrt(mean(model_predict_grf2$residuals^2))
# model_predict_grf2_MAE <- mae(predict_grf2, lw4_test$cuml.cases_adjusted)
# 
# predict_grf3 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.5, global.w=.5)
# model_predict_grf3 <- lm(predict_grf3 ~ lw4_test$cuml.cases_adjusted)
# model_predict_grf3_RMSE <- sqrt(mean(model_predict_grf3$residuals^2))
# model_predict_grf3_MAE <- mae(predict_grf3, lw4_test$cuml.cases_adjusted)
# 
# predict_grf4 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.75, global.w=.25)
# model_predict_grf4 <- lm(predict_grf4 ~ lw4_test$cuml.cases_adjusted)
# model_predict_grf4_RMSE <- sqrt(mean(model_predict_grf4$residuals^2))
# model_predict_grf4_MAE <- mae(predict_grf4, lw4_test$cuml.cases_adjusted)
# 
# predict_grf5 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=1, global.w=0)
# model_predict_grf5 <- lm(predict_grf5 ~ lw4_test$cuml.cases_adjusted)
# model_predict_grf5_RMSE <- sqrt(mean(model_predict_grf5$residuals^2))
# model_predict_grf5_MAE <- mae(predict_grf5, lw4_test$cuml.cases_adjusted)
# 
# output_RMSE[i,] <- c(model_predict_grf1_RMSE, model_predict_grf2_RMSE, model_predict_grf3_RMSE, model_predict_grf4_RMSE, model_predict_grf5_RMSE)
# output_MAE[i,] <- c(model_predict_grf1_MAE, model_predict_grf2_MAE, model_predict_grf3_MAE, model_predict_grf4_MAE, model_predict_grf5_MAE)
# 
# }
# 
# bw2 <- which.min(output_RMSE[3:30,2])
# bw3 <- which.min(output_RMSE[3:30,3])
# bw4 <- which.min(output_RMSE[3:30,4])
# bw5 <- which.min(output_RMSE[3:30,5])
# bw_final <- c(bw2,bw3,bw4,bw5)+2
# bw <- min(bw_final)
# 
# 
# 
# grf.model <- grf(cuml.cases_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + divergence + pct.x + Series_Complete_Pop_Pct + density + policy + Obesity + FEI + Physically_Inactive + Exercise_Access + Excessive_Drinking + Age_over_65,
#                  dframe= risk_final_test,
#                  bw=bw,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coord_original)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations
# 
# #predict.grf(grf.model, risk_final_test2, x.var.name="lat", y.var.name="long", local.w=1, global.w=0)
# 
# ### Global Variable Importance
# 
# 
# A <- grf.model$Global.Model$importance 
# 
# ### Global Mean MSE of 500 tree
# 
# B <- mean(grf.model$Global.Model$mse)
# 
# ### Global Mean R2 of 500 tree
# 
# C <- mean(grf.model$Global.Model$rsq)
# 
# ### Local Model Summary and goodness of fit statistics (training and OOB) 
# 
# D <- grf.model$LocalModelSummary
# 
# ### Local feature importance (IncMSE)
# 
# 
# ### Local feature importance (IncMSE)
# grf.model$Local.Pc.IncMSE$FIPS <- risk_final_test$FIPS
# risk_final4 <- merge(counties_merged, grf.model$Local.Pc.IncMSE, by="FIPS", duplicateGeoms = T)
# 
# 
# #### Plot  local feature importance (IncMSE)
# 
# polys<- list("sp.lines", as(states, "SpatialLines"), col="grey", lwd=.8,lty=1)
# col.palette<-colorRampPalette(c("blue",  "sky blue", "green","yellow", "red"),space="rgb",interpolate = "linear")
# 
# 
# 
# col.palette.t<-colorRampPalette(c("lightseagreen","lightsteelblue1", "moccasin","hotpink", "red"),space="rgb",interpolate = "linear") 
# 
# RPL_THEME1<-spplot(risk_final4,"RPL_THEME1", main = "Socioeconomic", 
#              sp.layout=list(polys),
#              col="transparent",
#              col.regions=col.palette.t(100))
# 
# RPL_THEME2<-spplot(risk_final4,"RPL_THEME2", main = "Household Composition & Disability", 
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# RPL_THEME3<-spplot(risk_final4,"RPL_THEME3", main = "Minority Status & Language", 
#              sp.layout=list(polys),
#              col="transparent",
#              col.regions=col.palette.t(100))
# 
# RPL_THEME4<-spplot(risk_final4,"RPL_THEME4", main = "Housing Type & Transportation", 
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# divergence<-spplot(risk_final4,"divergence.y", main = "Political Divergence", 
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# voting <-spplot(risk_final4,"pct.x", main = "Democratic Voting Pct", 
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# vaccination <-spplot(risk_final4,"Series_Complete_Pop_Pct", main = "Vaccination Rate", 
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# density <-spplot(risk_final4,"density", main = "Population Density", 
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# obesity <-spplot(risk_final4,"Obesity", main = "Obesity",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# #
# fei <-spplot(risk_final4,"FEI", main = "Food Environmental Index",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# physically_inactive <-spplot(risk_final4,"Physically_Inactive", main = "Physical Inactivity",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# exercise_access <-spplot(risk_final4,"Exercise_Access", main = "Access to Exercise Opportunities",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# excessive_drinking <-spplot(risk_final4,"Excessive_Drinking", main = "Excessive Drinking",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# age_over_65 <-spplot(risk_final4,"Age_over_65", main = "Age over 65",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# # 
# #plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, policy, vaccination, density, nrow = 2, ncol=5, heights = c(30,6), top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))
# 
# plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, vaccination, density,obesity,fei,physically_inactive,exercise_access,excessive_drinking, age_over_65, ncol=1, top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))
# 
# #plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence,ncol=5, heights = c(30,6), top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))
# 
# plotrf
# 
# #add dependent back into model output for plotting and comparison
# 
# ### Local goodness of fit 
# 
# #risk_final4@data$loc_R2=grf.model$LGofFit$LM_Rsq100
# 
# grf.model$LGofFit$FIPS <- risk_final_test$FIPS
# # risk_final5 <- merge(counties_merged, grf.model$LGofFit, by="FIPS", duplicateGeoms = T)
# # 
# # risk_final5 <- merge(risk_final5, risk_final_test, by = "FIPS", duplicateGeoms = T )
# # 
# 
# grf.model$LGofFit$FIPS <- risk_final_test$FIPS
# risk_final5 <- merge(data_counties, grf.model$LGofFit, by="FIPS", duplicateGeoms = T)
# 
# 
# myPaletteRes <- colorRampPalette(c("lightseagreen","lightsteelblue1", "moccasin","hotpink", "red"))
# 
# 
# 
# local_r2<-spplot(risk_final5,"LM_Rsq100", main = paste("Local R2 (%) - Bandwidth = ", bw, sep=""), 
#                  sp.layout=list(polys),
#                  col="transparent",
#                  col.regions=myPaletteRes(100))
# #windows(width=4, height=3.5)
# #tiff( file="FIG_GWRP_Std_Residuals.tif", 
# #      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
# #      restoreConsole = T,bg="transparent")
# print(local_r2)
# 
# #residuals
# 
# local_r2_residuals<-spplot(risk_final5,"LM_MSR", main = paste("Mean Square due to Regression - Bandwidth = ", bw, sep=""), 
#                  sp.layout=list(polys),
#                  col="transparent",
#                  col.regions=myPaletteRes(100))
# #windows(width=4, height=3.5)
# #tiff( file="FIG_GWRP_Std_Residuals.tif", 
# #      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
# #      restoreConsole = T,bg="transparent")
# print(local_r2_residuals)
# 
# local_r2_residuals<-spplot(risk_final5,"LM_yfitOOB", main = paste("Out of Bag Prediction - Bandwidth = ", bw, sep=""), 
#                  sp.layout=list(polys),
#                  col="transparent",
#                  col.regions=myPaletteRes(100), at=seq(0, .46, length.out=100))
# #windows(width=4, height=3.5)
# #tiff( file="FIG_GWRP_Std_Residuals.tif", 
# #      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
# #      restoreConsole = T,bg="transparent")
# print(local_r2_residuals)
# 
# 
# risk_final5@data[2,45] <- .38
# 
# local_r2_residuals<-spplot(risk_final5,"LM_yfitPred", main = paste("Global Prediction - Bandwidth = ", bw, sep=""), 
#                  sp.layout=list(polys),
#                  col="transparent",
#                  col.regions=myPaletteRes(100), at=seq(0, .46, length.out=100))
# #windows(width=4, height=3.5)
# #tiff( file="FIG_GWRP_Std_Residuals.tif", 
# #      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
# #      restoreConsole = T,bg="transparent")
# print(local_r2_residuals)
# 
# 
# local_r2_residuals<-spplot(risk_final5,"cuml.cases_adjusted", main = paste("Cumulative Cases - Bandwidth = ", bw, sep=""), 
#                  sp.layout=list(polys),
#                  col="transparent",
#                  col.regions=myPaletteRes(100), at=seq(0, .46, length.out=100))
# #windows(width=4, height=3.5)
# #tiff( file="FIG_GWRP_Std_Residuals.tif", 
# #      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
# #      restoreConsole = T,bg="transparent")
# print(local_r2_residuals)
# 
# matplot(output_RMSE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "RMSE", main = "Cumulative Cases RMSE: Bandwidth x Weighting Models")
# legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)
# matplot(output_MAE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "MAE", main = "Cumulative Cases MAE: Bandwidth x Weighting Models")
# legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)
# 
# ###predict on Test


```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# print(D)

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# #Yhat vs residuals
# 
# ggplot(risk_final5@data, aes(x=risk_final5@data$LM_yfitPred, y=risk_final5@data$LM_ResPred)) + geom_point() + geom_smooth(aes(method = "loess")) + theme_bw()
# #geom_smooth(method = "loess", n = 50, se = FALSE)
# 
# cor.test(risk_final5@data$cuml.cases_adjusted, risk_final5@data$LM_ResPred, method= "pearson")

```

# Part 5: Geographically Weighted Random Forest Modeling: Model Alpha Wave

```{r covidrisk_GWRF_deaths, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
library(caret)
library(Metrics)
library(stringr)
library(kableExtra)
set.seed(999)


#fix Hardin county voting percentage
rankings <- read.csv("./data/countyrankings_refined.csv")
# rankings <- rankings[1:21]
# rankings <- rankings[-c(8,9,10,13,14,15,17,18)] #only the most pertinent full list
# rankings <- rankings[-c(4,8,9,10,12)]

#colnames(rankings) <- c("FIPS", "State", "County", "Obesity", "FEI", "Physically_Inactive", "Exercise_Access", "Excessive_Drinking")
rankings$FIPS <- str_pad(rankings$FIPS, 5, pad = "0")

# # 
#risk_final_test <- merge(risk_final_latter, rankings, by="FIPS")
risk_final_test <- linear_risk_final2
risk_final_test <- risk_final_test[-1]



risk_final_test$FIPS <- str_pad(risk_final_test$FIPS, 5, pad = "0")





#risk_final_test[598,11] <- .50
lw3 <- lw3[!duplicated(lw3[c('FIPS')]), ]
#risk_final3 <- merge(risk_final, lw3[lw3$FIPS == unique(lw3$FIPS),], by="FIPS", all=TRUE)

risk_final_test[is.na(risk_final_test)] <- 0

risk_final_test <- risk_final_test[risk_final_test$FIPS != 48301, ]


set.seed(1234)
split_rows = createDataPartition(risk_final_test$deaths_adjusted, p = 0.8, list = FALSE, times = 1)
dt_train = risk_final_test[split_rows,] 
dt_test = risk_final_test[-split_rows,] 
# dt_test <- rbind(dt_test[1, ] , dt_test)
#     dt_test <- dt_test[-1,]

lw3$FIPS <- as.integer(lw3$FIPS)
lw3$FIPS <- str_pad(lw3$FIPS, 5, pad = "0")


risk_final_original <- merge(risk_final_test, lw3, by="FIPS", all.x=TRUE)
risk_final3 <- merge(dt_train, lw3,  by="FIPS")
risk_final3_test <- merge(dt_test, lw3,  by="FIPS")

lw4_original <- data.frame(risk_final_original)
lw4 <- data.frame(risk_final3)

lw4[,51] <- as.numeric(lw4[,51])
lw4[,52] <- as.numeric(lw4[,52])

lw4_test <- data.frame(risk_final3_test)
lw4_test[,51] <- as.numeric(lw4_test[,51])
lw4_test[,52] <- as.numeric(lw4_test[,52])
# lw4_test[is.na(lw4_test)] <- 0

### Cross validation of bandwidth for Geographically weighted RF regression

#The local model of random forest uses same syntax used in the randomForest function of the R package randomForest. This is a string that is passed to the sub-models randomForest function. For more details look at the class formula.

#fix Hardin county voting percentage

#risk_final2 <- na.omit(risk_final)
#which(is.na(risk_final), arr.ind=TRUE)
dt_train[is.na(dt_train)] <- 0

#risk_final_test <- risk_final_test[risk_final_test$cuml.cases_adjusted != 0, ]
risk_final2 <- risk_final

Coord_original <- lw4_original[ ,c(52,51)]
Coords<-lw4[ ,c(52,51)]
colnames(Coords) <- c("X","Y")

Coords_test <- lw4_test[ ,c(52,51)]
colnames(Coords_test) <- c("X","Y")

# #Recursive Feature Elimination
# 
# control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# # run the RFE algorithm
# results <- rfe(risk_final_test[,c(6:9,10,11,15,18:20,23:27,30:31,35,38,39,40,47)], (risk_final_test[,12]), sizes=c(1:21), rfeControl=control)
# 
# #----
# names.use <- names(lw4)[names(lw4) %in% results$optVariables[1:10]]
# lw4 <- lw4[, c("deaths_adjusted", names.use)]

# risk_final_latter <- merge(risk_final_latter, rankings, by="FIPS")

lw4 <- cbind(lw4$deaths_adjusted, lw4$RPL_THEME1,lw4$RPL_THEME2, lw4$RPL_THEME3,lw4$RPL_THEME4, lw4$adjacent_ideology, lw4$pct.x, lw4$Series_Complete_Pop_Pct, lw4$density, lw4$Obesity, lw4$Excessive_Drinking,lw4$Uninsured_Adults, lw4$Unemployed, lw4$Diabetes, lw4$Food_Insecurity, lw4$Associations, lw4$Age_over_65, lw4$broadband_access.y )
# 
# lw4 <- cbind(lw4$deaths_adjusted, lw4$RPL_THEME1,lw4$RPL_THEME2, lw4$RPL_THEME3,lw4$RPL_THEME4, lw4$divergence, lw4$adjacent_ideology,   lw4$pct.x, lw4$Series_Complete_Pop_Pct, lw4$density, lw4$policy, lw4$Obesity, lw4$FEI, lw4$Excessive_Drinking, lw4$Uninsured_Adults, lw4$Diabetes,lw4$Age_over_65 )
# lw4 <- as.data.frame(lw4)
# 
colnames(lw4) <- c("deaths_adjusted", "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "Obesity" , "Excessive_Drinking", "Uninsured_Adults", "Unemployed", "Diabetes", "Food_Insecurity", "Associations", "Age_over_65", "broadband_access.y")
# 
# colnames(lw4) <- c("deaths_adjusted", "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "policy" , "Obesity" , "FEI" ,"Excessive_Drinking", "Uninsured_Adults", "Diabetes", "Age_over_65")

output_MAE <- data.frame(matrix(ncol = 5, nrow = 27))
output_RMSE <- data.frame(matrix(ncol = 5, nrow = 27))
#lw4 <- lw4 %>% mutate_if(is.character,as.numeric)
lw4 <- as.data.frame(lw4)

#bandwidth hypertuning
for (i in 1:30) {
risk_final_test$policy <- as.numeric(risk_final_test$policy)

# b <- paste(names.use, collapse ="+")
# grf.model <- grf(as.formula(paste("deaths_adjusted ~", b, sep="")),
#                  dframe=lw4,
#                  bw=i,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coords)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations

grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity  + Uninsured_Adults + Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y,
                 dframe=lw4,
                 bw=i,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
                 ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
                 kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
                 forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
                 coords=Coords)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations

# 
# grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + divergence + pct.x + Series_Complete_Pop_Pct + density + policy + Obesity + FEI  + Excessive_Drinking + Uninsured_Adults + Diabetes + Age_over_65,
#                  dframe=lw4,
#                  bw=i,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coords)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations
# 

# names.use <- names(lw4_test)[names(lw4_test) %in% results$optVariables[1:10]]
# lw4_test2 <- lw4_test[, c("lat", "long", names.use)]
# names(lw4_test2)[names(lw4_test2) == 'lat'] <- 'X'
# names(lw4_test2)[names(lw4_test2) == 'long'] <- 'Y'

lw4_test2 <- cbind(lw4_test$lat, lw4_test$long, lw4_test$RPL_THEME1,lw4_test$RPL_THEME2, lw4_test$RPL_THEME3,lw4_test$RPL_THEME4, lw4_test$divergence, lw4_test$pct.x, lw4_test$Series_Complete_Pop_Pct, lw4_test$density, lw4_test$Obesity, lw4_test$Excessive_Drinking, lw4_test$Uninsured_Adults, lw4_test$Unemployed, lw4_test$Diabetes, lw4_test$Food_Insecurity, lw4_test$Associations, lw4_test$Age_over_65, lw4_test$broadband_access.y )
colnames(lw4_test2) <- c("X", "Y",  "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" ,  "Obesity" , "Excessive_Drinking", "Uninsured_Adults", "Unemployed", "Diabetes", "Food_Insecurity", "Associations", "Age_over_65", "broadband_access.y")

# 
# lw4_test2 <- cbind(lw4_test$lat, lw4_test$long, lw4_test$RPL_THEME1,lw4_test$RPL_THEME2, lw4_test$RPL_THEME3,lw4_test$RPL_THEME4, lw4_test$adjacent_ideology, lw4_test$divergence, lw4_test$pct.x, lw4_test$Series_Complete_Pop_Pct, lw4_test$density, lw4_test$policy, lw4_test$Obesity, lw4_test$FEI, lw4_test$Excessive_Drinking, lw4_test$Uninsured_Adults, lw4_test$Diabetes, lw4_test$Age_over_65 )
# colnames(lw4_test2) <- c("X", "Y",  "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "adjacent_ideology", "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "policy" ,  "Obesity" , "FEI" ,"Excessive_Drinking", "Uninsured_Adults",  "Diabetes", "Age_over_65")


lw4_test2 <- as.data.frame(lw4_test2)
lw4_test2 <- lw4_test2 %>% mutate_if(is.character,as.numeric)

predict_grf1 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=0, global.w=1)
model_predict_grf1 <- lm(predict_grf1 ~ lw4_test$deaths_adjusted)
model_predict_grf1_RMSE <- sqrt(mean(model_predict_grf1$residuals^2))
model_predict_grf1_MAE <- mae(predict_grf1, lw4_test$deaths_adjusted)

predict_grf2 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.25, global.w=.75)
model_predict_grf2 <- lm(predict_grf2 ~ lw4_test$deaths_adjusted)
model_predict_grf2_RMSE <- sqrt(mean(model_predict_grf2$residuals^2))
model_predict_grf2_MAE <- mae(predict_grf2, lw4_test$deaths_adjusted)

predict_grf3 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.5, global.w=.5)
model_predict_grf3 <- lm(predict_grf3 ~ lw4_test$deaths_adjusted)
model_predict_grf3_RMSE <- sqrt(mean(model_predict_grf3$residuals^2))
model_predict_grf3_MAE <- mae(predict_grf3, lw4_test$deaths_adjusted)

predict_grf4 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.75, global.w=.25)
model_predict_grf4 <- lm(predict_grf4 ~ lw4_test$deaths_adjusted)
model_predict_grf4_RMSE <- sqrt(mean(model_predict_grf4$residuals^2))
model_predict_grf4_MAE <- mae(predict_grf4, lw4_test$deaths_adjusted)

predict_grf5 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=1, global.w=0)
model_predict_grf5 <- lm(predict_grf5 ~ lw4_test$deaths_adjusted)
model_predict_grf5_RMSE <- sqrt(mean(model_predict_grf5$residuals^2))
model_predict_grf5_MAE <- mae(predict_grf5, lw4_test$deaths_adjusted)

output_RMSE[i,] <- c(model_predict_grf1_RMSE, model_predict_grf2_RMSE, model_predict_grf3_RMSE, model_predict_grf4_RMSE, model_predict_grf5_RMSE)
output_MAE[i,] <- c(model_predict_grf1_MAE, model_predict_grf2_MAE, model_predict_grf3_MAE, model_predict_grf4_MAE, model_predict_grf5_MAE)

}


bw2 <- which.min(output_RMSE[3:30,2])
bw3 <- which.min(output_RMSE[3:30,3])
bw4 <- which.min(output_RMSE[3:30,4])
bw5 <- which.min(output_RMSE[3:30,5])
bw_final <- c(bw2,bw3,bw4,bw5)+2
bw <- min(bw_final)

bw <- 24

set.seed(1234)
#custom bandwidth based on visual inspection
grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity + Uninsured_Adults  + Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y,
                 dframe=risk_final_test,
                 bw=bw,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
                 ntree=500,          # n integer referring to the number of trees to grow for each of the local random forests.
                 kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
                 forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
                 importance = TRUE,
                 coords=Coord_original)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations
# 
# grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + divergence + pct.x + Series_Complete_Pop_Pct + density + policy + Obesity + FEI  + Excessive_Drinking + Uninsured_Adults + Diabetes  + Age_over_65,
#                  dframe=risk_final_test,
#                  bw=bw,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coord_original)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations



#predict.grf(grf.model, risk_final_test2, x.var.name="lat", y.var.name="long", local.w=1, global.w=0)

### Global Variable Importance

A <- grf.model$Global.Model$importance 

### Global Mean MSE of 500 tree

B <- mean(grf.model$Global.Model$mse)

### Global Mean R2 of 500 tree

C <- mean(grf.model$Global.Model$rsq)


### Local feature importance (IncMSE)


### Local feature importance (IncMSE)
grf.model$Local.Pc.IncMSE$FIPS <- risk_final_test$FIPS
risk_final4 <- merge(counties_merged, grf.model$Local.Pc.IncMSE, by="FIPS", duplicateGeoms = T)


#### Plot  local feature importance (IncMSE)

polys<- list("sp.lines", as(states, "SpatialLines"), col="grey", lwd=.8,lty=1)
col.palette<-colorRampPalette(c("blue",  "sky blue", "green","yellow", "red"),space="rgb",interpolate = "linear")



col.palette.t<-colorRampPalette(c("lightseagreen","lightsteelblue1", "moccasin","hotpink", "red"),space="rgb",interpolate = "linear") 

RPL_THEME1<-spplot(risk_final4,"RPL_THEME1", main = "Socioeconomic", 
             sp.layout=list(polys),
             col="transparent",
             col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"),        
                width = 2, cex = 2)))

RPL_THEME2<-spplot(risk_final4,"RPL_THEME2", main = "Household Composition & Disability", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),        
                width = 2, cex = 2)))

RPL_THEME3<-spplot(risk_final4,"RPL_THEME3", main = "Minority Status & Language", 
             sp.layout=list(polys),
             col="transparent",
             col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),        
                width = 2, cex = 2)))

RPL_THEME4<-spplot(risk_final4,"RPL_THEME4", main = "Housing Type & Transportation", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"),        
                width = 2, cex = 2)))

divergence<-spplot(risk_final4,"divergence.y", main = "Political Divergence", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 5, labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),  width = 2, cex = 2)))

voting <-spplot(risk_final4,"pct.x", main = "Democratic Voting Pct", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),        
                width = 2, cex = 2)))

vaccination <-spplot(risk_final4,"Series_Complete_Pop_Pct", main = "Vaccination Rate", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),        
                width = 2, cex = 2)))

density <-spplot(risk_final4,"density", main = "Population Density", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),        
                width = 2, cex = 2)))

obesity <-spplot(risk_final4,"Obesity", main = "Obesity",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"),        
                width = 2, cex = 2)))
# #
# fei <-spplot(risk_final4,"FEI", main = "Food Environmental Index",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

# physically_inactive <-spplot(risk_final4,"Physically_Inactive", main = "Physical Inactivity",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# exercise_access <-spplot(risk_final4,"Exercise_Access", main = "Access to Exercise Opportunities",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

# excessive_drinking <-spplot(risk_final4,"Excessive_Drinking", main = "Excessive Drinking",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# smoking <-spplot(risk_final4,"Smoking", main = "Smoking",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

uninsured_adults <-spplot(risk_final4,"Uninsured_Adults", main = "Uninsured_Adults",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),        
                width = 2, cex = 2)))

# some_college <-spplot(risk_final4,"Some_College", main = "Some_College",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

associations <-spplot(risk_final4,"Associations", main = "Associations",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),        
                width = 2, cex = 2)))

diabetes <-spplot(risk_final4,"Diabetes", main = "Diabetes",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"),        
                width = 2, cex = 2)))

food_insecurity <-spplot(risk_final4,"Food_Insecurity", main = "Food_Insecurity",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"),        
                width = 2, cex = 2)))

unemployed <-spplot(risk_final4,"Unemployed", main = "Unemployed",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"),        
                width = 2, cex = 2)))

age_over_65 <-spplot(risk_final4,"Age_over_65", main = "Age over 65",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),        
                width = 2, cex = 2)))

broadband_access <-spplot(risk_final4,"broadband_access.y", main = "Broadband Access",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"),        
                width = 2, cex = 2)))


# 
#plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, policy, vaccination, density, nrow = 2, ncol=5, heights = c(30,6), top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))

# plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, vaccination, density,obesity,fei,excessive_drinking,smoking,some_college,unemployed,uninsured_adults,associations,diabetes,food_insecurity,age_over_65, ncol=1, top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))
# 
# plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, vaccination, density,obesity,fei,excessive_drinking,uninsured_adults,diabetes,age_over_65, ncol=1, top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))

#plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence,ncol=5, heights = c(30,6), top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))

#plotrf

#add dependent back into model output for plotting and comparison

### Local goodness of fit 

#risk_final4@data$loc_R2=grf.model$LGofFit$LM_Rsq100
# 
# grf.model$LGofFit$FIPS <- risk_final_test$FIPS
# risk_final5 <- merge(counties_merged, grf.model$LGofFit, by="FIPS", duplicateGeoms = T)
# # 
# risk_final5 <- merge(risk_final5, risk_final_test, by = "FIPS", duplicateGeoms = T )
# 

#data_counties <- merge(counties_merged, linear_risk_final2, by="FIPS", duplicateGeoms = TRUE)

grf.model$LGofFit$FIPS <- risk_final_test$FIPS
risk_final5 <- merge(data_counties, grf.model$LGofFit, by="FIPS", duplicateGeoms = T)


myPaletteRes <- colorRampPalette(c("lightseagreen","lightsteelblue1", "moccasin","hotpink", "red"))
local_r2<-spplot(risk_final5,"LM_Rsq100", main = paste("Local R2 (%) - Bandwidth = ", bw, sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), colorkey = list(labels = list( labels = c("-.60", "-.40", "-.20", "0", ".20", ".40", ".60", ".80"), width = 2, cex = 2)))
#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2)

#residuals

# local_r2_residuals<-spplot(risk_final5,"LM_MSR", main = paste("Mean Square due to Regression - Bandwidth = ", bw, sep=""), 
#                  sp.layout=list(polys),
#                  col="transparent",
#                  col.regions=myPaletteRes(100))
# #windows(width=4, height=3.5)
# #tiff( file="FIG_GWRP_Std_Residuals.tif", 
# #      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
# #      restoreConsole = T,bg="transparent")
# print(local_r2_residuals)

local_r2_residuals2<-spplot(risk_final5,"LM_yfitOOB", main = paste("Out of Bag Prediction - Bandwidth = ", bw, sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), at=seq(0, .008, length.out=100), colorkey = list(labels = list( labels = c("0.000", "0.001", "0.002", "0.003", "0.004", "0.005", "0.006", "0.007", "0.008"), width = 2, cex = 2)))
#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2_residuals2)

local_r2_residuals3<-spplot(risk_final5,"LM_yfitPred", main = paste("Global Prediction - Bandwidth = ", bw, sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), at=seq(0, .008, length.out=100), colorkey = list(labels = list( labels = c("0.000", "0.001", "0.002", "0.003", "0.004", "0.005", "0.006", "0.007", "0.008"), width = 2, cex = 2)))
#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2_residuals3)


local_r2_residuals4<-spplot(risk_final5,"deaths_adjusted", main = paste("Deaths Adjusted", sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), at=seq(0, .008, length.out=100), colorkey = list(labels = list( labels = c("0.000", "0.001", "0.002", "0.003", "0.004", "0.005", "0.006", "0.007", "0.008"), width = 2, cex = 2)))
#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2_residuals4)

```

## Figure S79: GWRF Alpha Wave: Model Weighting

```{r, echo=FALSE, message=FALSE, warning=FALSE}

par(mfrow=c(1,2))
matplot(output_RMSE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "RMSE", main = "Deaths RMSE: Bandwidth x Weighting Models")
legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)
matplot(output_MAE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "MAE", main = "Deaths MAE: Bandwidth x Weighting Models")
legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)

```

\newpage
## Figure S80: GWRF Alpha Wave: Residuals vs. Predicted

```{r, echo=FALSE, message=FALSE, warning=FALSE}

par(mfrow=c(1,1))
ggplot(risk_final5@data, aes(x=risk_final5@data$LM_yfitPred, y=risk_final5@data$LM_ResPred)) + geom_point() + geom_smooth(aes(method = "loess")) + theme_bw() + scale_x_continuous(name="Predicted") + scale_y_continuous(name="Residuals")  + ggtitle("Residuals vs. Prediction") 
#geom_smooth(method = "loess", n = 50, se = FALSE)

cor.test(risk_final5@data$deaths_adjusted, risk_final5@data$LM_ResPred, method= "pearson")

```

\newpage

## Figure S81: GWRF Alpha Wave: Model Prediction Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

plotrf <- grid.arrange(local_r2, local_r2_residuals2,local_r2_residuals3,local_r2_residuals4, nrow = 2, ncol=2, heights = c(1000,1000),  top = textGrob("Model Predictions",gp=gpar(fontsize=25)))

```

## Figure S82: GWRF Alpha Wave: Feature Importance

```{r, echo=FALSE, message=FALSE, warning=FALSE}

plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, nrow = 2, ncol=2, heights = c(1000,1000),  top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))
                       
      plotrf <- grid.arrange(divergence, voting, vaccination, density, nrow = 2, ncol=2, heights = c(1000,1000))
      
      
     plotrf <- grid.arrange( obesity,unemployed, uninsured_adults,associations, nrow = 2, ncol=2, heights = c(1000,1000))
     
     plotrf <- grid.arrange(diabetes,food_insecurity,age_over_65, broadband_access,  nrow = 2, ncol=2, heights = c(1000,1000))
# 
# print(RPL_THEME1)
# print(RPL_THEME2)
# print(RPL_THEME3)
# print(RPL_THEME4)
# print(divergence)
# print(voting)
# print(vaccination)
# print(density)
# print(obesity)
# 
# #print(fei)
# print(excessive_drinking)
# #print(smoking)
# #print(some_college)
# print(unemployed)
# print(uninsured_adults)
# print(associations)
# print(diabetes)
# print(food_insecurity)
# print(age_over_65)
# print(broadband_access)

###predict on Test

### Local Model Summary and goodness of fit statistics (training and OOB) 

D <- data.frame(grf.model$LocalModelSummary[c(4,6)])
colnames(D) <- c("Out of Bag R2", "Global R2")
D <- kbl(D, booktabs = T, linesep = "") %>% kable_styling(latex_options = "HOLD_position")


```

## Table S16: GWRF Alpha Wave OOB vs. Global R2

```{r, echo=FALSE, message=FALSE, warning=FALSE}

D

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

#Yhat vs residuals
# 
# ggplot(risk_final5@data, aes(x=risk_final5@data$LM_yfitPred, y=risk_final5@data$LM_ResPred)) + geom_point() + geom_smooth(aes(method = "loess")) + theme_bw() + scale_x_continuous(name="Predicted") + scale_y_continuous(name="Residuals")
# #geom_smooth(method = "loess", n = 50, se = FALSE)
# 
# cor.test(risk_final5@data$deaths_adjusted, risk_final5@data$LM_ResPred, method= "pearson")

```

# Part 5: Geographically Weighted Random Forest Modeling: Delta Wave

```{r covidrisk_GWRF_deaths_delta, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
library(caret)
library(Metrics)
library(stringr)



#fix Hardin county voting percentage
rankings <- read.csv("./data/countyrankings_refined.csv")
# rankings <- rankings[1:21]
# rankings <- rankings[-c(8,9,10,13,14,15,17,18)] #only the most pertinent full list
# rankings <- rankings[-c(4,8,9,10,12)]

#colnames(rankings) <- c("FIPS", "State", "County", "Obesity", "FEI", "Physically_Inactive", "Exercise_Access", "Excessive_Drinking")
rankings$FIPS <- str_pad(rankings$FIPS, 5, pad = "0")

# # 
#risk_final_test <- merge(risk_final_latter, rankings, by="FIPS")
risk_final_test <- linear_risk_final_delta2
#risk_final_test <- risk_final_test[-1]



risk_final_test$FIPS <- str_pad(risk_final_test$FIPS, 5, pad = "0")





#risk_final_test[598,11] <- .50
lw3 <- lw3[!duplicated(lw3[c('FIPS')]), ]
#risk_final3 <- merge(risk_final, lw3[lw3$FIPS == unique(lw3$FIPS),], by="FIPS", all=TRUE)

risk_final_test[is.na(risk_final_test)] <- 0

risk_final_test <- risk_final_test[risk_final_test$FIPS != 48301, ]


set.seed(1234)
split_rows = createDataPartition(risk_final_test$deaths_adjusted, p = 0.8, list = FALSE, times = 1)
dt_train = risk_final_test[split_rows,] 
dt_test = risk_final_test[-split_rows,] 
# dt_test <- rbind(dt_test[1, ] , dt_test)
#     dt_test <- dt_test[-1,]

lw3$FIPS <- as.integer(lw3$FIPS)
lw3$FIPS <- str_pad(lw3$FIPS, 5, pad = "0")


risk_final_original <- merge(risk_final_test, lw3, by="FIPS", all.x=TRUE)
risk_final3 <- merge(dt_train, lw3,  by="FIPS")
risk_final3_test <- merge(dt_test, lw3,  by="FIPS")

lw4_original <- data.frame(risk_final_original)
lw4 <- data.frame(risk_final3)

lw4[,51] <- as.numeric(lw4[,51])
lw4[,52] <- as.numeric(lw4[,52])

lw4_test <- data.frame(risk_final3_test)
lw4_test[,51] <- as.numeric(lw4_test[,51])
lw4_test[,52] <- as.numeric(lw4_test[,52])
# lw4_test[is.na(lw4_test)] <- 0

### Cross validation of bandwidth for Geographically weighted RF regression

#The local model of random forest uses same syntax used in the randomForest function of the R package randomForest. This is a string that is passed to the sub-models randomForest function. For more details look at the class formula.

#fix Hardin county voting percentage

#risk_final2 <- na.omit(risk_final)
#which(is.na(risk_final), arr.ind=TRUE)
dt_train[is.na(dt_train)] <- 0

#risk_final_test <- risk_final_test[risk_final_test$cuml.cases_adjusted != 0, ]
risk_final2 <- risk_final

Coord_original <- lw4_original[ ,c(52,51)]
Coords<-lw4[ ,c(52,51)]
colnames(Coords) <- c("X","Y")

Coords_test <- lw4_test[ ,c(52,51)]
colnames(Coords_test) <- c("X","Y")

# #Recursive Feature Elimination
# 
# control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# # run the RFE algorithm
# results <- rfe(risk_final_test[,c(6:9,10,11,15,18:20,23:27,30:31,35,38,39,40,47)], (risk_final_test[,12]), sizes=c(1:21), rfeControl=control)
# 
# #----
# names.use <- names(lw4)[names(lw4) %in% results$optVariables[1:10]]
# lw4 <- lw4[, c("deaths_adjusted", names.use)]

# risk_final_latter <- merge(risk_final_latter, rankings, by="FIPS")

lw4 <- cbind(lw4$deaths_adjusted, lw4$RPL_THEME1,lw4$RPL_THEME2, lw4$RPL_THEME3,lw4$RPL_THEME4, lw4$adjacent_ideology,  lw4$pct.x, lw4$Series_Complete_Pop_Pct, lw4$density,  lw4$Obesity,  lw4$Excessive_Drinking,lw4$Uninsured_Adults,  lw4$Unemployed, lw4$Diabetes, lw4$Food_Insecurity, lw4$Associations, lw4$Age_over_65, lw4$broadband_access.y )
# 
# lw4 <- cbind(lw4$deaths_adjusted, lw4$RPL_THEME1,lw4$RPL_THEME2, lw4$RPL_THEME3,lw4$RPL_THEME4, lw4$divergence, lw4$adjacent_ideology,   lw4$pct.x, lw4$Series_Complete_Pop_Pct, lw4$density, lw4$policy, lw4$Obesity, lw4$FEI, lw4$Excessive_Drinking, lw4$Uninsured_Adults, lw4$Diabetes,lw4$Age_over_65 )
# lw4 <- as.data.frame(lw4)
# 
colnames(lw4) <- c("deaths_adjusted", "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" ,  "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "Obesity"   ,"Excessive_Drinking", "Uninsured_Adults",  "Unemployed", "Diabetes", "Food_Insecurity", "Associations", "Age_over_65", "broadband_access.y")
# 
# colnames(lw4) <- c("deaths_adjusted", "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "adjacent_ideology", "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "policy" , "Obesity" , "FEI" ,"Excessive_Drinking", "Uninsured_Adults", "Diabetes", "Age_over_65")

output_MAE <- data.frame(matrix(ncol = 5, nrow = 27))
output_RMSE <- data.frame(matrix(ncol = 5, nrow = 27))
#lw4 <- lw4 %>% mutate_if(is.character,as.numeric)
lw4 <- as.data.frame(lw4)

#bandwidth hypertuning
for (i in 1:30) {
risk_final_test$policy <- as.numeric(risk_final_test$policy)

# b <- paste(names.use, collapse ="+")
# grf.model <- grf(as.formula(paste("deaths_adjusted ~", b, sep="")),
#                  dframe=lw4,
#                  bw=i,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coords)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations

grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 +  divergence + pct.x + Series_Complete_Pop_Pct + density  + Obesity   + Uninsured_Adults +  Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y,
                 dframe=lw4,
                 bw=i,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
                 ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
                 kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
                 forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
                 coords=Coords)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations

# 
# grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + divergence + pct.x + Series_Complete_Pop_Pct + density + policy + Obesity + FEI  + Excessive_Drinking + Uninsured_Adults + Diabetes + Age_over_65,
#                  dframe=lw4,
#                  bw=i,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coords)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations
# 

# names.use <- names(lw4_test)[names(lw4_test) %in% results$optVariables[1:10]]
# lw4_test2 <- lw4_test[, c("lat", "long", names.use)]
# names(lw4_test2)[names(lw4_test2) == 'lat'] <- 'X'
# names(lw4_test2)[names(lw4_test2) == 'long'] <- 'Y'

lw4_test2 <- cbind(lw4_test$lat, lw4_test$long, lw4_test$RPL_THEME1,lw4_test$RPL_THEME2, lw4_test$RPL_THEME3,lw4_test$RPL_THEME4, lw4_test$divergence, lw4_test$pct.x, lw4_test$Series_Complete_Pop_Pct, lw4_test$density, lw4_test$Obesity,  lw4_test$Excessive_Drinking, lw4_test$Uninsured_Adults, lw4_test$Unemployed, lw4_test$Diabetes, lw4_test$Food_Insecurity, lw4_test$Associations, lw4_test$Age_over_65, lw4_test$broadband_access.y )
colnames(lw4_test2) <- c("X", "Y",  "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" ,  "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" ,  "Obesity"  ,"Excessive_Drinking", "Uninsured_Adults",  "Unemployed", "Diabetes", "Food_Insecurity", "Associations", "Age_over_65", "broadband_access.y")

# 
# lw4_test2 <- cbind(lw4_test$lat, lw4_test$long, lw4_test$RPL_THEME1,lw4_test$RPL_THEME2, lw4_test$RPL_THEME3,lw4_test$RPL_THEME4, lw4_test$adjacent_ideology, lw4_test$divergence, lw4_test$pct.x, lw4_test$Series_Complete_Pop_Pct, lw4_test$density, lw4_test$policy, lw4_test$Obesity, lw4_test$FEI, lw4_test$Excessive_Drinking, lw4_test$Uninsured_Adults, lw4_test$Diabetes, lw4_test$Age_over_65 )
# colnames(lw4_test2) <- c("X", "Y",  "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "adjacent_ideology", "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "policy" ,  "Obesity" , "FEI" ,"Excessive_Drinking", "Uninsured_Adults",  "Diabetes", "Age_over_65")


lw4_test2 <- as.data.frame(lw4_test2)
lw4_test2 <- lw4_test2 %>% mutate_if(is.character,as.numeric)

predict_grf1 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=0, global.w=1)
model_predict_grf1 <- lm(predict_grf1 ~ lw4_test$deaths_adjusted)
model_predict_grf1_RMSE <- sqrt(mean(model_predict_grf1$residuals^2))
model_predict_grf1_MAE <- mae(predict_grf1, lw4_test$deaths_adjusted)

predict_grf2 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.25, global.w=.75)
model_predict_grf2 <- lm(predict_grf2 ~ lw4_test$deaths_adjusted)
model_predict_grf2_RMSE <- sqrt(mean(model_predict_grf2$residuals^2))
model_predict_grf2_MAE <- mae(predict_grf2, lw4_test$deaths_adjusted)

predict_grf3 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.5, global.w=.5)
model_predict_grf3 <- lm(predict_grf3 ~ lw4_test$deaths_adjusted)
model_predict_grf3_RMSE <- sqrt(mean(model_predict_grf3$residuals^2))
model_predict_grf3_MAE <- mae(predict_grf3, lw4_test$deaths_adjusted)

predict_grf4 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.75, global.w=.25)
model_predict_grf4 <- lm(predict_grf4 ~ lw4_test$deaths_adjusted)
model_predict_grf4_RMSE <- sqrt(mean(model_predict_grf4$residuals^2))
model_predict_grf4_MAE <- mae(predict_grf4, lw4_test$deaths_adjusted)

predict_grf5 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=1, global.w=0)
model_predict_grf5 <- lm(predict_grf5 ~ lw4_test$deaths_adjusted)
model_predict_grf5_RMSE <- sqrt(mean(model_predict_grf5$residuals^2))
model_predict_grf5_MAE <- mae(predict_grf5, lw4_test$deaths_adjusted)

output_RMSE[i,] <- c(model_predict_grf1_RMSE, model_predict_grf2_RMSE, model_predict_grf3_RMSE, model_predict_grf4_RMSE, model_predict_grf5_RMSE)
output_MAE[i,] <- c(model_predict_grf1_MAE, model_predict_grf2_MAE, model_predict_grf3_MAE, model_predict_grf4_MAE, model_predict_grf5_MAE)

}


bw2 <- which.min(output_RMSE[3:30,2])
bw3 <- which.min(output_RMSE[3:30,3])
bw4 <- which.min(output_RMSE[3:30,4])
bw5 <- which.min(output_RMSE[3:30,5])
bw_final <- c(bw2,bw3,bw4,bw5)+2
bw <- min(bw_final)

bw <- 20

grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4  + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity   + Uninsured_Adults +  Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y,
                 dframe=risk_final_test,
                 bw=bw,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
                 ntree=500,          # n integer referring to the number of trees to grow for each of the local random forests.
                 kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
                 forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
                 coords=Coord_original)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations
# 
# grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + divergence + pct.x + Series_Complete_Pop_Pct + density + policy + Obesity + FEI  + Excessive_Drinking + Uninsured_Adults + Diabetes  + Age_over_65,
#                  dframe=risk_final_test,
#                  bw=bw,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coord_original)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations



#predict.grf(grf.model, risk_final_test2, x.var.name="lat", y.var.name="long", local.w=1, global.w=0)

### Global Variable Importance


A <- grf.model$Global.Model$importance 

### Global Mean MSE of 500 tree

B <- mean(grf.model$Global.Model$mse)

### Global Mean R2 of 500 tree

C <- mean(grf.model$Global.Model$rsq)


### Local feature importance (IncMSE)


### Local feature importance (IncMSE)
grf.model$Local.Pc.IncMSE$FIPS <- risk_final_test$FIPS
risk_final4 <- merge(counties_merged, grf.model$Local.Pc.IncMSE, by="FIPS", duplicateGeoms = T)


#### Plot  local feature importance (IncMSE)

polys<- list("sp.lines", as(states, "SpatialLines"), col="grey", lwd=.8,lty=1)
col.palette<-colorRampPalette(c("blue",  "sky blue", "green","yellow", "red"),space="rgb",interpolate = "linear")



col.palette.t<-colorRampPalette(c("lightseagreen","lightsteelblue1", "moccasin","hotpink", "red"),space="rgb",interpolate = "linear") 

RPL_THEME1<-spplot(risk_final4,"RPL_THEME1", main = "Socioeconomic", 
             sp.layout=list(polys),
             col="transparent",
             col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"), width = 2, cex = 2)))

RPL_THEME2<-spplot(risk_final4,"RPL_THEME2", main = "Household Composition & Disability", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"),        
                width = 2, cex = 2)))

RPL_THEME3<-spplot(risk_final4,"RPL_THEME3", main = "Minority Status & Language", 
             sp.layout=list(polys),
             col="transparent",
             col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"), width = 2, cex = 2)))

RPL_THEME4<-spplot(risk_final4,"RPL_THEME4", main = "Housing Type & Transportation", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"), width = 2, cex = 2)))

divergence<-spplot(risk_final4,"divergence.y", main = "Political Divergence", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

voting <-spplot(risk_final4,"pct.x", main = "Democratic Voting Pct", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"), width = 2, cex = 2)))

vaccination <-spplot(risk_final4,"Series_Complete_Pop_Pct", main = "Vaccination Rate", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"), width = 2, cex = 2)))

density <-spplot(risk_final4,"density", main = "Population Density", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"), width = 2, cex = 2)))

obesity <-spplot(risk_final4,"Obesity", main = "Obesity",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%"), width = 2, cex = 2)))
# #
# fei <-spplot(risk_final4,"FEI", main = "Food Environmental Index",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

# physically_inactive <-spplot(risk_final4,"Physically_Inactive", main = "Physical Inactivity",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# exercise_access <-spplot(risk_final4,"Exercise_Access", main = "Access to Exercise Opportunities",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

# excessive_drinking <-spplot(risk_final4,"Excessive_Drinking", main = "Excessive Drinking",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# smoking <-spplot(risk_final4,"Smoking", main = "Smoking",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

uninsured_adults <-spplot(risk_final4,"Uninsured_Adults", main = "Uninsured_Adults",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"), width = 2, cex = 2)))
# 
# some_college <-spplot(risk_final4,"Some_College", main = "Some_College",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

associations <-spplot(risk_final4,"Associations", main = "Associations",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"), width = 2, cex = 2)))

diabetes <-spplot(risk_final4,"Diabetes", main = "Diabetes",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"), width = 2, cex = 2)))

food_insecurity <-spplot(risk_final4,"Food_Insecurity", main = "Food_Insecurity",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 5, labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),  width = 2, cex = 2)))

unemployed <-spplot(risk_final4,"Unemployed", main = "Unemployed",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"), width = 2, cex = 2)))

age_over_65 <-spplot(risk_final4,"Age_over_65", main = "Age over 65",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 5, labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"),  width = 2, cex = 2)))

broadband_access <-spplot(risk_final4,"broadband_access.y", main = "Broadband Access",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey = list(labels = list( labels = c("-5%", "0%", "5%", "10%", "15%"), width = 2, cex = 2)))

# 
#plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, policy, vaccination, density, nrow = 2, ncol=5, heights = c(30,6), top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))

# plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, vaccination, density,obesity,fei,excessive_drinking,smoking,some_college,unemployed,uninsured_adults,associations,diabetes,food_insecurity,age_over_65, ncol=1, top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))
# 
# plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, vaccination, density,obesity,fei,excessive_drinking,uninsured_adults,diabetes,age_over_65, ncol=1, top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))

#plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence,ncol=5, heights = c(30,6), top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))

# plotrf

#add dependent back into model output for plotting and comparison

### Local goodness of fit 

#risk_final4@data$loc_R2=grf.model$LGofFit$LM_Rsq100
# 
# grf.model$LGofFit$FIPS <- risk_final_test$FIPS
# risk_final5 <- merge(counties_merged, grf.model$LGofFit, by="FIPS", duplicateGeoms = T)
# # 
# risk_final5 <- merge(risk_final5, risk_final_test, by = "FIPS", duplicateGeoms = T )
# 

#data_counties <- merge(counties_merged, linear_risk_final2, by="FIPS", duplicateGeoms = TRUE)

grf.model$LGofFit$FIPS <- risk_final_test$FIPS
risk_final5 <- merge(data_counties3, grf.model$LGofFit, by="FIPS", duplicateGeoms = T)


myPaletteRes <- colorRampPalette(c("lightseagreen","lightsteelblue1", "moccasin","hotpink", "red"))
local_r2<-spplot(risk_final5,"LM_Rsq100", main = paste("Local R2 (%) - Bandwidth = ", bw, sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), colorkey =  list(tick.number = 9, labels = list( labels = c("-.80", "-.60", "-.40", "-.20", "0", ".20", ".40", ".60", ".80"),  width = 2, cex = 2)))

#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2)

#residuals

# local_r2_residuals<-spplot(risk_final5,"LM_MSR", main = paste("Mean Square due to Regression - Bandwidth = ", bw, sep=""), 
#                  sp.layout=list(polys),
#                  col="transparent",
#                  col.regions=myPaletteRes(100))
# #windows(width=4, height=3.5)
# #tiff( file="FIG_GWRP_Std_Residuals.tif", 
# #      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
# #      restoreConsole = T,bg="transparent")
# print(local_r2_residuals)

local_r2_residuals2<-spplot(risk_final5,"LM_yfitOOB", main = paste("Out of Bag Prediction - Bandwidth = ", bw, sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), at=seq(0, .004, length.out=100), colorkey = list(labels = list( labels = c("0.0000", "0.0005", "0.0010", "0.0015", "0.0020", "0.0025", "0.0030", "0.0035", "0.0040"), width = 2, cex = 2)))
#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
# print(local_r2_residuals)

local_r2_residuals3<-spplot(risk_final5,"LM_yfitPred", main = paste("Global Prediction - Bandwidth = ", bw, sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), at=seq(0, .004, length.out=100), colorkey = list(labels = list( labels = c("0.0000", "0.0005", "0.0010", "0.0015", "0.0020", "0.0025", "0.0030", "0.0035", "0.0040"), width = 2, cex = 2)))
#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2_residuals)


local_r2_residuals4<-spplot(risk_final5,"deaths_adjusted", main = paste("Deaths Adjusted", sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), at=seq(0, .004, length.out=100), colorkey = list(labels = list( labels = c("0.0000", "0.0005", "0.0010", "0.0015", "0.0020", "0.0025", "0.0030", "0.0035", "0.0040"), width = 2, cex = 2)))
#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2_residuals)

```

## Figure S83: GWRF Delta Wave: Model Weighting

```{r, echo=FALSE, message=FALSE, warning=FALSE}


par(mfrow=c(1,2))
matplot(output_RMSE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "RMSE", main = "Deaths RMSE: Bandwidth x Weighting Models")
legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)
matplot(output_MAE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "MAE", main = "Deaths MAE: Bandwidth x Weighting Models")
legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)

```

\newpage

## Figure S84: GWRF Delta Wave: Residuals vs. Predicted

```{r, echo=FALSE, message=FALSE, warning=FALSE}

par(mfrow=c(1,1))
ggplot(risk_final5@data, aes(x=risk_final5@data$LM_yfitPred, y=risk_final5@data$LM_ResPred)) + geom_point() + geom_smooth(aes(method = "loess")) + theme_bw() + scale_x_continuous(name="Predicted") + scale_y_continuous(name="Residuals")  + ggtitle("Residuals vs. Prediction") 
#geom_smooth(method = "loess", n = 50, se = FALSE)

cor.test(risk_final5@data$deaths_adjusted, risk_final5@data$LM_ResPred, method= "pearson")

```

\newpage

## Figure S85: GWRF Delta Wave: Model Prediction Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

plotrf <- grid.arrange(local_r2, local_r2_residuals2,local_r2_residuals3,local_r2_residuals4, nrow = 2, ncol=2, heights = c(1000,1000),  top = textGrob("Model Predictions",gp=gpar(fontsize=25)))

```

## Figure S86: GWRF Delta Wave: Model Feature Importance

```{r, echo=FALSE, message=FALSE, warning=FALSE}


plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, nrow = 2, ncol=2, heights = c(1000,1000),  top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))
                       
      plotrf <- grid.arrange(divergence, voting, vaccination, density, nrow = 2, ncol=2, heights = c(1000,1000))
      
      
     plotrf <- grid.arrange( obesity,unemployed, uninsured_adults,associations, nrow = 2, ncol=2, heights = c(1000,1000))
     
     plotrf <- grid.arrange(diabetes,food_insecurity,age_over_65, broadband_access,  nrow = 2, ncol=2, heights = c(1000,1000))
# 
# print(RPL_THEME1)
# print(RPL_THEME2)
# print(RPL_THEME3)
# print(RPL_THEME4)
# print(divergence)
# print(voting)
# print(vaccination)
# print(density)
# print(obesity)
# 
# #print(fei)
# print(excessive_drinking)
# #print(smoking)
# #print(some_college)
# print(unemployed)
# print(uninsured_adults)
# print(associations)
# print(diabetes)
# print(food_insecurity)
# print(age_over_65)
# print(broadband_access)
# 
# par(mfrow=c(1,2))
# matplot(output_RMSE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "RMSE", main = "Deaths Age 65+ Ratio RMSE: Bandwidth x Weighting Models")
# legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)
# matplot(output_MAE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "MAE", main = "Deaths Age 65+ Ratio MAE: Bandwidth x Weighting Models")
# legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)

###predict on Test

     ### Local Model Summary and goodness of fit statistics (training and OOB) 

D <- data.frame(grf.model$LocalModelSummary[c(4,6)])
colnames(D) <- c("Out of Bag R2", "Global R2")
D <- kbl(D, booktabs = T, linesep = "") %>% kable_styling(latex_options = "HOLD_position")

```

## Table S17: GWRF Delta Wave: OOB vs Global R2

```{r, echo=FALSE, message=FALSE, warning=FALSE}

D

```



```{r, echo=FALSE, message=FALSE, warning=FALSE}

#Yhat vs residuals
# 
# ggplot(risk_final5@data, aes(x=risk_final5@data$LM_yfitPred, y=risk_final5@data$LM_ResPred)) + geom_point() + geom_smooth(aes(method = "loess")) + theme_bw() + scale_x_continuous(name="Predicted") + scale_y_continuous(name="Residuals")
# #geom_smooth(method = "loess", n = 50, se = FALSE)
# 
# cor.test(risk_final5@data$deaths_adjusted, risk_final5@data$LM_ResPred, method= "pearson")

```



# Part 5: Geographically Weighted Random Forest Modeling: Omicron Wave

```{r covidrisk_GWRF_deaths_omicron, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
library(caret)
library(Metrics)
library(stringr)



#fix Hardin county voting percentage
rankings <- read.csv("./data/countyrankings_refined.csv")
# rankings <- rankings[1:21]
# rankings <- rankings[-c(8,9,10,13,14,15,17,18)] #only the most pertinent full list
# rankings <- rankings[-c(4,8,9,10,12)]

#colnames(rankings) <- c("FIPS", "State", "County", "Obesity", "FEI", "Physically_Inactive", "Exercise_Access", "Excessive_Drinking")
rankings$FIPS <- str_pad(rankings$FIPS, 5, pad = "0")

# # 
#risk_final_test <- merge(risk_final_latter, rankings, by="FIPS")
risk_final_test <- linear_risk_final_omicron2
#risk_final_test <- risk_final_test[-1]



risk_final_test$FIPS <- str_pad(risk_final_test$FIPS, 5, pad = "0")





#risk_final_test[598,11] <- .50
lw3 <- lw3[!duplicated(lw3[c('FIPS')]), ]
#risk_final3 <- merge(risk_final, lw3[lw3$FIPS == unique(lw3$FIPS),], by="FIPS", all=TRUE)

risk_final_test[is.na(risk_final_test)] <- 0

risk_final_test <- risk_final_test[risk_final_test$FIPS != 48301, ]


set.seed(1234)
split_rows = createDataPartition(risk_final_test$deaths_adjusted, p = 0.8, list = FALSE, times = 1)
dt_train = risk_final_test[split_rows,] 
dt_test = risk_final_test[-split_rows,] 
# dt_test <- rbind(dt_test[1, ] , dt_test)
#     dt_test <- dt_test[-1,]

lw3$FIPS <- as.integer(lw3$FIPS)
lw3$FIPS <- str_pad(lw3$FIPS, 5, pad = "0")


risk_final_original <- merge(risk_final_test, lw3, by="FIPS", all.x=TRUE)
risk_final3 <- merge(dt_train, lw3,  by="FIPS")
risk_final3_test <- merge(dt_test, lw3,  by="FIPS")

lw4_original <- data.frame(risk_final_original)
lw4 <- data.frame(risk_final3)

lw4[,51] <- as.numeric(lw4[,51])
lw4[,52] <- as.numeric(lw4[,52])

lw4_test <- data.frame(risk_final3_test)
lw4_test[,51] <- as.numeric(lw4_test[,51])
lw4_test[,52] <- as.numeric(lw4_test[,52])
# lw4_test[is.na(lw4_test)] <- 0

### Cross validation of bandwidth for Geographically weighted RF regression

#The local model of random forest uses same syntax used in the randomForest function of the R package randomForest. This is a string that is passed to the sub-models randomForest function. For more details look at the class formula.

#fix Hardin county voting percentage

#risk_final2 <- na.omit(risk_final)
#which(is.na(risk_final), arr.ind=TRUE)
dt_train[is.na(dt_train)] <- 0

#risk_final_test <- risk_final_test[risk_final_test$cuml.cases_adjusted != 0, ]
risk_final2 <- risk_final

Coord_original <- lw4_original[ ,c(52,51)]
Coords<-lw4[ ,c(52,51)]
colnames(Coords) <- c("X","Y")

Coords_test <- lw4_test[ ,c(52,51)]
colnames(Coords_test) <- c("X","Y")

# #Recursive Feature Elimination
# 
# control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# # run the RFE algorithm
# results <- rfe(risk_final_test[,c(6:9,10,11,15,18:20,23:27,30:31,35,38,39,40,47)], (risk_final_test[,12]), sizes=c(1:21), rfeControl=control)
# 
# #----
# names.use <- names(lw4)[names(lw4) %in% results$optVariables[1:10]]
# lw4 <- lw4[, c("deaths_adjusted", names.use)]

# risk_final_latter <- merge(risk_final_latter, rankings, by="FIPS")

lw4 <- cbind(lw4$deaths_adjusted, lw4$RPL_THEME1,lw4$RPL_THEME2, lw4$RPL_THEME3,lw4$RPL_THEME4, lw4$adjacent_ideology,   lw4$pct.x, lw4$Series_Complete_Pop_Pct, lw4$density,  lw4$Obesity,  lw4$Excessive_Drinking,lw4$Uninsured_Adults, lw4$Unemployed, lw4$Diabetes, lw4$Food_Insecurity, lw4$Associations, lw4$Age_over_65, lw4$broadband_access.y )
# 
# lw4 <- cbind(lw4$deaths_adjusted, lw4$RPL_THEME1,lw4$RPL_THEME2, lw4$RPL_THEME3,lw4$RPL_THEME4, lw4$divergence, lw4$adjacent_ideology,   lw4$pct.x, lw4$Series_Complete_Pop_Pct, lw4$density, lw4$policy, lw4$Obesity, lw4$FEI, lw4$Excessive_Drinking, lw4$Uninsured_Adults, lw4$Diabetes,lw4$Age_over_65 )
# lw4 <- as.data.frame(lw4)
# 
colnames(lw4) <- c("deaths_adjusted", "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" ,  "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" ,  "Obesity" ,"Excessive_Drinking", "Uninsured_Adults", "Unemployed", "Diabetes", "Food_Insecurity", "Associations", "Age_over_65", "broadband_access.y")
# 
# colnames(lw4) <- c("deaths_adjusted", "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "adjacent_ideology", "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "policy" , "Obesity" , "FEI" ,"Excessive_Drinking", "Uninsured_Adults", "Diabetes", "Age_over_65")

output_MAE <- data.frame(matrix(ncol = 5, nrow = 27))
output_RMSE <- data.frame(matrix(ncol = 5, nrow = 27))
#lw4 <- lw4 %>% mutate_if(is.character,as.numeric)
lw4 <- as.data.frame(lw4)

#bandwidth hypertuning
for (i in 1:30) {
risk_final_test$policy <- as.numeric(risk_final_test$policy)

# b <- paste(names.use, collapse ="+")
# grf.model <- grf(as.formula(paste("deaths_adjusted ~", b, sep="")),
#                  dframe=lw4,
#                  bw=i,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coords)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations

grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity   + Uninsured_Adults +  Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y,
                 dframe=lw4,
                 bw=i,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
                 ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
                 kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
                 forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
                 coords=Coords)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations

# 
# grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + divergence + pct.x + Series_Complete_Pop_Pct + density + policy + Obesity + FEI  + Excessive_Drinking + Uninsured_Adults + Diabetes + Age_over_65,
#                  dframe=lw4,
#                  bw=i,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coords)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations
# 

# names.use <- names(lw4_test)[names(lw4_test) %in% results$optVariables[1:10]]
# lw4_test2 <- lw4_test[, c("lat", "long", names.use)]
# names(lw4_test2)[names(lw4_test2) == 'lat'] <- 'X'
# names(lw4_test2)[names(lw4_test2) == 'long'] <- 'Y'

lw4_test2 <- cbind(lw4_test$lat, lw4_test$long, lw4_test$RPL_THEME1,lw4_test$RPL_THEME2, lw4_test$RPL_THEME3,lw4_test$RPL_THEME4,  lw4_test$divergence, lw4_test$pct.x, lw4_test$Series_Complete_Pop_Pct, lw4_test$density,  lw4_test$Obesity,  lw4_test$Excessive_Drinking, lw4_test$Uninsured_Adults, lw4_test$Unemployed, lw4_test$Diabetes, lw4_test$Food_Insecurity, lw4_test$Associations, lw4_test$Age_over_65, lw4_test$broadband_access.y )
colnames(lw4_test2) <- c("X", "Y",  "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" ,  "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "Obesity"  ,"Excessive_Drinking", "Uninsured_Adults", "Unemployed", "Diabetes", "Food_Insecurity", "Associations", "Age_over_65", "broadband_access.y")

# 
# lw4_test2 <- cbind(lw4_test$lat, lw4_test$long, lw4_test$RPL_THEME1,lw4_test$RPL_THEME2, lw4_test$RPL_THEME3,lw4_test$RPL_THEME4, lw4_test$adjacent_ideology, lw4_test$divergence, lw4_test$pct.x, lw4_test$Series_Complete_Pop_Pct, lw4_test$density, lw4_test$policy, lw4_test$Obesity, lw4_test$FEI, lw4_test$Excessive_Drinking, lw4_test$Uninsured_Adults, lw4_test$Diabetes, lw4_test$Age_over_65 )
# colnames(lw4_test2) <- c("X", "Y",  "RPL_THEME1" , "RPL_THEME2" , "RPL_THEME3" , "RPL_THEME4" , "adjacent_ideology", "divergence" , "pct.x" , "Series_Complete_Pop_Pct" , "density" , "policy" ,  "Obesity" , "FEI" ,"Excessive_Drinking", "Uninsured_Adults",  "Diabetes", "Age_over_65")


lw4_test2 <- as.data.frame(lw4_test2)
lw4_test2 <- lw4_test2 %>% mutate_if(is.character,as.numeric)

predict_grf1 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=0, global.w=1)
model_predict_grf1 <- lm(predict_grf1 ~ lw4_test$deaths_adjusted)
model_predict_grf1_RMSE <- sqrt(mean(model_predict_grf1$residuals^2))
model_predict_grf1_MAE <- mae(predict_grf1, lw4_test$deaths_adjusted)

predict_grf2 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.25, global.w=.75)
model_predict_grf2 <- lm(predict_grf2 ~ lw4_test$deaths_adjusted)
model_predict_grf2_RMSE <- sqrt(mean(model_predict_grf2$residuals^2))
model_predict_grf2_MAE <- mae(predict_grf2, lw4_test$deaths_adjusted)

predict_grf3 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.5, global.w=.5)
model_predict_grf3 <- lm(predict_grf3 ~ lw4_test$deaths_adjusted)
model_predict_grf3_RMSE <- sqrt(mean(model_predict_grf3$residuals^2))
model_predict_grf3_MAE <- mae(predict_grf3, lw4_test$deaths_adjusted)

predict_grf4 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=.75, global.w=.25)
model_predict_grf4 <- lm(predict_grf4 ~ lw4_test$deaths_adjusted)
model_predict_grf4_RMSE <- sqrt(mean(model_predict_grf4$residuals^2))
model_predict_grf4_MAE <- mae(predict_grf4, lw4_test$deaths_adjusted)

predict_grf5 <- predict.grf(grf.model, lw4_test2, x.var.name="X", y.var.name="Y", local.w=1, global.w=0)
model_predict_grf5 <- lm(predict_grf5 ~ lw4_test$deaths_adjusted)
model_predict_grf5_RMSE <- sqrt(mean(model_predict_grf5$residuals^2))
model_predict_grf5_MAE <- mae(predict_grf5, lw4_test$deaths_adjusted)

output_RMSE[i,] <- c(model_predict_grf1_RMSE, model_predict_grf2_RMSE, model_predict_grf3_RMSE, model_predict_grf4_RMSE, model_predict_grf5_RMSE)
output_MAE[i,] <- c(model_predict_grf1_MAE, model_predict_grf2_MAE, model_predict_grf3_MAE, model_predict_grf4_MAE, model_predict_grf5_MAE)

}


bw2 <- which.min(output_RMSE[3:30,2])
bw3 <- which.min(output_RMSE[3:30,3])
bw4 <- which.min(output_RMSE[3:30,4])
bw5 <- which.min(output_RMSE[3:30,5])
bw_final <- c(bw2,bw3,bw4,bw5)+2
bw <- min(bw_final)

bw <- 12

grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 +  divergence + pct.x + Series_Complete_Pop_Pct + density + Obesity   + Uninsured_Adults +  Unemployed + Diabetes + Food_Insecurity + Associations + Age_over_65 + broadband_access.y,
                 dframe=risk_final_test,
                 bw=bw,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
                 ntree=500,          # n integer referring to the number of trees to grow for each of the local random forests.
                 kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
                 forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
                 coords=Coord_original)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations
# 
# grf.model <- grf(deaths_adjusted ~ RPL_THEME1 + RPL_THEME2 + RPL_THEME3 + RPL_THEME4 + adjacent_ideology + divergence + pct.x + Series_Complete_Pop_Pct + density + policy + Obesity + FEI  + Excessive_Drinking + Uninsured_Adults + Diabetes  + Age_over_65,
#                  dframe=risk_final_test,
#                  bw=bw,              # a positive number, in the case of an "adaptive kernel" or a real in the case of a "fixed kernel".
#                  ntree=50,          # n integer referring to the number of trees to grow for each of the local random forests.
#                  kernel="adaptive",  # the kernel to be used in the regression. Options are "adaptive" or "fixed".
#                  forests = TRUE,     # a option to save and export (TRUE) or not (FALSE) all the local forests
#                  coords=Coord_original)      # a numeric matrix or data frame of two columns giving the X,Y coordinates of the observations



#predict.grf(grf.model, risk_final_test2, x.var.name="lat", y.var.name="long", local.w=1, global.w=0)

### Global Variable Importance


A <- grf.model$Global.Model$importance 

### Global Mean MSE of 500 tree

B <- mean(grf.model$Global.Model$mse)

### Global Mean R2 of 500 tree

C <- mean(grf.model$Global.Model$rsq)


### Local feature importance (IncMSE)


### Local feature importance (IncMSE)
grf.model$Local.Pc.IncMSE$FIPS <- risk_final_test$FIPS
risk_final4 <- merge(counties_merged, grf.model$Local.Pc.IncMSE, by="FIPS", duplicateGeoms = T)


#### Plot  local feature importance (IncMSE)

polys<- list("sp.lines", as(states, "SpatialLines"), col="grey", lwd=.8,lty=1)
col.palette<-colorRampPalette(c("blue",  "sky blue", "green","yellow", "red"),space="rgb",interpolate = "linear")



col.palette.t<-colorRampPalette(c("lightseagreen","lightsteelblue1", "moccasin","hotpink", "red"),space="rgb",interpolate = "linear") 

RPL_THEME1<-spplot(risk_final4,"RPL_THEME1", main = "Socioeconomic", 
             sp.layout=list(polys),
             col="transparent",
             col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))
RPL_THEME2<-spplot(risk_final4,"RPL_THEME2", main = "Household Composition & Disability", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

RPL_THEME3<-spplot(risk_final4,"RPL_THEME3", main = "Minority Status & Language", 
             sp.layout=list(polys),
             col="transparent",
             col.regions=col.palette.t(100), colorkey =  list(tick.number =4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

RPL_THEME4<-spplot(risk_final4,"RPL_THEME4", main = "Housing Type & Transportation", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

divergence<-spplot(risk_final4,"divergence.y", main = "Political Divergence", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

voting <-spplot(risk_final4,"pct.x", main = "Democratic Voting Pct", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

vaccination <-spplot(risk_final4,"Series_Complete_Pop_Pct", main = "Vaccination Rate", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

density <-spplot(risk_final4,"density", main = "Population Density", 
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

obesity <-spplot(risk_final4,"Obesity", main = "Obesity",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))
# #
# fei <-spplot(risk_final4,"FEI", main = "Food Environmental Index",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

# physically_inactive <-spplot(risk_final4,"Physically_Inactive", main = "Physical Inactivity",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# 
# exercise_access <-spplot(risk_final4,"Exercise_Access", main = "Access to Exercise Opportunities",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

# excessive_drinking <-spplot(risk_final4,"Excessive_Drinking", main = "Excessive Drinking",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))
# # 
# smoking <-spplot(risk_final4,"Smoking", main = "Smoking",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

uninsured_adults <-spplot(risk_final4,"Uninsured_Adults", main = "Uninsured_Adults",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))
# 
# some_college <-spplot(risk_final4,"Some_College", main = "Some_College",
#             sp.layout=list(polys),
#             col="transparent",
#             col.regions=col.palette.t(100))

associations <-spplot(risk_final4,"Associations", main = "Associations",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

diabetes <-spplot(risk_final4,"Diabetes", main = "Diabetes",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

food_insecurity <-spplot(risk_final4,"Food_Insecurity", main = "Food_Insecurity",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

unemployed <-spplot(risk_final4,"Unemployed", main = "Unemployed",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

age_over_65 <-spplot(risk_final4,"Age_over_65", main = "Age over 65",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

broadband_access <-spplot(risk_final4,"broadband_access.y", main = "Broadband Access",
            sp.layout=list(polys),
            col="transparent",
            col.regions=col.palette.t(100), colorkey =  list(tick.number = 4, labels = list( labels = c("-5%", "0%", "5%", "10%"),  width = 2, cex = 2)))

# 
#plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, policy, vaccination, density, nrow = 2, ncol=5, heights = c(30,6), top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))

# plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, vaccination, density,obesity,fei,excessive_drinking,smoking,some_college,unemployed,uninsured_adults,associations,diabetes,food_insecurity,age_over_65, ncol=1, top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))
# 
# plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence, voting, vaccination, density,obesity,fei,excessive_drinking,uninsured_adults,diabetes,age_over_65, ncol=1, top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))

#plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, divergence,ncol=5, heights = c(30,6), top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))

#plotrf

#add dependent back into model output for plotting and comparison

### Local goodness of fit 

#risk_final4@data$loc_R2=grf.model$LGofFit$LM_Rsq100
# 
# grf.model$LGofFit$FIPS <- risk_final_test$FIPS
# risk_final5 <- merge(counties_merged, grf.model$LGofFit, by="FIPS", duplicateGeoms = T)
# # 
# risk_final5 <- merge(risk_final5, risk_final_test, by = "FIPS", duplicateGeoms = T )
# 

#data_counties <- merge(counties_merged, linear_risk_final2, by="FIPS", duplicateGeoms = TRUE)

grf.model$LGofFit$FIPS <- risk_final_test$FIPS
risk_final5 <- merge(data_counties4, grf.model$LGofFit, by="FIPS", duplicateGeoms = T)


myPaletteRes <- colorRampPalette(c("lightseagreen","lightsteelblue1", "moccasin","hotpink", "red"))
local_r2<-spplot(risk_final5,"LM_Rsq100", main = paste("Local R2 (%) - Bandwidth = ", bw, sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), colorkey =  list(tick.number = 10, labels = list( labels = c("-.80", "-.60", "-.40", "-.20", "0", ".20", ".40", ".60", ".80", "1"),  width = 2, cex = 2)))




#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2)

#residuals

# local_r2_residuals<-spplot(risk_final5,"LM_MSR", main = paste("Mean Square due to Regression - Bandwidth = ", bw, sep=""), 
#                  sp.layout=list(polys),
#                  col="transparent",
#                  col.regions=myPaletteRes(100))
# #windows(width=4, height=3.5)
# #tiff( file="FIG_GWRP_Std_Residuals.tif", 
# #      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
# #      restoreConsole = T,bg="transparent")
# print(local_r2_residuals)

local_r2_residuals2<-spplot(risk_final5,"LM_yfitOOB", main = paste("Out of Bag Prediction - Bandwidth = ", bw, sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), at=seq(0, .004, length.out=100), colorkey = list(labels = list( labels = c("0.0000", "0.0005", "0.0010", "0.0015", "0.0020", "0.0025", "0.0030", "0.0035", "0.0040"), width = 2, cex = 2)))
#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2_residuals)

local_r2_residuals3<-spplot(risk_final5,"LM_yfitPred", main = paste("Global Prediction - Bandwidth = ", bw, sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), at=seq(0, .004, length.out=100), colorkey = list(labels = list( labels = c("0.0000", "0.0005", "0.0010", "0.0015", "0.0020", "0.0025", "0.0030", "0.0035", "0.0040"), width = 2, cex = 2)))
#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2_residuals)


local_r2_residuals4<-spplot(risk_final5,"deaths_adjusted", main = paste("Deaths Adjusted", sep=""), 
                 sp.layout=list(polys),
                 col="transparent",
                 col.regions=myPaletteRes(100), at=seq(0, .004, length.out=100), colorkey = list(labels = list( labels = c("0.0000", "0.0005", "0.0010", "0.0015", "0.0020", "0.0025", "0.0030", "0.0035", "0.0040"), width = 2, cex = 2)))
#windows(width=4, height=3.5)
#tiff( file="FIG_GWRP_Std_Residuals.tif", 
#      width=4, height=3.5,units = "in", pointsize = 12, res=1600,
#      restoreConsole = T,bg="transparent")
#print(local_r2_residuals)

```

## Figure S87: GWRF Omicron Wave: Model Weighting

```{r, echo=FALSE, message=FALSE, warning=FALSE}



par(mfrow=c(1,2))
matplot(output_RMSE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "RMSE", main = "Deaths RMSE: Bandwidth x Weighting Models")
legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)
matplot(output_MAE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "MAE", main = "Deaths MAE: Bandwidth x Weighting Models")
legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)

```

\newpage

## Figure S88: GWRF Omicron Wave: Residuals vs. Predicted

```{r, echo=FALSE, message=FALSE, warning=FALSE}

par(mfrow=c(1,1))
ggplot(risk_final5@data, aes(x=risk_final5@data$LM_yfitPred, y=risk_final5@data$LM_ResPred)) + geom_point() + geom_smooth(aes(method = "loess")) + theme_bw() + scale_x_continuous(name="Predicted") + scale_y_continuous(name="Residuals")  + ggtitle("Residuals vs. Prediction") 
#geom_smooth(method = "loess", n = 50, se = FALSE)

cor.test(risk_final5@data$deaths_adjusted, risk_final5@data$LM_ResPred, method= "pearson")
```

\newpage

## Figure S89: GWRF Omicron Wave: Model Prediction Results

```{r, echo=FALSE, message=FALSE, warning=FALSE}

plotrf <- grid.arrange(local_r2, local_r2_residuals2,local_r2_residuals3,local_r2_residuals4, nrow = 2, ncol=2, heights = c(1000,1000),  top = textGrob("Model Predictions",gp=gpar(fontsize=25)))

```


## Figure S90: GWRF Omicron Wave: Model Feature Importance

```{r, echo=FALSE, message=FALSE, warning=FALSE}

plotrf <- grid.arrange(RPL_THEME1, RPL_THEME2,RPL_THEME3,RPL_THEME4, nrow = 2, ncol=2, heights = c(1000,1000),  top = textGrob("Local Feature Importance (IncMSE)",gp=gpar(fontsize=25)))
                       
      plotrf <- grid.arrange(divergence, voting, vaccination, density, nrow = 2, ncol=2, heights = c(1000,1000))
      
      
     plotrf <- grid.arrange( obesity,unemployed, uninsured_adults,associations, nrow = 2, ncol=2, heights = c(1000,1000))
     
     plotrf <- grid.arrange(diabetes,food_insecurity,age_over_65, broadband_access,  nrow = 2, ncol=2, heights = c(1000,1000))
# 
# print(RPL_THEME1)
# print(RPL_THEME2)
# print(RPL_THEME3)
# print(RPL_THEME4)
# print(divergence)
# print(voting)
# print(vaccination)
# print(density)
# print(obesity)
# 
# #print(fei)
# print(excessive_drinking)
# #print(smoking)
# #print(some_college)
# print(unemployed)
# print(uninsured_adults)
# print(associations)
# print(diabetes)
# print(food_insecurity)
# print(age_over_65)
# print(broadband_access)
# 
# par(mfrow=c(1,2))
# matplot(output_RMSE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "RMSE", main = "Deaths Age 65+ Ratio RMSE: Bandwidth x Weighting Models")
# legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)
# matplot(output_MAE, type = "b",pch=1,col = 1:5, xlab = "Bandwidth", ylab = "MAE", main = "Deaths Age 65+ Ratio MAE: Bandwidth x Weighting Models")
# legend("topright", legend = c("L0, G1", "L.25, G.75", "L.50, G.50", "L.75, G.25", "L1, G0"), col=1:5, pch=1)

###predict on Test

     ### Local Model Summary and goodness of fit statistics (training and OOB) 

D <- data.frame(grf.model$LocalModelSummary[c(4,6)])
colnames(D) <- c("Out of Bag R2", "Global R2")
D <- kbl(D, booktabs = T, linesep = "") %>% kable_styling(latex_options = "HOLD_position")

```

## Table S18: GWRF Omicron Wave: OOB vs Global R2

```{r, echo=FALSE, message=FALSE, warning=FALSE}

D

```



```{r, echo=FALSE, message=FALSE, warning=FALSE}

#Yhat vs residuals
# 
# ggplot(risk_final5@data, aes(x=risk_final5@data$LM_yfitPred, y=risk_final5@data$LM_ResPred)) + geom_point() + geom_smooth(aes(method = "loess")) + theme_bw() + scale_x_continuous(name="Predicted") + scale_y_continuous(name="Residuals")
# #geom_smooth(method = "loess", n = 50, se = FALSE)
# 
# cor.test(risk_final5@data$deaths_adjusted, risk_final5@data$LM_ResPred, method= "pearson")

```






