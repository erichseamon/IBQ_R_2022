---
title: "IBQ_R 2022"
author: "Masha Gartstein, Erich Seamon"
date: "10/25/2022"
output: pdf_document
classoption: landscape
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, fig.width=15, fig.height=8.5)
knitr::opts_knit$set(root.dir = "/mnt/ceph/erichs/git/IBQ_R_2022/", warning = FALSE, message = FALSE)  # with something else than `getwd()`
```


```{r, results='hide', echo=FALSE, warning = FALSE, message = FALSE, error=FALSE, fig.width = 10.5, fig.height = 7.5}

library(dplyr)
library(lubridate)
library(tidyr)
library(data.table)
library(caret)
library(doParallel)
library(plyr)
library(mice)
library(VIM)

ibq <- read.csv("./data/IBQ-R VSF Preterms Sept23.csv")
ibq[ibq == -99999] <- NA
#ibq[8:45] <- lapply(ibq[8:45], factor)  ## as.factor() could also be used

#ibq_mice <- md.pattern(ibq[8:45])
#aggr_plot <- aggr(ibq[8:45], col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(ibq[8:45]), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))

tempData <- mice(ibq[8:44],m=5,maxit=5,meth='pmm',seed=500)
ibq_impute <- complete(tempData,5)

ibq_impute <- cbind(ibq[1:7], ibq_impute, ibq[46:48])

```

# Exploratory Data Analysis

```{r, echo=FALSE, warning = FALSE, message = FALSE, error=FALSE, fig.width = 10.5, fig.height = 7.5}

#aggr_plot <- aggr(tempData$data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(tempData$data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))

#densityplot(tempData)
#EDA


# bwplot(researcher ~ sur, data = ibq_impute)
# bwplot(researcher ~ na, data = ibq_impute)
# bwplot(researcher ~ ec, data = ibq_impute)
# 
# bwplot(infantrace ~ sur, data = ibq_impute)
# bwplot(infantrace ~ na, data = ibq_impute)
# bwplot(infantrace ~ ec, data = ibq_impute)
# 
# bwplot(infantgender ~ sur, data = ibq_impute)
# bwplot(infantgender ~ na, data = ibq_impute)
# bwplot(infantgender ~ ec, data = ibq_impute)

```


## Model Development and Output: Control Group One VS. Experimental - ALL VARIABLES

```{r, echo=FALSE, warning = FALSE, message = FALSE, error=FALSE, fig.width = 10.5, fig.height = 7.5}

library(haven)
library(klaR)
#Infant gender model construction

ibq <- ibq_impute

ibq$group <- as.factor(ibq$group)
ibq$group <- revalue(ibq$group, c("0"="experimental", "1"="control_one", "2"="control_two"))

ibq <- ibq[ibq$group != "control_two",]
ibq$group <- factor(ibq$group)
ibq$group <- relevel(ibq$group, "control_one")

#ibq <- subset(ibq, AgeGrp == "three")

# ibq$infantgender <- as.factor(ibq$infantgender)
# levels(ibq$infantgender) <- c('male', 'female')

set.seed(103)
inTraining <- createDataPartition(ibq$group, p = .7, list = FALSE)
training <- ibq[ inTraining,]
testing  <- ibq[-inTraining,]

fmla <- as.formula(paste("group ~ ", paste(colnames(ibq[c(8:44)]), collapse= "+")))
predictors <- colnames(ibq[c(8:44)])

train_control<- trainControl(method="repeatedcv", savePredictions = "final", classProbs = T, returnResamp='all')

cl <- makePSOCKcluster(10)
registerDoParallel(cl)

fit_rf_control_one_all <- caret::train(fmla, data=training, method="rf", trControl = train_control, importance = TRUE)
fit_lda_control_one_all <- caret::train(fmla, data=training, method="lda", trControl = train_control)
fit_glm_control_one_all <- caret::train(fmla, data=training, method="glm", trControl = train_control)
fit_knn_control_one_all <- caret::train(fmla, data=training, method="knn",trControl = train_control)
fit_nb_control_one_all <- caret::train(fmla, data=training, method="nb", trControl = train_control)
fit_svm_control_one_all <- caret::train(fmla, data=training, method="svmRadial", trControl = train_control)
fit_cart_control_one_all <- caret::train(fmla, data=training, method="rpart", trControl = train_control)
fit_c50_control_one_all <- caret::train(fmla, data=training, method="C5.0", trControl = train_control)
fit_treebag_control_one_all <- caret::train(fmla, data=training, method="treebag", trControl = train_control)
fit_gbm_control_one_all <- caret::train(fmla, data=training, method="gbm", trControl = train_control, verbose = FALSE)
fit_adabag_control_one_all <- caret::train(fmla, data=training, method="AdaBag", trControl = train_control)

## When you are done:
stopCluster(cl)


#infant gender model results

results <- resamples(list(lda=fit_lda_control_one_all, glm=fit_glm_control_one_all, svm=fit_svm_control_one_all, knn=fit_knn_control_one_all, nb=fit_nb_control_one_all, cart=fit_cart_control_one_all, c50=fit_c50_control_one_all,treebag=fit_treebag_control_one_all, rf=fit_rf_control_one_all, gbm=fit_gbm_control_one_all, adabag=fit_adabag_control_one_all))
# Table comparison
#summary(results)

# boxplot comparison
bwplot(results, main = "Model Accuracy Estimates: Control Group One VS. Experimental Group - All Variables")
# Dot-plot comparison
#dotplot(results)




```

\newpage

```{r, echo=FALSE, warning = FALSE, message = FALSE, error=FALSE, fig.width = 10.5, fig.height = 7.5}

modellist <- c("lda", "glm", "svm", "knn", "nb", "cart", "c50", "treebag", "rf", "gbm", "adabag")
leng <- 1:length(modellist)  
txt <- NULL
txt2 <- NULL
j <- 1
for (i in modellist) {
  modelnumber <- leng[j]
  library("ROCR")
  ### CONSTRUCTING ROC AUC PLOT:
  # Get the posteriors as a dataframe.
  predictions <-predict(object = eval(parse(text=paste("fit_", i, "_control_one_all", sep=""))), testing[,predictors], type = "prob")
  predictions.posteriors <- as.data.frame(predictions)
  
  # Evaluate the model
  pred <- prediction(predictions.posteriors[,2], testing[,3])
  roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
  auc.train <- performance(pred, measure = "auc")
  auc.train <- auc.train@y.values
  # Plot
  
  par(mar=c(5.1, 4.1, 4.1, 13), xpd=TRUE) 
  
  if(modelnumber == 1) {
    plot(roc.perf, col = j, main = "ROC Curve: Control Group One VS. Experimental - All Variables", cex.lab = 1.5, cex.main = 1.5)  
    #abline(a=0, b= 1)
    #text(x = .25, y = .65 ,paste("AUC = ", round(auc.train[[1]],3), sep = ""))
  } else{
    plot(roc.perf, col = j, add = TRUE, main = "ROC Curve: Control Group One VS. Experimental - All Variables", cex.lab = 1.5, cex.main = 1.5)
    #abline(a=0, b= 1)
    
  }
  txt[j] <- paste(i, " AUC = ", round(auc.train[[1]],3), sep = "")
  txt2[j] <- round(auc.train[[1]],3)
  j <- j+1
  
}

legend("bottomright", txt, inset=c(-.35,0), lty = 1, col = c(1:11), cex = 1.1, xpd=TRUE )


results_one_all <- results
auc_one_all <- txt2

```



## Model Development and Output: Control Group Two VS. Experimental - ALL VARIABLES

```{r, echo=FALSE, warning = FALSE, message = FALSE, error=FALSE, fig.width = 10.5, fig.height = 7.5}

library(haven)
library(klaR)
#Infant gender model construction

ibq <- ibq_impute

ibq$group <- as.factor(ibq$group)
ibq$group <- revalue(ibq$group, c("0"="experimental", "1"="control_one", "2"="control_two"))

ibq <- ibq[ibq$group != "control_one",]
ibq$group <- factor(ibq$group)
ibq$group <- relevel(ibq$group, "control_two")

#ibq <- subset(ibq, AgeGrp == "three")

# ibq$infantgender <- as.factor(ibq$infantgender)
# levels(ibq$infantgender) <- c('male', 'female')

set.seed(103)
inTraining <- createDataPartition(ibq$group, p = .7, list = FALSE)
training <- ibq[ inTraining,]
testing  <- ibq[-inTraining,]

fmla <- as.formula(paste("group ~ ", paste(colnames(ibq[c(8:44)]), collapse= "+")))
predictors <- colnames(ibq[c(8:44)])

train_control<- trainControl(method="repeatedcv", savePredictions = "final", classProbs = T, returnResamp='all')

cl <- makePSOCKcluster(10)
registerDoParallel(cl)

fit_rf_control_two_all <- caret::train(fmla, data=training, method="rf", trControl = train_control, importance = TRUE)
fit_lda_control_two_all <- caret::train(fmla, data=training, method="lda", trControl = train_control)
fit_glm_control_two_all <- caret::train(fmla, data=training, method="glm", trControl = train_control)
fit_knn_control_two_all <- caret::train(fmla, data=training, method="knn",trControl = train_control)
fit_nb_control_two_all <- caret::train(fmla, data=training, method="nb", trControl = train_control)
fit_svm_control_two_all <- caret::train(fmla, data=training, method="svmRadial", trControl = train_control)
fit_cart_control_two_all <- caret::train(fmla, data=training, method="rpart", trControl = train_control)
fit_c50_control_two_all <- caret::train(fmla, data=training, method="C5.0", trControl = train_control)
fit_treebag_control_two_all <- caret::train(fmla, data=training, method="treebag", trControl = train_control)
fit_gbm_control_two_all <- caret::train(fmla, data=training, method="gbm", trControl = train_control, verbose = FALSE)
fit_adabag_control_two_all <- caret::train(fmla, data=training, method="AdaBag", trControl = train_control)

## When you are done:
stopCluster(cl)


#infant gender model results

results <- resamples(list(lda=fit_lda_control_two_all, glm=fit_glm_control_two_all, svm=fit_svm_control_two_all, knn=fit_knn_control_two_all, nb=fit_nb_control_two_all, cart=fit_cart_control_two_all, c50=fit_c50_control_two_all,treebag=fit_treebag_control_two_all, rf=fit_rf_control_two_all, gbm=fit_gbm_control_two_all, adabag=fit_adabag_control_two_all))
# Table comparison
#summary(results)

# boxplot comparison
bwplot(results, main = "Model Accuracy Estimates: Control Group Two VS. Experimental Group - All Variables")
# Dot-plot comparison
#dotplot(results)




```

\newpage



```{r, echo=FALSE, warning = FALSE, message = FALSE, error=FALSE, fig.width = 10.5, fig.height = 7.5}

modellist <- c("lda", "glm", "svm", "knn", "nb", "cart", "c50", "treebag", "rf", "gbm", "adabag")
leng <- 1:length(modellist)  
txt <- NULL
txt2 <- NULL
j <- 1
for (i in modellist) {
  modelnumber <- leng[j]
  library("ROCR")
  ### CONSTRUCTING ROC AUC PLOT:
  # Get the posteriors as a dataframe.
  predictions <-predict(object = eval(parse(text=paste("fit_", i, "_control_two_all", sep=""))), testing[,predictors], type = "prob")
  predictions.posteriors <- as.data.frame(predictions)
  
  # Evaluate the model
  pred <- prediction(predictions.posteriors[,2], testing[,3])
  roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
  auc.train <- performance(pred, measure = "auc")
  auc.train <- auc.train@y.values
  # Plot
  
  par(mar=c(5.1, 4.1, 4.1, 13), xpd=TRUE) 
  
  if(modelnumber == 1) {
    plot(roc.perf, col = j, main = "ROC Curve: Control Group Two VS. Experimental - All Variables", cex.lab = 1.5, cex.main = 1.5)  
    #abline(a=0, b= 1)
    #text(x = .25, y = .65 ,paste("AUC = ", round(auc.train[[1]],3), sep = ""))
  } else{
    plot(roc.perf, col = j, add = TRUE, main = "ROC Curve: Control Group Two VS. Experimental - All Variables", cex.lab = 1.5, cex.main = 1.5)
    #abline(a=0, b= 1)
    
  }
  txt[j] <- paste(i, " AUC = ", round(auc.train[[1]],3), sep = "")
  txt2[j] <- round(auc.train[[1]],3)
  j <- j+1
  
}

legend("bottomright", txt, inset=c(-.35,0), lty = 1, col = c(1:11), cex = 1.1, xpd=TRUE )


results_two_all <- results
auc_two_all <- txt2

```

## Model Development and Output: Control Group One VS. Experimental - TRANSFORMED VARIABLES


```{r, echo=FALSE, warning = FALSE, results = 'hide', message = FALSE, error=FALSE, fig.width = 10.5, fig.height = 7.5}

library(haven)
library(klaR)
#Infant gender model construction

ibq <- ibq_impute

ibq$group <- as.factor(ibq$group)
ibq$group <- revalue(ibq$group, c("0"="experimental", "1"="control_one", "2"="control_two"))

ibq <- ibq[ibq$group != "control_two",]
ibq$group <- factor(ibq$group)
ibq$group <- relevel(ibq$group, "control_one")
#ibq <- subset(ibq, AgeGrp == "three")

# ibq$infantgender <- as.factor(ibq$infantgender)
# levels(ibq$infantgender) <- c('male', 'female')

set.seed(103)
inTraining <- createDataPartition(ibq$group, p = .7, list = FALSE)
training <- ibq[ inTraining,]
testing  <- ibq[-inTraining,]

fmla <- as.formula(paste("group ~ ", paste(colnames(ibq[c(45:47)]), collapse= "+")))
predictors <- colnames(ibq[c(45:47)])

train_control<- trainControl(method="repeatedcv", savePredictions = "final", classProbs = T, returnResamp='all')

cl <- makePSOCKcluster(10)
registerDoParallel(cl)

fit_rf_control_one_trans <- caret::train(fmla, data=training, method="rf", trControl = train_control, importance = TRUE)
fit_lda_control_one_trans <- caret::train(fmla, data=training, method="lda", trControl = train_control)
fit_glm_control_one_trans <- caret::train(fmla, data=training, method="glm", trControl = train_control)
fit_knn_control_one_trans <- caret::train(fmla, data=training, method="knn",trControl = train_control)
fit_nb_control_one_trans <- caret::train(fmla, data=training, method="nb", trControl = train_control)
fit_svm_control_one_trans <- caret::train(fmla, data=training, method="svmRadial", trControl = train_control)
fit_cart_control_one_trans <- caret::train(fmla, data=training, method="rpart", trControl = train_control)
fit_c50_control_one_trans <- caret::train(fmla, data=training, method="C5.0", trControl = train_control)
fit_treebag_control_one_trans <- caret::train(fmla, data=training, method="treebag", trControl = train_control)
fit_gbm_control_one_trans <- caret::train(fmla, data=training, method="gbm", trControl = train_control, verbose = FALSE)
fit_adabag_control_one_trans <- caret::train(fmla, data=training, method="AdaBag", trControl = train_control)

## When you are done:
stopCluster(cl)


#infant gender model results

results <- resamples(list(lda=fit_lda_control_one_trans, glm=fit_glm_control_one_trans, svm=fit_svm_control_one_trans, knn=fit_knn_control_one_trans, nb=fit_nb_control_one_trans, cart=fit_cart_control_one_trans, c50=fit_c50_control_one_trans,treebag=fit_treebag_control_one_trans, rf=fit_rf_control_one_trans, gbm=fit_gbm_control_one_trans, adabag=fit_adabag_control_one_trans))
# Table comparison
#summary(results)

# boxplot comparison
bwplot(results, main = "Model Accuracy Estimates: Control Group One VS. Experimental Group - Transformed Variables")
# Dot-plot comparison
#dotplot(results)




```

\newpage

```{r, echo=FALSE, warning = FALSE, message = FALSE, error=FALSE, fig.width = 10.5, fig.height = 7.5}

modellist <- c("lda", "glm", "svm", "knn", "nb", "cart", "c50", "treebag", "rf", "gbm", "adabag")
leng <- 1:length(modellist)  
txt <- NULL
txt2 <- NULL
j <- 1
for (i in modellist) {
  modelnumber <- leng[j]
  library("ROCR")
  ### CONSTRUCTING ROC AUC PLOT:
  # Get the posteriors as a dataframe.
  predictions <-predict(object = eval(parse(text=paste("fit_", i, "_control_one_trans", sep=""))), testing[,predictors], type = "prob")
  predictions.posteriors <- as.data.frame(predictions)
  
  # Evaluate the model
  pred <- prediction(predictions.posteriors[,2], testing[,3])
  roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
  auc.train <- performance(pred, measure = "auc")
  auc.train <- auc.train@y.values
  # Plot
  
  par(mar=c(5.1, 4.1, 4.1, 13), xpd=TRUE) 
  
  if(modelnumber == 1) {
    plot(roc.perf, col = j, main = "ROC Curve: Control Group One VS. Experimental - Transformed Variables", cex.lab = 1.5, cex.main = 1.5)  
    #abline(a=0, b= 1)
    #text(x = .25, y = .65 ,paste("AUC = ", round(auc.train[[1]],3), sep = ""))
  } else{
    plot(roc.perf, col = j, add = TRUE, main = "ROC Curve: Control Group One VS. Experimental - Transformed Variables", cex.lab = 1.5, cex.main = 1.5)
    #abline(a=0, b= 1)
    
  }
  txt[j] <- paste(i, " AUC = ", round(auc.train[[1]],3), sep = "")
  txt2[j] <- round(auc.train[[1]],3)
  j <- j+1
  
}

legend("bottomright", txt, inset=c(-.35,0), lty = 1, col = c(1:11), cex = 1.1, xpd=TRUE )


results_one_trans <- results
auc_one_trans <- txt2

```



## Model Development and Output: Control Group Two VS. Experimental - TRANSFORMED VARIABLES

```{r, echo=FALSE, results = 'hide', warning = FALSE, message = FALSE, error=FALSE, fig.width = 10.5, fig.height = 7.5}

library(haven)
library(klaR)
#Infant gender model construction

ibq <- ibq_impute

ibq$group <- as.factor(ibq$group)
ibq$group <- revalue(ibq$group, c("0"="experimental", "1"="control_one", "2"="control_two"))

ibq <- ibq[ibq$group != "control_one",]
ibq$group <- factor(ibq$group)
ibq$group <- relevel(ibq$group, "control_two")

#ibq <- subset(ibq, AgeGrp == "three")

# ibq$infantgender <- as.factor(ibq$infantgender)
# levels(ibq$infantgender) <- c('male', 'female')

set.seed(103)
inTraining <- createDataPartition(ibq$group, p = .7, list = FALSE)
training <- ibq[ inTraining,]
testing  <- ibq[-inTraining,]

fmla <- as.formula(paste("group ~ ", paste(colnames(ibq[c(45:47)]), collapse= "+")))
predictors <- colnames(ibq[c(45:47)])

train_control<- trainControl(method="repeatedcv", savePredictions = "final", classProbs = T, returnResamp='all')

cl <- makePSOCKcluster(10)
registerDoParallel(cl)

fit_rf_control_two_trans <- caret::train(fmla, data=training, method="rf", trControl = train_control, importance = TRUE)
fit_lda_control_two_trans <- caret::train(fmla, data=training, method="lda", trControl = train_control)
fit_glm_control_two_trans <- caret::train(fmla, data=training, method="glm", trControl = train_control)
fit_knn_control_two_trans <- caret::train(fmla, data=training, method="knn",trControl = train_control)
fit_nb_control_two_trans <- caret::train(fmla, data=training, method="nb", trControl = train_control)
fit_svm_control_two_trans <- caret::train(fmla, data=training, method="svmRadial", trControl = train_control)
fit_cart_control_two_trans <- caret::train(fmla, data=training, method="rpart", trControl = train_control)
fit_c50_control_two_trans <- caret::train(fmla, data=training, method="C5.0", trControl = train_control)
fit_treebag_control_two_trans <- caret::train(fmla, data=training, method="treebag", trControl = train_control)
fit_gbm_control_two_trans <- caret::train(fmla, data=training, method="gbm", trControl = train_control, verbose = FALSE)
fit_adabag_control_two_trans <- caret::train(fmla, data=training, method="AdaBag", trControl = train_control)

## When you are done:
stopCluster(cl)


#infant gender model results

results <- resamples(list(lda=fit_lda_control_two_trans, glm=fit_glm_control_two_trans, svm=fit_svm_control_two_trans, knn=fit_knn_control_two_trans, nb=fit_nb_control_two_trans, cart=fit_cart_control_two_trans, c50=fit_c50_control_two_trans,treebag=fit_treebag_control_two_trans, rf=fit_rf_control_two_trans, gbm=fit_gbm_control_two_trans, adabag=fit_adabag_control_two_trans))
# Table comparison
#summary(results)

# boxplot comparison
bwplot(results, main = "Model Accuracy Estimates: Control Group Two VS. Experimental Group - Transformed Variables")
# Dot-plot comparison
#dotplot(results)




```





```{r, echo=FALSE, warning = FALSE, message = FALSE, error=FALSE, fig.width = 10.5, fig.height = 7.5}

modellist <- c("lda", "glm", "svm", "knn", "nb", "cart", "c50", "treebag", "rf", "gbm", "adabag")
leng <- 1:length(modellist)  
txt <- NULL
txt2 <- NULL
j <- 1
for (i in modellist) {
  modelnumber <- leng[j]
  library("ROCR")
  ### CONSTRUCTING ROC AUC PLOT:
  # Get the posteriors as a dataframe.
  predictions <-predict(object = eval(parse(text=paste("fit_", i, "_control_two_trans", sep=""))), testing[,predictors], type = "prob")
  predictions.posteriors <- as.data.frame(predictions)
  
  # Evaluate the model
  pred <- prediction(predictions.posteriors[,2], testing[,3])
  roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
  auc.train <- performance(pred, measure = "auc")
  auc.train <- auc.train@y.values
  # Plot
  
  par(mar=c(5.1, 4.1, 4.1, 13), xpd=TRUE) 
  
  if(modelnumber == 1) {
    plot(roc.perf, col = j, main = "ROC Curve: Control Group Two VS. Experimental - Transformed Variables", cex.lab = 1.5, cex.main = 1.5)  
    #abline(a=0, b= 1)
    #text(x = .25, y = .65 ,paste("AUC = ", round(auc.train[[1]],3), sep = ""))
  } else{
    plot(roc.perf, col = j, add = TRUE, main = "ROC Curve: Control Group Two VS. Experimental - Transformed Variables", cex.lab = 1.5, cex.main = 1.5)
    #abline(a=0, b= 1)
    
  }
  txt[j] <- paste(i, " AUC = ", round(auc.train[[1]],3), sep = "")
  txt2[j] <- round(auc.train[[1]],3)
  j <- j+1
  
}

legend("bottomright", txt, inset=c(-.35,0), lty = 1, col = c(1:11), cex = 1.1, xpd=TRUE )


results_two_trans <- results
auc_two_trans <- txt2

```


## Feature Importance - Random Forest Model Results: Transformed Variables

```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width = 10.5, fig.height = 7.5}

p1 <- varImp(fit_rf_control_one_trans, scale = FALSE)$importance
p1$name <- rownames(p1)
p2 <- varImp(fit_rf_control_two_trans, scale = FALSE)$importance
p2$name <- rownames(p2)


p1$name <- c("surgency/positive affectivity", "distress/negative affectivity", "regulation/effortful control")
# p1name <- gsub("^.*?_","",p1$name)
# p1name <- gsub("^.*?_","",p1name)
p1$category <- p1$name
# 
p2$name <- c("surgency/positive affectivity", "distress/negative affectivity", "regulation/effortful control")

# p2name <- gsub("^.*?_","",p2$name)
# p2name <- gsub("^.*?_","",p2name)
p2$category <- p1$name

# p1 <- p1[order(-p1$experimental),]
# p2 <- p2[order(-p2$experimental),]

p1$name <- factor(p1$name, levels = p1$name[order(p1$experimental)])
p2$name <- factor(p2$name, levels = p2$name[order(p2$experimental)])


# p1a <- ggplot(p1) + ggtitle("Random Forest Control One vs. Experimental", subtitle = "Transformed Variables")   + theme_classic(base_size = 17)
# p2a <- ggplot(p2) + ggtitle("Random Forest Control Two vs. Experimental", subtitle = "Transformed Variables")   + theme_classic(base_size = 17)

p1a <- ggplot(p1[1:3,], aes(x=experimental, y=name, fill=category)) + geom_bar(aes(y=name), stat="identity") + ggtitle("Random Forest Control One vs. Experimental", subtitle = "Transformed Variables")   + theme_classic(base_size = 17) + xlab("Importance %") + ylab("Category")
p2a <- ggplot(p2[1:3,], aes(x=experimental, y=name, fill=category)) + geom_bar(aes(y=name), stat="identity") + ggtitle("Random Forest Control Two vs. Experimental", subtitle = "Transformed Variables")   + theme_classic(base_size = 17) + xlab("Importance %") + ylab("Category")


```


```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width = 10.5, fig.height = 7.5}

p1a

```

\newpage
```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width = 10.5, fig.height = 7.5}

p2a

```

## Feature Importance - Random Forest Model Results: All Variables

```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width = 10.5, fig.height = 7.5}

p1 <- varImp(fit_rf_control_one_all, scale = FALSE)$importance
p1$name <- rownames(p1)
p2 <- varImp(fit_rf_control_two_all, scale = FALSE)$importance
p2$name <- rownames(p1)

p1name <- gsub("^.*?_","",p1$name)
p1name <- gsub("^.*?_","",p1name)
p1$category <- as.factor(p1name)
levels(p1$category) <- c("regulation/effortful control", "distress/negative affectivity", "surgency/positive affectivity" )

p2name <- gsub("^.*?_","",p2$name)
p2name <- gsub("^.*?_","",p2name)
p2$category <- as.factor(p2name)
levels(p2$category) <- c("regulation/effortful control", "distress/negative affectivity", "surgency/positive affectivity" )

# p1 <- p1[order(-p1$experimental),]
# p2 <- p2[order(-p2$experimental),]

p1$name <- factor(p1$name, levels = p1$name[order(p1$experimental)])
p2$name <- factor(p2$name, levels = p2$name[order(p2$experimental)])

p1a <- ggplot(p1[1:20,], aes(x=experimental, y=name, fill=category)) + geom_bar(aes(y=name), stat="identity") + ggtitle("Random Forest Control One vs. Experimental", subtitle = "All Variables")   + theme_classic(base_size = 17)+ xlab("Importance %") + ylab("Questions")
p2a <- ggplot(p2[1:20,], aes(x=experimental, y=name, fill=category)) + geom_bar(aes(y=name), stat="identity") + ggtitle("Random Forest Control Two vs. Experimental", subtitle = "All Variables")   + theme_classic(base_size = 17)+ xlab("Importance %") + ylab("Questions")
#p2a <- ggplot(p2) + ggtitle("Random Forest Control Two vs. Experimental", subtitle = "All Variables")   + theme_classic(base_size = 17)


```

```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width = 10.5, fig.height = 7.5}

p1a

```

\newpage

```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width = 10.5, fig.height = 7.5}

p2a

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(kableExtra)

results_one_all_b <- as.data.frame(results_one_all$values)
#colnames(results_gender_b) <- colnames(as.data.frame(results_age$values))
results_one_all_accuracy <- colMeans(t(results_one_all_b[c(2,4,6,8,10,12,14,16,18,20,22)]))
results_one_all_kappa <- colMeans((results_one_all_b[c(3,5,7,9,11,13,15,17,19,21,23)]))
auc_one_all <- auc_one_all[-1]
one_all <- cbind(results_one_all_accuracy, results_one_all_kappa, auc_one_all)
rownames(one_all) <- c("lda", "glm", "svm", "knn", "nb", "cart", "c5.0", "bagging", "rf", "gbm", "adabag")

results_two_all_b <- as.data.frame(results_two_all$values)
results_two_all_accuracy <- colMeans(t(results_two_all_b[c(2,4,6,8,10,12,14,16,18,20,22)]))
results_two_all_kappa <- colMeans((results_two_all_b[c(3,5,7,9,11,13,15,17,19,21,23)]))
auc_two_all <- auc_two_all[-1]
two_all <- cbind(results_two_all_accuracy, results_two_all_kappa, auc_two_all)
rownames(two_all) <- c("lda", "glm", "svm", "knn", "nb", "cart", "c5.0", "bagging", "rf", "gbm", "adabag")


results_one_trans_b <- as.data.frame(results_one_trans$values)
#colnames(results_one_trans_b) <- colnames(as.data.frame(results_one_trans$values))
results_one_trans_accuracy <- colMeans(t(results_one_trans_b[c(2,4,6,8,10,12,14,16,18,20,22)]))
results_one_trans_kappa <- colMeans((results_one_trans_b[c(3,5,7,9,11,13,15,17,19,21,23)]))
auc_one_trans <- auc_one_trans[-1]
one_trans <- cbind(results_one_trans_accuracy, results_one_trans_kappa, auc_one_trans)
rownames(one_trans) <- c("lda", "glm", "svm", "knn", "nb", "cart", "c5.0", "bagging", "rf", "gbm", "adabag")

results_two_trans_b <- as.data.frame(results_two_trans$values)
#colnames(results_one_trans_b) <- colnames(as.data.frame(results_one_trans$values))
results_two_trans_accuracy <- colMeans(t(results_two_trans_b[c(2,4,6,8,10,12,14,16,18,20,22)]))
results_two_trans_kappa <- colMeans((results_two_trans_b[c(3,5,7,9,11,13,15,17,19,21,23)]))
auc_two_trans <- auc_two_trans[-1]
two_trans <- cbind(results_two_trans_accuracy, results_two_trans_kappa, auc_two_trans)
rownames(two_trans) <- c("lda", "glm", "svm", "knn", "nb", "cart", "c5.0", "bagging", "rf", "gbm", "adabag")

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(kableExtra)


one_two_all <- cbind(one_all, two_all)
colnames(one_two_all) <- c("accuracy", "kappa", "AUC", "accuracy", "kappa", "AUC")
kable(round(one_two_all, 3)) %>%
kable_styling("striped", full_width = F,
                position = "left", font_size = 12) %>%
  add_header_above(c("models" = 1, "Exp. VS. CG1 classification: All Variabes" = 3, "Exp. VS. CG2 classification: All Variables" = 3))

```


\newpage

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(kableExtra)


one_two_trans <- cbind(one_trans, two_trans)
colnames(one_two_trans) <- c("accuracy", "kappa", "AUC", "accuracy", "kappa", "AUC")
kable(round(one_two_trans, 3)) %>%
kable_styling("striped", full_width = F,
                position = "left", font_size = 12) %>%
  add_header_above(c("models" = 1, "Exp. VS. CG1 classification: Transformed Variables" = 3, "Exp. VS. CG2 classification: Transformed Variables" = 3))

```